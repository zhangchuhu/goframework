// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package openstatus

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"bilin/thrift/gen-go/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
type OpenStatusService interface {
  common.BaseService
  //获取 用户审查状态

  // 获取 用户审查状态
  // userId:用户uid
  // 
  // return: 0: 未审核通过状态 1:审核通过
  // 
  // 
  // 
  // Parameters:
  //  - UserId
  //  - Version
  //  - ClientType
  //  - IP
  GetOpenStatusNew(ctx context.Context, userId int64, version string, clientType string, ip string) (r int32, err error)
  // 获取 用户审查状态
  // userId:用户uid
  // 
  // return: 0: 未审核通过状态 1:审核通过
  // 
  // 
  // 
  // Parameters:
  //  - UserId
  GetOpenStatus(ctx context.Context, userId int64) (r int32, err error)
}

//获取 用户审查状态
type OpenStatusServiceClient struct {
  c thrift.TClient
  *common.BaseServiceClient
}

// Deprecated: Use NewOpenStatusService instead
func NewOpenStatusServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OpenStatusServiceClient {
  return &OpenStatusServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}}

// Deprecated: Use NewOpenStatusService instead
func NewOpenStatusServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OpenStatusServiceClient {
  return &OpenStatusServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewOpenStatusServiceClient(c thrift.TClient) *OpenStatusServiceClient {
  return &OpenStatusServiceClient{
    c: c,
    BaseServiceClient: common.NewBaseServiceClient(c),
  }
}

// 获取 用户审查状态
// userId:用户uid
// 
// return: 0: 未审核通过状态 1:审核通过
// 
// 
// 
// Parameters:
//  - UserId
//  - Version
//  - ClientType
//  - IP
func (p *OpenStatusServiceClient) GetOpenStatusNew(ctx context.Context, userId int64, version string, clientType string, ip string) (r int32, err error) {
  var _args0 OpenStatusServiceGetOpenStatusNewArgs
  _args0.UserId = userId
  _args0.Version = version
  _args0.ClientType = clientType
  _args0.IP = ip
  var _result1 OpenStatusServiceGetOpenStatusNewResult
  if err = p.c.Call(ctx, "getOpenStatusNew", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// 获取 用户审查状态
// userId:用户uid
// 
// return: 0: 未审核通过状态 1:审核通过
// 
// 
// 
// Parameters:
//  - UserId
func (p *OpenStatusServiceClient) GetOpenStatus(ctx context.Context, userId int64) (r int32, err error) {
  var _args2 OpenStatusServiceGetOpenStatusArgs
  _args2.UserId = userId
  var _result3 OpenStatusServiceGetOpenStatusResult
  if err = p.c.Call(ctx, "getOpenStatus", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type OpenStatusServiceProcessor struct {
  *common.BaseServiceProcessor
}

func NewOpenStatusServiceProcessor(handler OpenStatusService) *OpenStatusServiceProcessor {
  self4 := &OpenStatusServiceProcessor{common.NewBaseServiceProcessor(handler)}
  self4.AddToProcessorMap("getOpenStatusNew", &openStatusServiceProcessorGetOpenStatusNew{handler:handler})
  self4.AddToProcessorMap("getOpenStatus", &openStatusServiceProcessorGetOpenStatus{handler:handler})
  return self4
}

type openStatusServiceProcessorGetOpenStatusNew struct {
  handler OpenStatusService
}

func (p *openStatusServiceProcessorGetOpenStatusNew) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OpenStatusServiceGetOpenStatusNewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOpenStatusNew", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OpenStatusServiceGetOpenStatusNewResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetOpenStatusNew(ctx, args.UserId, args.Version, args.ClientType, args.IP); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOpenStatusNew: " + err2.Error())
    oprot.WriteMessageBegin("getOpenStatusNew", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getOpenStatusNew", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type openStatusServiceProcessorGetOpenStatus struct {
  handler OpenStatusService
}

func (p *openStatusServiceProcessorGetOpenStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OpenStatusServiceGetOpenStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOpenStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OpenStatusServiceGetOpenStatusResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetOpenStatus(ctx, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOpenStatus: " + err2.Error())
    oprot.WriteMessageBegin("getOpenStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getOpenStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserId
//  - Version
//  - ClientType
//  - IP
type OpenStatusServiceGetOpenStatusNewArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  Version string `thrift:"version,2" db:"version" json:"version"`
  ClientType string `thrift:"clientType,3" db:"clientType" json:"clientType"`
  IP string `thrift:"ip,4" db:"ip" json:"ip"`
}

func NewOpenStatusServiceGetOpenStatusNewArgs() *OpenStatusServiceGetOpenStatusNewArgs {
  return &OpenStatusServiceGetOpenStatusNewArgs{}
}


func (p *OpenStatusServiceGetOpenStatusNewArgs) GetUserId() int64 {
  return p.UserId
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) GetVersion() string {
  return p.Version
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) GetClientType() string {
  return p.ClientType
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) GetIP() string {
  return p.IP
}
func (p *OpenStatusServiceGetOpenStatusNewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClientType = v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOpenStatusNew_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientType: ", p), err) }
  if err := oprot.WriteString(string(p.ClientType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientType: ", p), err) }
  return err
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err) }
  return err
}

func (p *OpenStatusServiceGetOpenStatusNewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenStatusServiceGetOpenStatusNewArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OpenStatusServiceGetOpenStatusNewResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOpenStatusServiceGetOpenStatusNewResult() *OpenStatusServiceGetOpenStatusNewResult {
  return &OpenStatusServiceGetOpenStatusNewResult{}
}

var OpenStatusServiceGetOpenStatusNewResult_Success_DEFAULT int32
func (p *OpenStatusServiceGetOpenStatusNewResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return OpenStatusServiceGetOpenStatusNewResult_Success_DEFAULT
  }
return *p.Success
}
func (p *OpenStatusServiceGetOpenStatusNewResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OpenStatusServiceGetOpenStatusNewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOpenStatusNew_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusNewResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OpenStatusServiceGetOpenStatusNewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenStatusServiceGetOpenStatusNewResult(%+v)", *p)
}

// Attributes:
//  - UserId
type OpenStatusServiceGetOpenStatusArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewOpenStatusServiceGetOpenStatusArgs() *OpenStatusServiceGetOpenStatusArgs {
  return &OpenStatusServiceGetOpenStatusArgs{}
}


func (p *OpenStatusServiceGetOpenStatusArgs) GetUserId() int64 {
  return p.UserId
}
func (p *OpenStatusServiceGetOpenStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOpenStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *OpenStatusServiceGetOpenStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenStatusServiceGetOpenStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OpenStatusServiceGetOpenStatusResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOpenStatusServiceGetOpenStatusResult() *OpenStatusServiceGetOpenStatusResult {
  return &OpenStatusServiceGetOpenStatusResult{}
}

var OpenStatusServiceGetOpenStatusResult_Success_DEFAULT int32
func (p *OpenStatusServiceGetOpenStatusResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return OpenStatusServiceGetOpenStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *OpenStatusServiceGetOpenStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OpenStatusServiceGetOpenStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OpenStatusServiceGetOpenStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOpenStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenStatusServiceGetOpenStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OpenStatusServiceGetOpenStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenStatusServiceGetOpenStatusResult(%+v)", *p)
}


