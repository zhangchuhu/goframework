// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hotline

import (
	"bilin/thrift/gen-go/common"
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__

type TokenAuthType int64

const (
	TokenAuthType_tat_up_voice   TokenAuthType = 1
	TokenAuthType_tat_down_voice TokenAuthType = 2
	TokenAuthType_tat_up_video   TokenAuthType = 3
	TokenAuthType_tat_down_video TokenAuthType = 4
	TokenAuthType_tat_up_text    TokenAuthType = 5
	TokenAuthType_tat_down_text  TokenAuthType = 6
)

func (p TokenAuthType) String() string {
	switch p {
	case TokenAuthType_tat_up_voice:
		return "tat_up_voice"
	case TokenAuthType_tat_down_voice:
		return "tat_down_voice"
	case TokenAuthType_tat_up_video:
		return "tat_up_video"
	case TokenAuthType_tat_down_video:
		return "tat_down_video"
	case TokenAuthType_tat_up_text:
		return "tat_up_text"
	case TokenAuthType_tat_down_text:
		return "tat_down_text"
	}
	return "<UNSET>"
}

func TokenAuthTypeFromString(s string) (TokenAuthType, error) {
	switch s {
	case "tat_up_voice":
		return TokenAuthType_tat_up_voice, nil
	case "tat_down_voice":
		return TokenAuthType_tat_down_voice, nil
	case "tat_up_video":
		return TokenAuthType_tat_up_video, nil
	case "tat_down_video":
		return TokenAuthType_tat_down_video, nil
	case "tat_up_text":
		return TokenAuthType_tat_up_text, nil
	case "tat_down_text":
		return TokenAuthType_tat_down_text, nil
	}
	return TokenAuthType(0), fmt.Errorf("not a valid TokenAuthType string")
}

func TokenAuthTypePtr(v TokenAuthType) *TokenAuthType { return &v }

func (p TokenAuthType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TokenAuthType) UnmarshalText(text []byte) error {
	q, err := TokenAuthTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TokenAuthType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TokenAuthType(v)
	return nil
}

func (p *TokenAuthType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// JoinHotLine接口调用返回接口
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - Status
//  - Nickname
//  - HeaderUrl
//  - Sex
//  - Age
//  - CityName
//  - HostBilinId
//  - Title
//  - RoomType
//  - RoomCategoryId
//  - RoomPendantLevel
//  - Sign
type JoinHotLineRet struct {
	Result_          string  `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg         *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	Status           int32   `thrift:"status,3,required" db:"status" json:"status"`
	Nickname         *string `thrift:"nickname,4" db:"nickname" json:"nickname,omitempty"`
	HeaderUrl        *string `thrift:"headerUrl,5" db:"headerUrl" json:"headerUrl,omitempty"`
	Sex              int32   `thrift:"sex,6,required" db:"sex" json:"sex"`
	Age              int32   `thrift:"age,7,required" db:"age" json:"age"`
	CityName         *string `thrift:"cityName,8" db:"cityName" json:"cityName,omitempty"`
	HostBilinId      *int64  `thrift:"hostBilinId,9" db:"hostBilinId" json:"hostBilinId,omitempty"`
	Title            *string `thrift:"title,10" db:"title" json:"title,omitempty"`
	RoomType         *int32  `thrift:"roomType,11" db:"roomType" json:"roomType,omitempty"`
	RoomCategoryId   *int32  `thrift:"roomCategoryId,12" db:"roomCategoryId" json:"roomCategoryId,omitempty"`
	RoomPendantLevel *int32  `thrift:"roomPendantLevel,13" db:"roomPendantLevel" json:"roomPendantLevel,omitempty"`
	Sign             *string `thrift:"sign,14" db:"sign" json:"sign,omitempty"`
}

func NewJoinHotLineRet() *JoinHotLineRet {
	return &JoinHotLineRet{}
}

func (p *JoinHotLineRet) GetResult_() string {
	return p.Result_
}

var JoinHotLineRet_ErrorMsg_DEFAULT string

func (p *JoinHotLineRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return JoinHotLineRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

func (p *JoinHotLineRet) GetStatus() int32 {
	return p.Status
}

var JoinHotLineRet_Nickname_DEFAULT string

func (p *JoinHotLineRet) GetNickname() string {
	if !p.IsSetNickname() {
		return JoinHotLineRet_Nickname_DEFAULT
	}
	return *p.Nickname
}

var JoinHotLineRet_HeaderUrl_DEFAULT string

func (p *JoinHotLineRet) GetHeaderUrl() string {
	if !p.IsSetHeaderUrl() {
		return JoinHotLineRet_HeaderUrl_DEFAULT
	}
	return *p.HeaderUrl
}

func (p *JoinHotLineRet) GetSex() int32 {
	return p.Sex
}

func (p *JoinHotLineRet) GetAge() int32 {
	return p.Age
}

var JoinHotLineRet_CityName_DEFAULT string

func (p *JoinHotLineRet) GetCityName() string {
	if !p.IsSetCityName() {
		return JoinHotLineRet_CityName_DEFAULT
	}
	return *p.CityName
}

var JoinHotLineRet_HostBilinId_DEFAULT int64

func (p *JoinHotLineRet) GetHostBilinId() int64 {
	if !p.IsSetHostBilinId() {
		return JoinHotLineRet_HostBilinId_DEFAULT
	}
	return *p.HostBilinId
}

var JoinHotLineRet_Title_DEFAULT string

func (p *JoinHotLineRet) GetTitle() string {
	if !p.IsSetTitle() {
		return JoinHotLineRet_Title_DEFAULT
	}
	return *p.Title
}

var JoinHotLineRet_RoomType_DEFAULT int32

func (p *JoinHotLineRet) GetRoomType() int32 {
	if !p.IsSetRoomType() {
		return JoinHotLineRet_RoomType_DEFAULT
	}
	return *p.RoomType
}

var JoinHotLineRet_RoomCategoryId_DEFAULT int32

func (p *JoinHotLineRet) GetRoomCategoryId() int32 {
	if !p.IsSetRoomCategoryId() {
		return JoinHotLineRet_RoomCategoryId_DEFAULT
	}
	return *p.RoomCategoryId
}

var JoinHotLineRet_RoomPendantLevel_DEFAULT int32

func (p *JoinHotLineRet) GetRoomPendantLevel() int32 {
	if !p.IsSetRoomPendantLevel() {
		return JoinHotLineRet_RoomPendantLevel_DEFAULT
	}
	return *p.RoomPendantLevel
}

var JoinHotLineRet_Sign_DEFAULT string

func (p *JoinHotLineRet) GetSign() string {
	if !p.IsSetSign() {
		return JoinHotLineRet_Sign_DEFAULT
	}
	return *p.Sign
}
func (p *JoinHotLineRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *JoinHotLineRet) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *JoinHotLineRet) IsSetHeaderUrl() bool {
	return p.HeaderUrl != nil
}

func (p *JoinHotLineRet) IsSetCityName() bool {
	return p.CityName != nil
}

func (p *JoinHotLineRet) IsSetHostBilinId() bool {
	return p.HostBilinId != nil
}

func (p *JoinHotLineRet) IsSetTitle() bool {
	return p.Title != nil
}

func (p *JoinHotLineRet) IsSetRoomType() bool {
	return p.RoomType != nil
}

func (p *JoinHotLineRet) IsSetRoomCategoryId() bool {
	return p.RoomCategoryId != nil
}

func (p *JoinHotLineRet) IsSetRoomPendantLevel() bool {
	return p.RoomPendantLevel != nil
}

func (p *JoinHotLineRet) IsSetSign() bool {
	return p.Sign != nil
}

func (p *JoinHotLineRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false
	var issetStatus bool = false
	var issetSex bool = false
	var issetAge bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetStatus = true
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetSex = true
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetAge = true
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetSex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sex is not set"))
	}
	if !issetAge {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Age is not set"))
	}
	return nil
}

func (p *JoinHotLineRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.HeaderUrl = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Sex = v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Age = v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CityName = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.HostBilinId = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RoomType = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RoomCategoryId = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.RoomPendantLevel = &v
	}
	return nil
}

func (p *JoinHotLineRet) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Sign = &v
	}
	return nil
}

func (p *JoinHotLineRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JoinHotLineRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JoinHotLineRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *JoinHotLineRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *JoinHotLineRet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nickname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nickname (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nickname: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeaderUrl() {
		if err := oprot.WriteFieldBegin("headerUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:headerUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HeaderUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headerUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:headerUrl: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sex", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Sex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sex (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sex: ", p), err)
	}
	return err
}

func (p *JoinHotLineRet) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("age", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:age: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Age)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.age (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:age: ", p), err)
	}
	return err
}

func (p *JoinHotLineRet) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCityName() {
		if err := oprot.WriteFieldBegin("cityName", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cityName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CityName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cityName (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cityName: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostBilinId() {
		if err := oprot.WriteFieldBegin("hostBilinId", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:hostBilinId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.HostBilinId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hostBilinId (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:hostBilinId: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:title: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomType() {
		if err := oprot.WriteFieldBegin("roomType", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:roomType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RoomType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomType (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:roomType: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomCategoryId() {
		if err := oprot.WriteFieldBegin("roomCategoryId", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:roomCategoryId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RoomCategoryId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomCategoryId (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:roomCategoryId: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomPendantLevel() {
		if err := oprot.WriteFieldBegin("roomPendantLevel", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:roomPendantLevel: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RoomPendantLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomPendantLevel (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:roomPendantLevel: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err := oprot.WriteFieldBegin("sign", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:sign: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sign (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:sign: ", p), err)
		}
	}
	return err
}

func (p *JoinHotLineRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinHotLineRet(%+v)", *p)
}

// GetInitHotLineInfo
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - ViewUsersCoff
//  - PraisesCoff
//  - ViewCnt
//  - Praises
//  - LineType
//  - CurrentViewCntIncr
type GetInitHotLineInfoRet struct {
	Result_            string  `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg           *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	ViewUsersCoff      float64 `thrift:"viewUsersCoff,3,required" db:"viewUsersCoff" json:"viewUsersCoff"`
	PraisesCoff        float64 `thrift:"praisesCoff,4,required" db:"praisesCoff" json:"praisesCoff"`
	ViewCnt            int64   `thrift:"viewCnt,5,required" db:"viewCnt" json:"viewCnt"`
	Praises            int64   `thrift:"praises,6,required" db:"praises" json:"praises"`
	LineType           *int32  `thrift:"lineType,7" db:"lineType" json:"lineType,omitempty"`
	CurrentViewCntIncr *int64  `thrift:"currentViewCntIncr,8" db:"currentViewCntIncr" json:"currentViewCntIncr,omitempty"`
}

func NewGetInitHotLineInfoRet() *GetInitHotLineInfoRet {
	return &GetInitHotLineInfoRet{}
}

func (p *GetInitHotLineInfoRet) GetResult_() string {
	return p.Result_
}

var GetInitHotLineInfoRet_ErrorMsg_DEFAULT string

func (p *GetInitHotLineInfoRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return GetInitHotLineInfoRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

func (p *GetInitHotLineInfoRet) GetViewUsersCoff() float64 {
	return p.ViewUsersCoff
}

func (p *GetInitHotLineInfoRet) GetPraisesCoff() float64 {
	return p.PraisesCoff
}

func (p *GetInitHotLineInfoRet) GetViewCnt() int64 {
	return p.ViewCnt
}

func (p *GetInitHotLineInfoRet) GetPraises() int64 {
	return p.Praises
}

var GetInitHotLineInfoRet_LineType_DEFAULT int32

func (p *GetInitHotLineInfoRet) GetLineType() int32 {
	if !p.IsSetLineType() {
		return GetInitHotLineInfoRet_LineType_DEFAULT
	}
	return *p.LineType
}

var GetInitHotLineInfoRet_CurrentViewCntIncr_DEFAULT int64

func (p *GetInitHotLineInfoRet) GetCurrentViewCntIncr() int64 {
	if !p.IsSetCurrentViewCntIncr() {
		return GetInitHotLineInfoRet_CurrentViewCntIncr_DEFAULT
	}
	return *p.CurrentViewCntIncr
}
func (p *GetInitHotLineInfoRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *GetInitHotLineInfoRet) IsSetLineType() bool {
	return p.LineType != nil
}

func (p *GetInitHotLineInfoRet) IsSetCurrentViewCntIncr() bool {
	return p.CurrentViewCntIncr != nil
}

func (p *GetInitHotLineInfoRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false
	var issetViewUsersCoff bool = false
	var issetPraisesCoff bool = false
	var issetViewCnt bool = false
	var issetPraises bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetViewUsersCoff = true
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetPraisesCoff = true
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetViewCnt = true
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetPraises = true
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	if !issetViewUsersCoff {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ViewUsersCoff is not set"))
	}
	if !issetPraisesCoff {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PraisesCoff is not set"))
	}
	if !issetViewCnt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ViewCnt is not set"))
	}
	if !issetPraises {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Praises is not set"))
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ViewUsersCoff = v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PraisesCoff = v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ViewCnt = v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Praises = v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LineType = &v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CurrentViewCntIncr = &v
	}
	return nil
}

func (p *GetInitHotLineInfoRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetInitHotLineInfoRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetInitHotLineInfoRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewUsersCoff", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:viewUsersCoff: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ViewUsersCoff)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.viewUsersCoff (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:viewUsersCoff: ", p), err)
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("praisesCoff", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:praisesCoff: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.PraisesCoff)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.praisesCoff (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:praisesCoff: ", p), err)
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewCnt", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:viewCnt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ViewCnt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.viewCnt (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:viewCnt: ", p), err)
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("praises", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:praises: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Praises)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.praises (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:praises: ", p), err)
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineType() {
		if err := oprot.WriteFieldBegin("lineType", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lineType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LineType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lineType (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lineType: ", p), err)
		}
	}
	return err
}

func (p *GetInitHotLineInfoRet) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentViewCntIncr() {
		if err := oprot.WriteFieldBegin("currentViewCntIncr", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:currentViewCntIncr: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CurrentViewCntIncr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.currentViewCntIncr (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:currentViewCntIncr: ", p), err)
		}
	}
	return err
}

func (p *GetInitHotLineInfoRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInitHotLineInfoRet(%+v)", *p)
}

// GetHotLineNoticeText接口调用返回接口
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - NoticeText
type GetHotLineNoticeTextRet struct {
	Result_    string  `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg   *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	NoticeText string  `thrift:"noticeText,3,required" db:"noticeText" json:"noticeText"`
}

func NewGetHotLineNoticeTextRet() *GetHotLineNoticeTextRet {
	return &GetHotLineNoticeTextRet{}
}

func (p *GetHotLineNoticeTextRet) GetResult_() string {
	return p.Result_
}

var GetHotLineNoticeTextRet_ErrorMsg_DEFAULT string

func (p *GetHotLineNoticeTextRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return GetHotLineNoticeTextRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

func (p *GetHotLineNoticeTextRet) GetNoticeText() string {
	return p.NoticeText
}
func (p *GetHotLineNoticeTextRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *GetHotLineNoticeTextRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false
	var issetNoticeText bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetNoticeText = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	if !issetNoticeText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NoticeText is not set"))
	}
	return nil
}

func (p *GetHotLineNoticeTextRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *GetHotLineNoticeTextRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *GetHotLineNoticeTextRet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NoticeText = v
	}
	return nil
}

func (p *GetHotLineNoticeTextRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetHotLineNoticeTextRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetHotLineNoticeTextRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *GetHotLineNoticeTextRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *GetHotLineNoticeTextRet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noticeText", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noticeText: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoticeText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noticeText (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noticeText: ", p), err)
	}
	return err
}

func (p *GetHotLineNoticeTextRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHotLineNoticeTextRet(%+v)", *p)
}

// Attributes:
//  - UID
//  - TaskKey
//  - TaskID
//  - RoomID
type TaskReq struct {
	UID     int64  `thrift:"uid,1" db:"uid" json:"uid"`
	TaskKey string `thrift:"task_key,2" db:"task_key" json:"task_key"`
	TaskID  string `thrift:"task_id,3" db:"task_id" json:"task_id"`
	RoomID  int64  `thrift:"room_id,4" db:"room_id" json:"room_id"`
}

func NewTaskReq() *TaskReq {
	return &TaskReq{}
}

func (p *TaskReq) GetUID() int64 {
	return p.UID
}

func (p *TaskReq) GetTaskKey() string {
	return p.TaskKey
}

func (p *TaskReq) GetTaskID() string {
	return p.TaskID
}

func (p *TaskReq) GetRoomID() int64 {
	return p.RoomID
}
func (p *TaskReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TaskReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TaskReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskKey = v
	}
	return nil
}

func (p *TaskReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TaskID = v
	}
	return nil
}

func (p *TaskReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *TaskReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *TaskReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task_key", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task_key: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.task_key (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task_key: ", p), err)
	}
	return err
}

func (p *TaskReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task_id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.task_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_id: ", p), err)
	}
	return err
}

func (p *TaskReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("room_id", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err)
	}
	return err
}

func (p *TaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskReq(%+v)", *p)
}

type HotLineService interface {
	common.BaseService
	//热线直播相关服务接口

	// Parameters:
	//  - HotLineId
	//  - Cvu
	//  - Tvc
	//  - Ps
	//  - Tcvu
	//  - Ttvc
	//  - Tps
	FreshData(ctx context.Context, hotLineId int32, cvu int64, tvc int64, ps int64, tcvu int64, ttvc int64, tps int64) (r *common.ComRet, err error)
	// Parameters:
	//  - HotLineId
	//  - UserId
	JoinHotLine(ctx context.Context, hotLineId int32, userId int64) (r *JoinHotLineRet, err error)
	// Parameters:
	//  - HotLineId
	GetInitHotLineInfo(ctx context.Context, hotLineId int32) (r *GetInitHotLineInfoRet, err error)
	// Parameters:
	//  - HotLineId
	//  - UserId
	//  - TargetUserId
	//  - TargetType
	KickUser(ctx context.Context, hotLineId int32, userId int64, targetUserId int64, targetType int32) (r *common.ComRet, err error)
	// Parameters:
	//  - HotLineId
	GetHotLineNoticeText(ctx context.Context, hotLineId int32) (r *GetHotLineNoticeTextRet, err error)
	// Parameters:
	//  - HotLineId
	//  - UserId
	HostUserLeave(ctx context.Context, hotLineId int32, userId int64) (r *common.ComRet, err error)
	// Parameters:
	//  - HotLineId
	//  - UserId
	HostUserOfflineTooLong(ctx context.Context, hotLineId int32, userId int64) (r *common.ComRet, err error)
	// Parameters:
	//  - LiveId
	//  - UserList
	//  - AuthType
	//  - Disable
	UpdateLiveAuthority(ctx context.Context, liveId int32, userList []int64, authType []TokenAuthType, disable bool) (r *common.ComRet, err error)
}

//热线直播相关服务接口
type HotLineServiceClient struct {
	c thrift.TClient
	*common.BaseServiceClient
}

// Deprecated: Use NewHotLineService instead
func NewHotLineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HotLineServiceClient {
	return &HotLineServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}
}

// Deprecated: Use NewHotLineService instead
func NewHotLineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HotLineServiceClient {
	return &HotLineServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewHotLineServiceClient(c thrift.TClient) *HotLineServiceClient {
	return &HotLineServiceClient{
		c:                 c,
		BaseServiceClient: common.NewBaseServiceClient(c),
	}
}

// Parameters:
//  - HotLineId
//  - Cvu
//  - Tvc
//  - Ps
//  - Tcvu
//  - Ttvc
//  - Tps
func (p *HotLineServiceClient) FreshData(ctx context.Context, hotLineId int32, cvu int64, tvc int64, ps int64, tcvu int64, ttvc int64, tps int64) (r *common.ComRet, err error) {
	var _args0 HotLineServiceFreshDataArgs
	_args0.HotLineId = hotLineId
	_args0.Cvu = cvu
	_args0.Tvc = tvc
	_args0.Ps = ps
	_args0.Tcvu = tcvu
	_args0.Ttvc = ttvc
	_args0.Tps = tps
	var _result1 HotLineServiceFreshDataResult
	if err = p.c.Call(ctx, "freshData", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
//  - UserId
func (p *HotLineServiceClient) JoinHotLine(ctx context.Context, hotLineId int32, userId int64) (r *JoinHotLineRet, err error) {
	var _args2 HotLineServiceJoinHotLineArgs
	_args2.HotLineId = hotLineId
	_args2.UserId = userId
	var _result3 HotLineServiceJoinHotLineResult
	if err = p.c.Call(ctx, "joinHotLine", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
func (p *HotLineServiceClient) GetInitHotLineInfo(ctx context.Context, hotLineId int32) (r *GetInitHotLineInfoRet, err error) {
	var _args4 HotLineServiceGetInitHotLineInfoArgs
	_args4.HotLineId = hotLineId
	var _result5 HotLineServiceGetInitHotLineInfoResult
	if err = p.c.Call(ctx, "getInitHotLineInfo", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
//  - UserId
//  - TargetUserId
//  - TargetType
func (p *HotLineServiceClient) KickUser(ctx context.Context, hotLineId int32, userId int64, targetUserId int64, targetType int32) (r *common.ComRet, err error) {
	var _args6 HotLineServiceKickUserArgs
	_args6.HotLineId = hotLineId
	_args6.UserId = userId
	_args6.TargetUserId = targetUserId
	_args6.TargetType = targetType
	var _result7 HotLineServiceKickUserResult
	if err = p.c.Call(ctx, "kickUser", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
func (p *HotLineServiceClient) GetHotLineNoticeText(ctx context.Context, hotLineId int32) (r *GetHotLineNoticeTextRet, err error) {
	var _args8 HotLineServiceGetHotLineNoticeTextArgs
	_args8.HotLineId = hotLineId
	var _result9 HotLineServiceGetHotLineNoticeTextResult
	if err = p.c.Call(ctx, "GetHotLineNoticeText", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
//  - UserId
func (p *HotLineServiceClient) HostUserLeave(ctx context.Context, hotLineId int32, userId int64) (r *common.ComRet, err error) {
	var _args10 HotLineServiceHostUserLeaveArgs
	_args10.HotLineId = hotLineId
	_args10.UserId = userId
	var _result11 HotLineServiceHostUserLeaveResult
	if err = p.c.Call(ctx, "hostUserLeave", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Parameters:
//  - HotLineId
//  - UserId
func (p *HotLineServiceClient) HostUserOfflineTooLong(ctx context.Context, hotLineId int32, userId int64) (r *common.ComRet, err error) {
	var _args12 HotLineServiceHostUserOfflineTooLongArgs
	_args12.HotLineId = hotLineId
	_args12.UserId = userId
	var _result13 HotLineServiceHostUserOfflineTooLongResult
	if err = p.c.Call(ctx, "hostUserOfflineTooLong", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

// Parameters:
//  - LiveId
//  - UserList
//  - AuthType
//  - Disable
func (p *HotLineServiceClient) UpdateLiveAuthority(ctx context.Context, liveId int32, userList []int64, authType []TokenAuthType, disable bool) (r *common.ComRet, err error) {
	var _args14 HotLineServiceUpdateLiveAuthorityArgs
	_args14.LiveId = liveId
	_args14.UserList = userList
	_args14.AuthType = authType
	_args14.Disable = disable
	var _result15 HotLineServiceUpdateLiveAuthorityResult
	if err = p.c.Call(ctx, "updateLiveAuthority", &_args14, &_result15); err != nil {
		return
	}
	return _result15.GetSuccess(), nil
}

type HotLineServiceProcessor struct {
	*common.BaseServiceProcessor
}

func NewHotLineServiceProcessor(handler HotLineService) *HotLineServiceProcessor {
	self16 := &HotLineServiceProcessor{common.NewBaseServiceProcessor(handler)}
	self16.AddToProcessorMap("freshData", &hotLineServiceProcessorFreshData{handler: handler})
	self16.AddToProcessorMap("joinHotLine", &hotLineServiceProcessorJoinHotLine{handler: handler})
	self16.AddToProcessorMap("getInitHotLineInfo", &hotLineServiceProcessorGetInitHotLineInfo{handler: handler})
	self16.AddToProcessorMap("kickUser", &hotLineServiceProcessorKickUser{handler: handler})
	self16.AddToProcessorMap("GetHotLineNoticeText", &hotLineServiceProcessorGetHotLineNoticeText{handler: handler})
	self16.AddToProcessorMap("hostUserLeave", &hotLineServiceProcessorHostUserLeave{handler: handler})
	self16.AddToProcessorMap("hostUserOfflineTooLong", &hotLineServiceProcessorHostUserOfflineTooLong{handler: handler})
	self16.AddToProcessorMap("updateLiveAuthority", &hotLineServiceProcessorUpdateLiveAuthority{handler: handler})
	return self16
}

type hotLineServiceProcessorFreshData struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorFreshData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceFreshDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("freshData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceFreshDataResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.FreshData(ctx, args.HotLineId, args.Cvu, args.Tvc, args.Ps, args.Tcvu, args.Ttvc, args.Tps); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing freshData: "+err2.Error())
		oprot.WriteMessageBegin("freshData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("freshData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorJoinHotLine struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorJoinHotLine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceJoinHotLineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("joinHotLine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceJoinHotLineResult{}
	var retval *JoinHotLineRet
	var err2 error
	if retval, err2 = p.handler.JoinHotLine(ctx, args.HotLineId, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing joinHotLine: "+err2.Error())
		oprot.WriteMessageBegin("joinHotLine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("joinHotLine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorGetInitHotLineInfo struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorGetInitHotLineInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceGetInitHotLineInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getInitHotLineInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceGetInitHotLineInfoResult{}
	var retval *GetInitHotLineInfoRet
	var err2 error
	if retval, err2 = p.handler.GetInitHotLineInfo(ctx, args.HotLineId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getInitHotLineInfo: "+err2.Error())
		oprot.WriteMessageBegin("getInitHotLineInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getInitHotLineInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorKickUser struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorKickUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceKickUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("kickUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceKickUserResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.KickUser(ctx, args.HotLineId, args.UserId, args.TargetUserId, args.TargetType); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickUser: "+err2.Error())
		oprot.WriteMessageBegin("kickUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("kickUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorGetHotLineNoticeText struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorGetHotLineNoticeText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceGetHotLineNoticeTextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetHotLineNoticeText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceGetHotLineNoticeTextResult{}
	var retval *GetHotLineNoticeTextRet
	var err2 error
	if retval, err2 = p.handler.GetHotLineNoticeText(ctx, args.HotLineId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetHotLineNoticeText: "+err2.Error())
		oprot.WriteMessageBegin("GetHotLineNoticeText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetHotLineNoticeText", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorHostUserLeave struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorHostUserLeave) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceHostUserLeaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hostUserLeave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceHostUserLeaveResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.HostUserLeave(ctx, args.HotLineId, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hostUserLeave: "+err2.Error())
		oprot.WriteMessageBegin("hostUserLeave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("hostUserLeave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorHostUserOfflineTooLong struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorHostUserOfflineTooLong) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceHostUserOfflineTooLongArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hostUserOfflineTooLong", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceHostUserOfflineTooLongResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.HostUserOfflineTooLong(ctx, args.HotLineId, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hostUserOfflineTooLong: "+err2.Error())
		oprot.WriteMessageBegin("hostUserOfflineTooLong", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("hostUserOfflineTooLong", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hotLineServiceProcessorUpdateLiveAuthority struct {
	handler HotLineService
}

func (p *hotLineServiceProcessorUpdateLiveAuthority) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HotLineServiceUpdateLiveAuthorityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateLiveAuthority", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HotLineServiceUpdateLiveAuthorityResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.UpdateLiveAuthority(ctx, args.LiveId, args.UserList, args.AuthType, args.Disable); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLiveAuthority: "+err2.Error())
		oprot.WriteMessageBegin("updateLiveAuthority", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateLiveAuthority", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - HotLineId
//  - Cvu
//  - Tvc
//  - Ps
//  - Tcvu
//  - Ttvc
//  - Tps
type HotLineServiceFreshDataArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
	Cvu       int64 `thrift:"cvu,2" db:"cvu" json:"cvu"`
	Tvc       int64 `thrift:"tvc,3" db:"tvc" json:"tvc"`
	Ps        int64 `thrift:"ps,4" db:"ps" json:"ps"`
	Tcvu      int64 `thrift:"tcvu,5" db:"tcvu" json:"tcvu"`
	Ttvc      int64 `thrift:"ttvc,6" db:"ttvc" json:"ttvc"`
	Tps       int64 `thrift:"tps,7" db:"tps" json:"tps"`
}

func NewHotLineServiceFreshDataArgs() *HotLineServiceFreshDataArgs {
	return &HotLineServiceFreshDataArgs{}
}

func (p *HotLineServiceFreshDataArgs) GetHotLineId() int32 {
	return p.HotLineId
}

func (p *HotLineServiceFreshDataArgs) GetCvu() int64 {
	return p.Cvu
}

func (p *HotLineServiceFreshDataArgs) GetTvc() int64 {
	return p.Tvc
}

func (p *HotLineServiceFreshDataArgs) GetPs() int64 {
	return p.Ps
}

func (p *HotLineServiceFreshDataArgs) GetTcvu() int64 {
	return p.Tcvu
}

func (p *HotLineServiceFreshDataArgs) GetTtvc() int64 {
	return p.Ttvc
}

func (p *HotLineServiceFreshDataArgs) GetTps() int64 {
	return p.Tps
}
func (p *HotLineServiceFreshDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cvu = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tvc = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Ps = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Tcvu = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Ttvc = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Tps = v
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freshData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceFreshDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cvu", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cvu: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Cvu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cvu (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cvu: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tvc", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tvc: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Tvc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tvc (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tvc: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ps", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ps: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ps (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ps: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tcvu", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tcvu: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Tcvu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tcvu (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tcvu: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttvc", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ttvc: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ttvc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttvc (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ttvc: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tps", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tps: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Tps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tps (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tps: ", p), err)
	}
	return err
}

func (p *HotLineServiceFreshDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceFreshDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceFreshDataResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceFreshDataResult() *HotLineServiceFreshDataResult {
	return &HotLineServiceFreshDataResult{}
}

var HotLineServiceFreshDataResult_Success_DEFAULT *common.ComRet

func (p *HotLineServiceFreshDataResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return HotLineServiceFreshDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceFreshDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceFreshDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceFreshDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceFreshDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freshData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceFreshDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceFreshDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceFreshDataResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
//  - UserId
type HotLineServiceJoinHotLineArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
	UserId    int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewHotLineServiceJoinHotLineArgs() *HotLineServiceJoinHotLineArgs {
	return &HotLineServiceJoinHotLineArgs{}
}

func (p *HotLineServiceJoinHotLineArgs) GetHotLineId() int32 {
	return p.HotLineId
}

func (p *HotLineServiceJoinHotLineArgs) GetUserId() int64 {
	return p.UserId
}
func (p *HotLineServiceJoinHotLineArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceJoinHotLineArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceJoinHotLineArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *HotLineServiceJoinHotLineArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("joinHotLine_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceJoinHotLineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceJoinHotLineArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *HotLineServiceJoinHotLineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceJoinHotLineArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceJoinHotLineResult struct {
	Success *JoinHotLineRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceJoinHotLineResult() *HotLineServiceJoinHotLineResult {
	return &HotLineServiceJoinHotLineResult{}
}

var HotLineServiceJoinHotLineResult_Success_DEFAULT *JoinHotLineRet

func (p *HotLineServiceJoinHotLineResult) GetSuccess() *JoinHotLineRet {
	if !p.IsSetSuccess() {
		return HotLineServiceJoinHotLineResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceJoinHotLineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceJoinHotLineResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceJoinHotLineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &JoinHotLineRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceJoinHotLineResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("joinHotLine_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceJoinHotLineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceJoinHotLineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceJoinHotLineResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
type HotLineServiceGetInitHotLineInfoArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
}

func NewHotLineServiceGetInitHotLineInfoArgs() *HotLineServiceGetInitHotLineInfoArgs {
	return &HotLineServiceGetInitHotLineInfoArgs{}
}

func (p *HotLineServiceGetInitHotLineInfoArgs) GetHotLineId() int32 {
	return p.HotLineId
}
func (p *HotLineServiceGetInitHotLineInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInitHotLineInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceGetInitHotLineInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceGetInitHotLineInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceGetInitHotLineInfoResult struct {
	Success *GetInitHotLineInfoRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceGetInitHotLineInfoResult() *HotLineServiceGetInitHotLineInfoResult {
	return &HotLineServiceGetInitHotLineInfoResult{}
}

var HotLineServiceGetInitHotLineInfoResult_Success_DEFAULT *GetInitHotLineInfoRet

func (p *HotLineServiceGetInitHotLineInfoResult) GetSuccess() *GetInitHotLineInfoRet {
	if !p.IsSetSuccess() {
		return HotLineServiceGetInitHotLineInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceGetInitHotLineInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceGetInitHotLineInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetInitHotLineInfoRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInitHotLineInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceGetInitHotLineInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceGetInitHotLineInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceGetInitHotLineInfoResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
//  - UserId
//  - TargetUserId
//  - TargetType
type HotLineServiceKickUserArgs struct {
	HotLineId    int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
	UserId       int64 `thrift:"userId,2" db:"userId" json:"userId"`
	TargetUserId int64 `thrift:"targetUserId,3" db:"targetUserId" json:"targetUserId"`
	TargetType   int32 `thrift:"targetType,4" db:"targetType" json:"targetType"`
}

func NewHotLineServiceKickUserArgs() *HotLineServiceKickUserArgs {
	return &HotLineServiceKickUserArgs{}
}

func (p *HotLineServiceKickUserArgs) GetHotLineId() int32 {
	return p.HotLineId
}

func (p *HotLineServiceKickUserArgs) GetUserId() int64 {
	return p.UserId
}

func (p *HotLineServiceKickUserArgs) GetTargetUserId() int64 {
	return p.TargetUserId
}

func (p *HotLineServiceKickUserArgs) GetTargetType() int32 {
	return p.TargetType
}
func (p *HotLineServiceKickUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TargetUserId = v
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetType = v
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceKickUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceKickUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *HotLineServiceKickUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetUserId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserId: ", p), err)
	}
	return err
}

func (p *HotLineServiceKickUserArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TargetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetType: ", p), err)
	}
	return err
}

func (p *HotLineServiceKickUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceKickUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceKickUserResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceKickUserResult() *HotLineServiceKickUserResult {
	return &HotLineServiceKickUserResult{}
}

var HotLineServiceKickUserResult_Success_DEFAULT *common.ComRet

func (p *HotLineServiceKickUserResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return HotLineServiceKickUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceKickUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceKickUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceKickUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceKickUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceKickUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceKickUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceKickUserResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
type HotLineServiceGetHotLineNoticeTextArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
}

func NewHotLineServiceGetHotLineNoticeTextArgs() *HotLineServiceGetHotLineNoticeTextArgs {
	return &HotLineServiceGetHotLineNoticeTextArgs{}
}

func (p *HotLineServiceGetHotLineNoticeTextArgs) GetHotLineId() int32 {
	return p.HotLineId
}
func (p *HotLineServiceGetHotLineNoticeTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetHotLineNoticeText_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceGetHotLineNoticeTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceGetHotLineNoticeTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceGetHotLineNoticeTextResult struct {
	Success *GetHotLineNoticeTextRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceGetHotLineNoticeTextResult() *HotLineServiceGetHotLineNoticeTextResult {
	return &HotLineServiceGetHotLineNoticeTextResult{}
}

var HotLineServiceGetHotLineNoticeTextResult_Success_DEFAULT *GetHotLineNoticeTextRet

func (p *HotLineServiceGetHotLineNoticeTextResult) GetSuccess() *GetHotLineNoticeTextRet {
	if !p.IsSetSuccess() {
		return HotLineServiceGetHotLineNoticeTextResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceGetHotLineNoticeTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceGetHotLineNoticeTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetHotLineNoticeTextRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetHotLineNoticeText_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceGetHotLineNoticeTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceGetHotLineNoticeTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceGetHotLineNoticeTextResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
//  - UserId
type HotLineServiceHostUserLeaveArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
	UserId    int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewHotLineServiceHostUserLeaveArgs() *HotLineServiceHostUserLeaveArgs {
	return &HotLineServiceHostUserLeaveArgs{}
}

func (p *HotLineServiceHostUserLeaveArgs) GetHotLineId() int32 {
	return p.HotLineId
}

func (p *HotLineServiceHostUserLeaveArgs) GetUserId() int64 {
	return p.UserId
}
func (p *HotLineServiceHostUserLeaveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostUserLeave_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceHostUserLeaveArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *HotLineServiceHostUserLeaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceHostUserLeaveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceHostUserLeaveResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceHostUserLeaveResult() *HotLineServiceHostUserLeaveResult {
	return &HotLineServiceHostUserLeaveResult{}
}

var HotLineServiceHostUserLeaveResult_Success_DEFAULT *common.ComRet

func (p *HotLineServiceHostUserLeaveResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return HotLineServiceHostUserLeaveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceHostUserLeaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceHostUserLeaveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostUserLeave_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceHostUserLeaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceHostUserLeaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceHostUserLeaveResult(%+v)", *p)
}

// Attributes:
//  - HotLineId
//  - UserId
type HotLineServiceHostUserOfflineTooLongArgs struct {
	HotLineId int32 `thrift:"hotLineId,1" db:"hotLineId" json:"hotLineId"`
	UserId    int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewHotLineServiceHostUserOfflineTooLongArgs() *HotLineServiceHostUserOfflineTooLongArgs {
	return &HotLineServiceHostUserOfflineTooLongArgs{}
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) GetHotLineId() int32 {
	return p.HotLineId
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) GetUserId() int64 {
	return p.UserId
}
func (p *HotLineServiceHostUserOfflineTooLongArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HotLineId = v
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostUserOfflineTooLong_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hotLineId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hotLineId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HotLineId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hotLineId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hotLineId: ", p), err)
	}
	return err
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *HotLineServiceHostUserOfflineTooLongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceHostUserOfflineTooLongArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceHostUserOfflineTooLongResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceHostUserOfflineTooLongResult() *HotLineServiceHostUserOfflineTooLongResult {
	return &HotLineServiceHostUserOfflineTooLongResult{}
}

var HotLineServiceHostUserOfflineTooLongResult_Success_DEFAULT *common.ComRet

func (p *HotLineServiceHostUserOfflineTooLongResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return HotLineServiceHostUserOfflineTooLongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceHostUserOfflineTooLongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceHostUserOfflineTooLongResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hostUserOfflineTooLong_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceHostUserOfflineTooLongResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceHostUserOfflineTooLongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceHostUserOfflineTooLongResult(%+v)", *p)
}

// Attributes:
//  - LiveId
//  - UserList
//  - AuthType
//  - Disable
type HotLineServiceUpdateLiveAuthorityArgs struct {
	LiveId   int32           `thrift:"liveId,1" db:"liveId" json:"liveId"`
	UserList []int64         `thrift:"userList,2" db:"userList" json:"userList"`
	AuthType []TokenAuthType `thrift:"authType,3" db:"authType" json:"authType"`
	Disable  bool            `thrift:"disable,4" db:"disable" json:"disable"`
}

func NewHotLineServiceUpdateLiveAuthorityArgs() *HotLineServiceUpdateLiveAuthorityArgs {
	return &HotLineServiceUpdateLiveAuthorityArgs{}
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) GetLiveId() int32 {
	return p.LiveId
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) GetUserList() []int64 {
	return p.UserList
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) GetAuthType() []TokenAuthType {
	return p.AuthType
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) GetDisable() bool {
	return p.Disable
}
func (p *HotLineServiceUpdateLiveAuthorityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LiveId = v
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		var _elem17 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.UserList = append(p.UserList, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TokenAuthType, 0, size)
	p.AuthType = tSlice
	for i := 0; i < size; i++ {
		var _elem18 TokenAuthType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TokenAuthType(v)
			_elem18 = temp
		}
		p.AuthType = append(p.AuthType, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Disable = v
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLiveAuthority_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("liveId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:liveId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LiveId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.liveId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:liveId: ", p), err)
	}
	return err
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UserList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UserList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userList: ", p), err)
	}
	return err
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authType", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authType: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.AuthType)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AuthType {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authType: ", p), err)
	}
	return err
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("disable", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:disable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Disable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.disable (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:disable: ", p), err)
	}
	return err
}

func (p *HotLineServiceUpdateLiveAuthorityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceUpdateLiveAuthorityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HotLineServiceUpdateLiveAuthorityResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHotLineServiceUpdateLiveAuthorityResult() *HotLineServiceUpdateLiveAuthorityResult {
	return &HotLineServiceUpdateLiveAuthorityResult{}
}

var HotLineServiceUpdateLiveAuthorityResult_Success_DEFAULT *common.ComRet

func (p *HotLineServiceUpdateLiveAuthorityResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return HotLineServiceUpdateLiveAuthorityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HotLineServiceUpdateLiveAuthorityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HotLineServiceUpdateLiveAuthorityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLiveAuthority_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HotLineServiceUpdateLiveAuthorityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HotLineServiceUpdateLiveAuthorityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HotLineServiceUpdateLiveAuthorityResult(%+v)", *p)
}

type DataService interface {
	common.BaseService

	// Parameters:
	//  - Tasks
	Start(ctx context.Context, tasks []*TaskReq) (r int32, err error)
	// Parameters:
	//  - Tasks
	Cancel(ctx context.Context, tasks []*TaskReq) (r int32, err error)
}

type DataServiceClient struct {
	c thrift.TClient
	*common.BaseServiceClient
}

// Deprecated: Use NewDataService instead
func NewDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DataServiceClient {
	return &DataServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}
}

// Deprecated: Use NewDataService instead
func NewDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DataServiceClient {
	return &DataServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewDataServiceClient(c thrift.TClient) *DataServiceClient {
	return &DataServiceClient{
		c:                 c,
		BaseServiceClient: common.NewBaseServiceClient(c),
	}
}

// Parameters:
//  - Tasks
func (p *DataServiceClient) Start(ctx context.Context, tasks []*TaskReq) (r int32, err error) {
	var _args52 DataServiceStartArgs
	_args52.Tasks = tasks
	var _result53 DataServiceStartResult
	if err = p.c.Call(ctx, "start", &_args52, &_result53); err != nil {
		return
	}
	return _result53.GetSuccess(), nil
}

// Parameters:
//  - Tasks
func (p *DataServiceClient) Cancel(ctx context.Context, tasks []*TaskReq) (r int32, err error) {
	var _args54 DataServiceCancelArgs
	_args54.Tasks = tasks
	var _result55 DataServiceCancelResult
	if err = p.c.Call(ctx, "cancel", &_args54, &_result55); err != nil {
		return
	}
	return _result55.GetSuccess(), nil
}

type DataServiceProcessor struct {
	*common.BaseServiceProcessor
}

func NewDataServiceProcessor(handler DataService) *DataServiceProcessor {
	self56 := &DataServiceProcessor{common.NewBaseServiceProcessor(handler)}
	self56.AddToProcessorMap("start", &dataServiceProcessorStart{handler: handler})
	self56.AddToProcessorMap("cancel", &dataServiceProcessorCancel{handler: handler})
	return self56
}

type dataServiceProcessorStart struct {
	handler DataService
}

func (p *dataServiceProcessorStart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DataServiceStartArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("start", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DataServiceStartResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.Start(ctx, args.Tasks); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start: "+err2.Error())
		oprot.WriteMessageBegin("start", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("start", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dataServiceProcessorCancel struct {
	handler DataService
}

func (p *dataServiceProcessorCancel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DataServiceCancelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DataServiceCancelResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.Cancel(ctx, args.Tasks); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel: "+err2.Error())
		oprot.WriteMessageBegin("cancel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("cancel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Tasks
type DataServiceStartArgs struct {
	Tasks []*TaskReq `thrift:"tasks,1" db:"tasks" json:"tasks"`
}

func NewDataServiceStartArgs() *DataServiceStartArgs {
	return &DataServiceStartArgs{}
}

func (p *DataServiceStartArgs) GetTasks() []*TaskReq {
	return p.Tasks
}
func (p *DataServiceStartArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataServiceStartArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TaskReq, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem57 := &TaskReq{}
		if err := _elem57.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem57), err)
		}
		p.Tasks = append(p.Tasks, _elem57)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DataServiceStartArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataServiceStartArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tasks: ", p), err)
	}
	return err
}

func (p *DataServiceStartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataServiceStartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DataServiceStartResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDataServiceStartResult() *DataServiceStartResult {
	return &DataServiceStartResult{}
}

var DataServiceStartResult_Success_DEFAULT int32

func (p *DataServiceStartResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return DataServiceStartResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *DataServiceStartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DataServiceStartResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataServiceStartResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DataServiceStartResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("start_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataServiceStartResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DataServiceStartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataServiceStartResult(%+v)", *p)
}

// Attributes:
//  - Tasks
type DataServiceCancelArgs struct {
	Tasks []*TaskReq `thrift:"tasks,1" db:"tasks" json:"tasks"`
}

func NewDataServiceCancelArgs() *DataServiceCancelArgs {
	return &DataServiceCancelArgs{}
}

func (p *DataServiceCancelArgs) GetTasks() []*TaskReq {
	return p.Tasks
}
func (p *DataServiceCancelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataServiceCancelArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TaskReq, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem58 := &TaskReq{}
		if err := _elem58.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
		}
		p.Tasks = append(p.Tasks, _elem58)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DataServiceCancelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataServiceCancelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tasks: ", p), err)
	}
	return err
}

func (p *DataServiceCancelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataServiceCancelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DataServiceCancelResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDataServiceCancelResult() *DataServiceCancelResult {
	return &DataServiceCancelResult{}
}

var DataServiceCancelResult_Success_DEFAULT int32

func (p *DataServiceCancelResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return DataServiceCancelResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *DataServiceCancelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DataServiceCancelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataServiceCancelResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DataServiceCancelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataServiceCancelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DataServiceCancelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataServiceCancelResult(%+v)", *p)
}
