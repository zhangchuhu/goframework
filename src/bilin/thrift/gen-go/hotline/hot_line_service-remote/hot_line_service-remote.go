// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"bilin/thrift/gen-go/common"
	"bilin/thrift/gen-go/hotline"
	"context"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = common.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  ComRet freshData(i32 hotLineId, i64 cvu, i64 tvc, i64 ps, i64 tcvu, i64 ttvc, i64 tps)")
	fmt.Fprintln(os.Stderr, "  JoinHotLineRet joinHotLine(i32 hotLineId, i64 userId)")
	fmt.Fprintln(os.Stderr, "  GetInitHotLineInfoRet getInitHotLineInfo(i32 hotLineId)")
	fmt.Fprintln(os.Stderr, "  ComRet kickUser(i32 hotLineId, i64 userId, i64 targetUserId, i32 targetType)")
	fmt.Fprintln(os.Stderr, "  GetHotLineNoticeTextRet GetHotLineNoticeText(i32 hotLineId)")
	fmt.Fprintln(os.Stderr, "  ComRet hostUserLeave(i32 hotLineId, i64 userId)")
	fmt.Fprintln(os.Stderr, "  ComRet hostUserOfflineTooLong(i32 hotLineId, i64 userId)")
	fmt.Fprintln(os.Stderr, "  ComRet updateLiveAuthority(i32 liveId,  userList,  authType, bool disable)")
	fmt.Fprintln(os.Stderr, "  i32 ping()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hotline.NewHotLineServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "freshData":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "FreshData requires 7 args")
			flag.Usage()
		}
		tmp0, err19 := (strconv.Atoi(flag.Arg(1)))
		if err19 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err20 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err20 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err21 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err21 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3, err22 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err22 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err23 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err23 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5, err24 := (strconv.ParseInt(flag.Arg(6), 10, 64))
		if err24 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		argvalue6, err25 := (strconv.ParseInt(flag.Arg(7), 10, 64))
		if err25 != nil {
			Usage()
			return
		}
		value6 := argvalue6
		fmt.Print(client.FreshData(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "joinHotLine":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "JoinHotLine requires 2 args")
			flag.Usage()
		}
		tmp0, err26 := (strconv.Atoi(flag.Arg(1)))
		if err26 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err27 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err27 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.JoinHotLine(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getInitHotLineInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetInitHotLineInfo requires 1 args")
			flag.Usage()
		}
		tmp0, err28 := (strconv.Atoi(flag.Arg(1)))
		if err28 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetInitHotLineInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "kickUser":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "KickUser requires 4 args")
			flag.Usage()
		}
		tmp0, err29 := (strconv.Atoi(flag.Arg(1)))
		if err29 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err30 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err30 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err31 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err31 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err32 := (strconv.Atoi(flag.Arg(4)))
		if err32 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.KickUser(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "GetHotLineNoticeText":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetHotLineNoticeText requires 1 args")
			flag.Usage()
		}
		tmp0, err33 := (strconv.Atoi(flag.Arg(1)))
		if err33 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetHotLineNoticeText(context.Background(), value0))
		fmt.Print("\n")
		break
	case "hostUserLeave":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "HostUserLeave requires 2 args")
			flag.Usage()
		}
		tmp0, err34 := (strconv.Atoi(flag.Arg(1)))
		if err34 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err35 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err35 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.HostUserLeave(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "hostUserOfflineTooLong":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "HostUserOfflineTooLong requires 2 args")
			flag.Usage()
		}
		tmp0, err36 := (strconv.Atoi(flag.Arg(1)))
		if err36 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err37 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err37 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.HostUserOfflineTooLong(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "updateLiveAuthority":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateLiveAuthority requires 4 args")
			flag.Usage()
		}
		tmp0, err38 := (strconv.Atoi(flag.Arg(1)))
		if err38 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg39 := flag.Arg(2)
		mbTrans40 := thrift.NewTMemoryBufferLen(len(arg39))
		defer mbTrans40.Close()
		_, err41 := mbTrans40.WriteString(arg39)
		if err41 != nil {
			Usage()
			return
		}
		factory42 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt43 := factory42.GetProtocol(mbTrans40)
		containerStruct1 := hotline.NewHotLineServiceUpdateLiveAuthorityArgs()
		err44 := containerStruct1.ReadField2(jsProt43)
		if err44 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.UserList
		value1 := argvalue1
		arg45 := flag.Arg(3)
		mbTrans46 := thrift.NewTMemoryBufferLen(len(arg45))
		defer mbTrans46.Close()
		_, err47 := mbTrans46.WriteString(arg45)
		if err47 != nil {
			Usage()
			return
		}
		factory48 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt49 := factory48.GetProtocol(mbTrans46)
		containerStruct2 := hotline.NewHotLineServiceUpdateLiveAuthorityArgs()
		err50 := containerStruct2.ReadField3(jsProt49)
		if err50 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.AuthType
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.UpdateLiveAuthority(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
