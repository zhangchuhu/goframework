// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package turnover

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TUserType int64
const (
  TUserType_Anchor TUserType = 1
  TUserType_OW TUserType = 2
  TUserType_Visitor TUserType = 3
  TUserType_Guest TUserType = 4
  TUserType_Sender TUserType = 5
  TUserType_AnchorAndOw TUserType = 6
)

func (p TUserType) String() string {
  switch p {
  case TUserType_Anchor: return "Anchor"
  case TUserType_OW: return "OW"
  case TUserType_Visitor: return "Visitor"
  case TUserType_Guest: return "Guest"
  case TUserType_Sender: return "Sender"
  case TUserType_AnchorAndOw: return "AnchorAndOw"
  }
  return "<UNSET>"
}

func TUserTypeFromString(s string) (TUserType, error) {
  switch s {
  case "Anchor": return TUserType_Anchor, nil 
  case "OW": return TUserType_OW, nil 
  case "Visitor": return TUserType_Visitor, nil 
  case "Guest": return TUserType_Guest, nil 
  case "Sender": return TUserType_Sender, nil 
  case "AnchorAndOw": return TUserType_AnchorAndOw, nil 
  }
  return TUserType(0), fmt.Errorf("not a valid TUserType string")
}


func TUserTypePtr(v TUserType) *TUserType { return &v }

func (p TUserType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TUserType) UnmarshalText(text []byte) error {
q, err := TUserTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TUserType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TUserType(v)
return nil
}

func (p * TUserType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UsedChannelType int64
const (
  UsedChannelType_Client UsedChannelType = 0
  UsedChannelType_Web UsedChannelType = 10000
  UsedChannelType_IOS UsedChannelType = 10001
  UsedChannelType_Android UsedChannelType = 10002
  UsedChannelType_IOS_Cracked UsedChannelType = 10003
  UsedChannelType_WechatOfficialAccount UsedChannelType = 10004
  UsedChannelType_TurnoverWeb UsedChannelType = 1
  UsedChannelType_DatingCom UsedChannelType = 2
  UsedChannelType_YLPhone UsedChannelType = 3
  UsedChannelType_YLServer UsedChannelType = 4
  UsedChannelType_BaiduTieba UsedChannelType = 5
  UsedChannelType_FinanceApp UsedChannelType = 6
  UsedChannelType_DatingAppIOS UsedChannelType = 7
  UsedChannelType_DatingAppAndroid UsedChannelType = 8
  UsedChannelType_YyLoveAppIOS UsedChannelType = 9
  UsedChannelType_YyLoveAppAndroid UsedChannelType = 10
  UsedChannelType_YyShiTingAppAndroid UsedChannelType = 11
  UsedChannelType_YyShiTingAppIOS UsedChannelType = 12
  UsedChannelType_FinanceSC UsedChannelType = 13
  UsedChannelType_DatingAppIOSCracked UsedChannelType = 14
  UsedChannelType_YyLoveAppIOSCracked UsedChannelType = 15
  UsedChannelType_MEXiaomi UsedChannelType = 16
  UsedChannelType_MEGameStore UsedChannelType = 17
  UsedChannelType_MEBaiduBrowser UsedChannelType = 18
  UsedChannelType_MEBilin UsedChannelType = 19
  UsedChannelType_DatingBlindIOS UsedChannelType = 20
  UsedChannelType_DatingBlindAndroid UsedChannelType = 21
  UsedChannelType_VipPeiLiaoAndroid UsedChannelType = 22
  UsedChannelType_VipPeiLiaoIOS UsedChannelType = 23
  UsedChannelType_MEMidas UsedChannelType = 24
  UsedChannelType_MEBaiduPic UsedChannelType = 25
  UsedChannelType_MEJD UsedChannelType = 26
  UsedChannelType_MEEmulatorApp UsedChannelType = 27
  UsedChannelType_MEKuaikan UsedChannelType = 28
  UsedChannelType_YYLiveIOS UsedChannelType = 29
  UsedChannelType_YYLiveAndroid UsedChannelType = 30
  UsedChannelType_FinancePinAnAndroid UsedChannelType = 31
  UsedChannelType_FinancePinAnIOS UsedChannelType = 32
  UsedChannelType_YouXiDaTing UsedChannelType = 33
  UsedChannelType_WolfKillDatingIOS UsedChannelType = 34
  UsedChannelType_WolfKillBindingIOS UsedChannelType = 35
  UsedChannelType_WolfKillDatingAndroid UsedChannelType = 36
  UsedChannelType_WolfKillBindingAndroid UsedChannelType = 37
  UsedChannelType_VipNianNianIOS UsedChannelType = 38
  UsedChannelType_VipNianNianAndroid UsedChannelType = 39
  UsedChannelType_WolfKillPKIOS UsedChannelType = 40
  UsedChannelType_WolfKillPKAndroid UsedChannelType = 41
  UsedChannelType_WolfKillImIOS UsedChannelType = 42
  UsedChannelType_WolfKillImAndroid UsedChannelType = 43
  UsedChannelType_WolfKillPKGameIOS UsedChannelType = 44
  UsedChannelType_WolfKillPKGameAndroid UsedChannelType = 45
  UsedChannelType_WolfkillXiaochengxu UsedChannelType = 46
  UsedChannelType_WolfkillExternal UsedChannelType = 47
  UsedChannelType_XunhuanPkIOS UsedChannelType = 48
  UsedChannelType_XunhuanPkAndroid UsedChannelType = 49
)

func (p UsedChannelType) String() string {
  switch p {
  case UsedChannelType_Client: return "Client"
  case UsedChannelType_Web: return "Web"
  case UsedChannelType_IOS: return "IOS"
  case UsedChannelType_Android: return "Android"
  case UsedChannelType_IOS_Cracked: return "IOS_Cracked"
  case UsedChannelType_WechatOfficialAccount: return "WechatOfficialAccount"
  case UsedChannelType_TurnoverWeb: return "TurnoverWeb"
  case UsedChannelType_DatingCom: return "DatingCom"
  case UsedChannelType_YLPhone: return "YLPhone"
  case UsedChannelType_YLServer: return "YLServer"
  case UsedChannelType_BaiduTieba: return "BaiduTieba"
  case UsedChannelType_FinanceApp: return "FinanceApp"
  case UsedChannelType_DatingAppIOS: return "DatingAppIOS"
  case UsedChannelType_DatingAppAndroid: return "DatingAppAndroid"
  case UsedChannelType_YyLoveAppIOS: return "YyLoveAppIOS"
  case UsedChannelType_YyLoveAppAndroid: return "YyLoveAppAndroid"
  case UsedChannelType_YyShiTingAppAndroid: return "YyShiTingAppAndroid"
  case UsedChannelType_YyShiTingAppIOS: return "YyShiTingAppIOS"
  case UsedChannelType_FinanceSC: return "FinanceSC"
  case UsedChannelType_DatingAppIOSCracked: return "DatingAppIOSCracked"
  case UsedChannelType_YyLoveAppIOSCracked: return "YyLoveAppIOSCracked"
  case UsedChannelType_MEXiaomi: return "MEXiaomi"
  case UsedChannelType_MEGameStore: return "MEGameStore"
  case UsedChannelType_MEBaiduBrowser: return "MEBaiduBrowser"
  case UsedChannelType_MEBilin: return "MEBilin"
  case UsedChannelType_DatingBlindIOS: return "DatingBlindIOS"
  case UsedChannelType_DatingBlindAndroid: return "DatingBlindAndroid"
  case UsedChannelType_VipPeiLiaoAndroid: return "VipPeiLiaoAndroid"
  case UsedChannelType_VipPeiLiaoIOS: return "VipPeiLiaoIOS"
  case UsedChannelType_MEMidas: return "MEMidas"
  case UsedChannelType_MEBaiduPic: return "MEBaiduPic"
  case UsedChannelType_MEJD: return "MEJD"
  case UsedChannelType_MEEmulatorApp: return "MEEmulatorApp"
  case UsedChannelType_MEKuaikan: return "MEKuaikan"
  case UsedChannelType_YYLiveIOS: return "YYLiveIOS"
  case UsedChannelType_YYLiveAndroid: return "YYLiveAndroid"
  case UsedChannelType_FinancePinAnAndroid: return "FinancePinAnAndroid"
  case UsedChannelType_FinancePinAnIOS: return "FinancePinAnIOS"
  case UsedChannelType_YouXiDaTing: return "YouXiDaTing"
  case UsedChannelType_WolfKillDatingIOS: return "WolfKillDatingIOS"
  case UsedChannelType_WolfKillBindingIOS: return "WolfKillBindingIOS"
  case UsedChannelType_WolfKillDatingAndroid: return "WolfKillDatingAndroid"
  case UsedChannelType_WolfKillBindingAndroid: return "WolfKillBindingAndroid"
  case UsedChannelType_VipNianNianIOS: return "VipNianNianIOS"
  case UsedChannelType_VipNianNianAndroid: return "VipNianNianAndroid"
  case UsedChannelType_WolfKillPKIOS: return "WolfKillPKIOS"
  case UsedChannelType_WolfKillPKAndroid: return "WolfKillPKAndroid"
  case UsedChannelType_WolfKillImIOS: return "WolfKillImIOS"
  case UsedChannelType_WolfKillImAndroid: return "WolfKillImAndroid"
  case UsedChannelType_WolfKillPKGameIOS: return "WolfKillPKGameIOS"
  case UsedChannelType_WolfKillPKGameAndroid: return "WolfKillPKGameAndroid"
  case UsedChannelType_WolfkillXiaochengxu: return "WolfkillXiaochengxu"
  case UsedChannelType_WolfkillExternal: return "WolfkillExternal"
  case UsedChannelType_XunhuanPkIOS: return "XunhuanPkIOS"
  case UsedChannelType_XunhuanPkAndroid: return "XunhuanPkAndroid"
  }
  return "<UNSET>"
}

func UsedChannelTypeFromString(s string) (UsedChannelType, error) {
  switch s {
  case "Client": return UsedChannelType_Client, nil 
  case "Web": return UsedChannelType_Web, nil 
  case "IOS": return UsedChannelType_IOS, nil 
  case "Android": return UsedChannelType_Android, nil 
  case "IOS_Cracked": return UsedChannelType_IOS_Cracked, nil 
  case "WechatOfficialAccount": return UsedChannelType_WechatOfficialAccount, nil 
  case "TurnoverWeb": return UsedChannelType_TurnoverWeb, nil 
  case "DatingCom": return UsedChannelType_DatingCom, nil 
  case "YLPhone": return UsedChannelType_YLPhone, nil 
  case "YLServer": return UsedChannelType_YLServer, nil 
  case "BaiduTieba": return UsedChannelType_BaiduTieba, nil 
  case "FinanceApp": return UsedChannelType_FinanceApp, nil 
  case "DatingAppIOS": return UsedChannelType_DatingAppIOS, nil 
  case "DatingAppAndroid": return UsedChannelType_DatingAppAndroid, nil 
  case "YyLoveAppIOS": return UsedChannelType_YyLoveAppIOS, nil 
  case "YyLoveAppAndroid": return UsedChannelType_YyLoveAppAndroid, nil 
  case "YyShiTingAppAndroid": return UsedChannelType_YyShiTingAppAndroid, nil 
  case "YyShiTingAppIOS": return UsedChannelType_YyShiTingAppIOS, nil 
  case "FinanceSC": return UsedChannelType_FinanceSC, nil 
  case "DatingAppIOSCracked": return UsedChannelType_DatingAppIOSCracked, nil 
  case "YyLoveAppIOSCracked": return UsedChannelType_YyLoveAppIOSCracked, nil 
  case "MEXiaomi": return UsedChannelType_MEXiaomi, nil 
  case "MEGameStore": return UsedChannelType_MEGameStore, nil 
  case "MEBaiduBrowser": return UsedChannelType_MEBaiduBrowser, nil 
  case "MEBilin": return UsedChannelType_MEBilin, nil 
  case "DatingBlindIOS": return UsedChannelType_DatingBlindIOS, nil 
  case "DatingBlindAndroid": return UsedChannelType_DatingBlindAndroid, nil 
  case "VipPeiLiaoAndroid": return UsedChannelType_VipPeiLiaoAndroid, nil 
  case "VipPeiLiaoIOS": return UsedChannelType_VipPeiLiaoIOS, nil 
  case "MEMidas": return UsedChannelType_MEMidas, nil 
  case "MEBaiduPic": return UsedChannelType_MEBaiduPic, nil 
  case "MEJD": return UsedChannelType_MEJD, nil 
  case "MEEmulatorApp": return UsedChannelType_MEEmulatorApp, nil 
  case "MEKuaikan": return UsedChannelType_MEKuaikan, nil 
  case "YYLiveIOS": return UsedChannelType_YYLiveIOS, nil 
  case "YYLiveAndroid": return UsedChannelType_YYLiveAndroid, nil 
  case "FinancePinAnAndroid": return UsedChannelType_FinancePinAnAndroid, nil 
  case "FinancePinAnIOS": return UsedChannelType_FinancePinAnIOS, nil 
  case "YouXiDaTing": return UsedChannelType_YouXiDaTing, nil 
  case "WolfKillDatingIOS": return UsedChannelType_WolfKillDatingIOS, nil 
  case "WolfKillBindingIOS": return UsedChannelType_WolfKillBindingIOS, nil 
  case "WolfKillDatingAndroid": return UsedChannelType_WolfKillDatingAndroid, nil 
  case "WolfKillBindingAndroid": return UsedChannelType_WolfKillBindingAndroid, nil 
  case "VipNianNianIOS": return UsedChannelType_VipNianNianIOS, nil 
  case "VipNianNianAndroid": return UsedChannelType_VipNianNianAndroid, nil 
  case "WolfKillPKIOS": return UsedChannelType_WolfKillPKIOS, nil 
  case "WolfKillPKAndroid": return UsedChannelType_WolfKillPKAndroid, nil 
  case "WolfKillImIOS": return UsedChannelType_WolfKillImIOS, nil 
  case "WolfKillImAndroid": return UsedChannelType_WolfKillImAndroid, nil 
  case "WolfKillPKGameIOS": return UsedChannelType_WolfKillPKGameIOS, nil 
  case "WolfKillPKGameAndroid": return UsedChannelType_WolfKillPKGameAndroid, nil 
  case "WolfkillXiaochengxu": return UsedChannelType_WolfkillXiaochengxu, nil 
  case "WolfkillExternal": return UsedChannelType_WolfkillExternal, nil 
  case "XunhuanPkIOS": return UsedChannelType_XunhuanPkIOS, nil 
  case "XunhuanPkAndroid": return UsedChannelType_XunhuanPkAndroid, nil 
  }
  return UsedChannelType(0), fmt.Errorf("not a valid UsedChannelType string")
}


func UsedChannelTypePtr(v UsedChannelType) *UsedChannelType { return &v }

func (p UsedChannelType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UsedChannelType) UnmarshalText(text []byte) error {
q, err := UsedChannelTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UsedChannelType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UsedChannelType(v)
return nil
}

func (p * UsedChannelType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TAccountOperateType int64
const (
  TAccountOperateType_Withdraw TAccountOperateType = 1
  TAccountOperateType_Exchange TAccountOperateType = 2
  TAccountOperateType_ConsumeProps TAccountOperateType = 3
  TAccountOperateType_PropsRevenue TAccountOperateType = 4
  TAccountOperateType_BuyVirtOverage TAccountOperateType = 5
  TAccountOperateType_BuyVirtOverageFail TAccountOperateType = 6
  TAccountOperateType_ActivityAutoInc TAccountOperateType = 7
  TAccountOperateType_AutoMonthSettle TAccountOperateType = 8
  TAccountOperateType_AccountFreeze TAccountOperateType = 9
  TAccountOperateType_AccountUnfreeze TAccountOperateType = 10
  TAccountOperateType_ChannelRealToPersonVirt TAccountOperateType = 11
  TAccountOperateType_IssueSycee TAccountOperateType = 12
  TAccountOperateType_Transfer TAccountOperateType = 13
  TAccountOperateType_SystemOper TAccountOperateType = 14
  TAccountOperateType_SystemCompensate TAccountOperateType = 15
  TAccountOperateType_ExternalModification TAccountOperateType = 16
  TAccountOperateType_GiftBagLottery TAccountOperateType = 17
  TAccountOperateType_ChargeCurrency TAccountOperateType = 18
  TAccountOperateType_ChargeCurrencyPresent TAccountOperateType = 19
  TAccountOperateType_ChargeCurrencyDiscount TAccountOperateType = 20
  TAccountOperateType_DatingBackupGroup TAccountOperateType = 21
  TAccountOperateType_DatingBackupGroupBackFee TAccountOperateType = 22
  TAccountOperateType_DatingBackupGroupFinish TAccountOperateType = 23
  TAccountOperateType_BuySkin TAccountOperateType = 24
  TAccountOperateType_BuySeal TAccountOperateType = 25
  TAccountOperateType_BuySealBackFee TAccountOperateType = 26
  TAccountOperateType_RedPacketIssue TAccountOperateType = 27
  TAccountOperateType_RedPacketCharge TAccountOperateType = 28
  TAccountOperateType_RedPacketGrab TAccountOperateType = 29
  TAccountOperateType_RedPacketClose TAccountOperateType = 30
  TAccountOperateType_NobleOpen TAccountOperateType = 31
  TAccountOperateType_NobleRenew TAccountOperateType = 32
  TAccountOperateType_NobleUpgrade TAccountOperateType = 33
  TAccountOperateType_UPGRADE_PROPS TAccountOperateType = 34
  TAccountOperateType_REVERT_PAY TAccountOperateType = 35
  TAccountOperateType_WithdrawBack TAccountOperateType = 36
  TAccountOperateType_NobleRenewExchangeVirt TAccountOperateType = 37
  TAccountOperateType_OfficialIssue TAccountOperateType = 38
  TAccountOperateType_PayVipRoom TAccountOperateType = 39
  TAccountOperateType_ConsumePropsForOther TAccountOperateType = 40
  TAccountOperateType_VirtLottery TAccountOperateType = 41
  TAccountOperateType_BuySpoofHanging TAccountOperateType = 42
  TAccountOperateType_LuckyTreasures TAccountOperateType = 43
  TAccountOperateType_ProductConsume TAccountOperateType = 44
  TAccountOperateType_ProductConsumeRevert TAccountOperateType = 45
  TAccountOperateType_BuyLotteryChance TAccountOperateType = 46
  TAccountOperateType_HatKing TAccountOperateType = 47
  TAccountOperateType_GuardOpen TAccountOperateType = 48
  TAccountOperateType_GuardRenew TAccountOperateType = 49
  TAccountOperateType_ModifyGuardIntimateAccount TAccountOperateType = 50
  TAccountOperateType_ModifyHatKingPond TAccountOperateType = 51
  TAccountOperateType_HatKingReward TAccountOperateType = 52
  TAccountOperateType_PropsExchange TAccountOperateType = 53
  TAccountOperateType_ComboBonus TAccountOperateType = 54
  TAccountOperateType_ExtraAccountEntry TAccountOperateType = 55
  TAccountOperateType_RedPacketExpireBack TAccountOperateType = 56
  TAccountOperateType_NobleDowngrade TAccountOperateType = 57
  TAccountOperateType_ActRevenueSubsidy TAccountOperateType = 58
)

func (p TAccountOperateType) String() string {
  switch p {
  case TAccountOperateType_Withdraw: return "Withdraw"
  case TAccountOperateType_Exchange: return "Exchange"
  case TAccountOperateType_ConsumeProps: return "ConsumeProps"
  case TAccountOperateType_PropsRevenue: return "PropsRevenue"
  case TAccountOperateType_BuyVirtOverage: return "BuyVirtOverage"
  case TAccountOperateType_BuyVirtOverageFail: return "BuyVirtOverageFail"
  case TAccountOperateType_ActivityAutoInc: return "ActivityAutoInc"
  case TAccountOperateType_AutoMonthSettle: return "AutoMonthSettle"
  case TAccountOperateType_AccountFreeze: return "AccountFreeze"
  case TAccountOperateType_AccountUnfreeze: return "AccountUnfreeze"
  case TAccountOperateType_ChannelRealToPersonVirt: return "ChannelRealToPersonVirt"
  case TAccountOperateType_IssueSycee: return "IssueSycee"
  case TAccountOperateType_Transfer: return "Transfer"
  case TAccountOperateType_SystemOper: return "SystemOper"
  case TAccountOperateType_SystemCompensate: return "SystemCompensate"
  case TAccountOperateType_ExternalModification: return "ExternalModification"
  case TAccountOperateType_GiftBagLottery: return "GiftBagLottery"
  case TAccountOperateType_ChargeCurrency: return "ChargeCurrency"
  case TAccountOperateType_ChargeCurrencyPresent: return "ChargeCurrencyPresent"
  case TAccountOperateType_ChargeCurrencyDiscount: return "ChargeCurrencyDiscount"
  case TAccountOperateType_DatingBackupGroup: return "DatingBackupGroup"
  case TAccountOperateType_DatingBackupGroupBackFee: return "DatingBackupGroupBackFee"
  case TAccountOperateType_DatingBackupGroupFinish: return "DatingBackupGroupFinish"
  case TAccountOperateType_BuySkin: return "BuySkin"
  case TAccountOperateType_BuySeal: return "BuySeal"
  case TAccountOperateType_BuySealBackFee: return "BuySealBackFee"
  case TAccountOperateType_RedPacketIssue: return "RedPacketIssue"
  case TAccountOperateType_RedPacketCharge: return "RedPacketCharge"
  case TAccountOperateType_RedPacketGrab: return "RedPacketGrab"
  case TAccountOperateType_RedPacketClose: return "RedPacketClose"
  case TAccountOperateType_NobleOpen: return "NobleOpen"
  case TAccountOperateType_NobleRenew: return "NobleRenew"
  case TAccountOperateType_NobleUpgrade: return "NobleUpgrade"
  case TAccountOperateType_UPGRADE_PROPS: return "UPGRADE_PROPS"
  case TAccountOperateType_REVERT_PAY: return "REVERT_PAY"
  case TAccountOperateType_WithdrawBack: return "WithdrawBack"
  case TAccountOperateType_NobleRenewExchangeVirt: return "NobleRenewExchangeVirt"
  case TAccountOperateType_OfficialIssue: return "OfficialIssue"
  case TAccountOperateType_PayVipRoom: return "PayVipRoom"
  case TAccountOperateType_ConsumePropsForOther: return "ConsumePropsForOther"
  case TAccountOperateType_VirtLottery: return "VirtLottery"
  case TAccountOperateType_BuySpoofHanging: return "BuySpoofHanging"
  case TAccountOperateType_LuckyTreasures: return "LuckyTreasures"
  case TAccountOperateType_ProductConsume: return "ProductConsume"
  case TAccountOperateType_ProductConsumeRevert: return "ProductConsumeRevert"
  case TAccountOperateType_BuyLotteryChance: return "BuyLotteryChance"
  case TAccountOperateType_HatKing: return "HatKing"
  case TAccountOperateType_GuardOpen: return "GuardOpen"
  case TAccountOperateType_GuardRenew: return "GuardRenew"
  case TAccountOperateType_ModifyGuardIntimateAccount: return "ModifyGuardIntimateAccount"
  case TAccountOperateType_ModifyHatKingPond: return "ModifyHatKingPond"
  case TAccountOperateType_HatKingReward: return "HatKingReward"
  case TAccountOperateType_PropsExchange: return "PropsExchange"
  case TAccountOperateType_ComboBonus: return "ComboBonus"
  case TAccountOperateType_ExtraAccountEntry: return "ExtraAccountEntry"
  case TAccountOperateType_RedPacketExpireBack: return "RedPacketExpireBack"
  case TAccountOperateType_NobleDowngrade: return "NobleDowngrade"
  case TAccountOperateType_ActRevenueSubsidy: return "ActRevenueSubsidy"
  }
  return "<UNSET>"
}

func TAccountOperateTypeFromString(s string) (TAccountOperateType, error) {
  switch s {
  case "Withdraw": return TAccountOperateType_Withdraw, nil 
  case "Exchange": return TAccountOperateType_Exchange, nil 
  case "ConsumeProps": return TAccountOperateType_ConsumeProps, nil 
  case "PropsRevenue": return TAccountOperateType_PropsRevenue, nil 
  case "BuyVirtOverage": return TAccountOperateType_BuyVirtOverage, nil 
  case "BuyVirtOverageFail": return TAccountOperateType_BuyVirtOverageFail, nil 
  case "ActivityAutoInc": return TAccountOperateType_ActivityAutoInc, nil 
  case "AutoMonthSettle": return TAccountOperateType_AutoMonthSettle, nil 
  case "AccountFreeze": return TAccountOperateType_AccountFreeze, nil 
  case "AccountUnfreeze": return TAccountOperateType_AccountUnfreeze, nil 
  case "ChannelRealToPersonVirt": return TAccountOperateType_ChannelRealToPersonVirt, nil 
  case "IssueSycee": return TAccountOperateType_IssueSycee, nil 
  case "Transfer": return TAccountOperateType_Transfer, nil 
  case "SystemOper": return TAccountOperateType_SystemOper, nil 
  case "SystemCompensate": return TAccountOperateType_SystemCompensate, nil 
  case "ExternalModification": return TAccountOperateType_ExternalModification, nil 
  case "GiftBagLottery": return TAccountOperateType_GiftBagLottery, nil 
  case "ChargeCurrency": return TAccountOperateType_ChargeCurrency, nil 
  case "ChargeCurrencyPresent": return TAccountOperateType_ChargeCurrencyPresent, nil 
  case "ChargeCurrencyDiscount": return TAccountOperateType_ChargeCurrencyDiscount, nil 
  case "DatingBackupGroup": return TAccountOperateType_DatingBackupGroup, nil 
  case "DatingBackupGroupBackFee": return TAccountOperateType_DatingBackupGroupBackFee, nil 
  case "DatingBackupGroupFinish": return TAccountOperateType_DatingBackupGroupFinish, nil 
  case "BuySkin": return TAccountOperateType_BuySkin, nil 
  case "BuySeal": return TAccountOperateType_BuySeal, nil 
  case "BuySealBackFee": return TAccountOperateType_BuySealBackFee, nil 
  case "RedPacketIssue": return TAccountOperateType_RedPacketIssue, nil 
  case "RedPacketCharge": return TAccountOperateType_RedPacketCharge, nil 
  case "RedPacketGrab": return TAccountOperateType_RedPacketGrab, nil 
  case "RedPacketClose": return TAccountOperateType_RedPacketClose, nil 
  case "NobleOpen": return TAccountOperateType_NobleOpen, nil 
  case "NobleRenew": return TAccountOperateType_NobleRenew, nil 
  case "NobleUpgrade": return TAccountOperateType_NobleUpgrade, nil 
  case "UPGRADE_PROPS": return TAccountOperateType_UPGRADE_PROPS, nil 
  case "REVERT_PAY": return TAccountOperateType_REVERT_PAY, nil 
  case "WithdrawBack": return TAccountOperateType_WithdrawBack, nil 
  case "NobleRenewExchangeVirt": return TAccountOperateType_NobleRenewExchangeVirt, nil 
  case "OfficialIssue": return TAccountOperateType_OfficialIssue, nil 
  case "PayVipRoom": return TAccountOperateType_PayVipRoom, nil 
  case "ConsumePropsForOther": return TAccountOperateType_ConsumePropsForOther, nil 
  case "VirtLottery": return TAccountOperateType_VirtLottery, nil 
  case "BuySpoofHanging": return TAccountOperateType_BuySpoofHanging, nil 
  case "LuckyTreasures": return TAccountOperateType_LuckyTreasures, nil 
  case "ProductConsume": return TAccountOperateType_ProductConsume, nil 
  case "ProductConsumeRevert": return TAccountOperateType_ProductConsumeRevert, nil 
  case "BuyLotteryChance": return TAccountOperateType_BuyLotteryChance, nil 
  case "HatKing": return TAccountOperateType_HatKing, nil 
  case "GuardOpen": return TAccountOperateType_GuardOpen, nil 
  case "GuardRenew": return TAccountOperateType_GuardRenew, nil 
  case "ModifyGuardIntimateAccount": return TAccountOperateType_ModifyGuardIntimateAccount, nil 
  case "ModifyHatKingPond": return TAccountOperateType_ModifyHatKingPond, nil 
  case "HatKingReward": return TAccountOperateType_HatKingReward, nil 
  case "PropsExchange": return TAccountOperateType_PropsExchange, nil 
  case "ComboBonus": return TAccountOperateType_ComboBonus, nil 
  case "ExtraAccountEntry": return TAccountOperateType_ExtraAccountEntry, nil 
  case "RedPacketExpireBack": return TAccountOperateType_RedPacketExpireBack, nil 
  case "NobleDowngrade": return TAccountOperateType_NobleDowngrade, nil 
  case "ActRevenueSubsidy": return TAccountOperateType_ActRevenueSubsidy, nil 
  }
  return TAccountOperateType(0), fmt.Errorf("not a valid TAccountOperateType string")
}


func TAccountOperateTypePtr(v TAccountOperateType) *TAccountOperateType { return &v }

func (p TAccountOperateType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TAccountOperateType) UnmarshalText(text []byte) error {
q, err := TAccountOperateTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TAccountOperateType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TAccountOperateType(v)
return nil
}

func (p * TAccountOperateType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TAccountSrcType int64
const (
  TAccountSrcType_None TAccountSrcType = 0
  TAccountSrcType_OpenNoble TAccountSrcType = 1
  TAccountSrcType_BuyNobleCouponGiftbag TAccountSrcType = 2
  TAccountSrcType_RenewNobleByOpenCoupon TAccountSrcType = 3
  TAccountSrcType_RenewNobleByCouponGiftbag TAccountSrcType = 4
  TAccountSrcType_RenewByNobleCoupon3 TAccountSrcType = 5
  TAccountSrcType_RenewByNobleCoupon6 TAccountSrcType = 6
  TAccountSrcType_RenewByNobleCoupon9 TAccountSrcType = 7
  TAccountSrcType_RenewByNobleActivityCoupon TAccountSrcType = 8
  TAccountSrcType_Exchange TAccountSrcType = 9
  TAccountSrcType_PointExchange TAccountSrcType = 10
)

func (p TAccountSrcType) String() string {
  switch p {
  case TAccountSrcType_None: return "None"
  case TAccountSrcType_OpenNoble: return "OpenNoble"
  case TAccountSrcType_BuyNobleCouponGiftbag: return "BuyNobleCouponGiftbag"
  case TAccountSrcType_RenewNobleByOpenCoupon: return "RenewNobleByOpenCoupon"
  case TAccountSrcType_RenewNobleByCouponGiftbag: return "RenewNobleByCouponGiftbag"
  case TAccountSrcType_RenewByNobleCoupon3: return "RenewByNobleCoupon3"
  case TAccountSrcType_RenewByNobleCoupon6: return "RenewByNobleCoupon6"
  case TAccountSrcType_RenewByNobleCoupon9: return "RenewByNobleCoupon9"
  case TAccountSrcType_RenewByNobleActivityCoupon: return "RenewByNobleActivityCoupon"
  case TAccountSrcType_Exchange: return "Exchange"
  case TAccountSrcType_PointExchange: return "PointExchange"
  }
  return "<UNSET>"
}

func TAccountSrcTypeFromString(s string) (TAccountSrcType, error) {
  switch s {
  case "None": return TAccountSrcType_None, nil 
  case "OpenNoble": return TAccountSrcType_OpenNoble, nil 
  case "BuyNobleCouponGiftbag": return TAccountSrcType_BuyNobleCouponGiftbag, nil 
  case "RenewNobleByOpenCoupon": return TAccountSrcType_RenewNobleByOpenCoupon, nil 
  case "RenewNobleByCouponGiftbag": return TAccountSrcType_RenewNobleByCouponGiftbag, nil 
  case "RenewByNobleCoupon3": return TAccountSrcType_RenewByNobleCoupon3, nil 
  case "RenewByNobleCoupon6": return TAccountSrcType_RenewByNobleCoupon6, nil 
  case "RenewByNobleCoupon9": return TAccountSrcType_RenewByNobleCoupon9, nil 
  case "RenewByNobleActivityCoupon": return TAccountSrcType_RenewByNobleActivityCoupon, nil 
  case "Exchange": return TAccountSrcType_Exchange, nil 
  case "PointExchange": return TAccountSrcType_PointExchange, nil 
  }
  return TAccountSrcType(0), fmt.Errorf("not a valid TAccountSrcType string")
}


func TAccountSrcTypePtr(v TAccountSrcType) *TAccountSrcType { return &v }

func (p TAccountSrcType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TAccountSrcType) UnmarshalText(text []byte) error {
q, err := TAccountSrcTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TAccountSrcType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TAccountSrcType(v)
return nil
}

func (p * TAccountSrcType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TAppId int64
const (
  TAppId_Finance TAppId = 1
  TAppId_Dating TAppId = 2
  TAppId_Hundred TAppId = 3
  TAppId_FreeShow TAppId = 4
  TAppId_GameGuild TAppId = 5
  TAppId_Ktv TAppId = 6
  TAppId_Blackjack TAppId = 7
  TAppId_Spy TAppId = 8
  TAppId_SlaveSales TAppId = 9
  TAppId_ScratchOff TAppId = 10
  TAppId_Niuniu TAppId = 11
  TAppId_MedicalTreatment TAppId = 12
  TAppId_Sport TAppId = 13
  TAppId_VipPk TAppId = 14
  TAppId_HelloApp TAppId = 15
  TAppId_FinanceForceRelieveContract TAppId = 16
  TAppId_GameSpot TAppId = 17
  TAppId_Bilin TAppId = 18
  TAppId_XunHuan TAppId = 19
  TAppId_WeiFang TAppId = 20
  TAppId_TinyTime TAppId = 21
  TAppId_YoMall TAppId = 22
  TAppId_GameTemplate TAppId = 23
  TAppId_MEPlus TAppId = 24
  TAppId_WerewolfKill TAppId = 25
  TAppId_TinyVideo TAppId = 26
  TAppId_MGameVoice TAppId = 27
  TAppId_DianHu TAppId = 28
)

func (p TAppId) String() string {
  switch p {
  case TAppId_Finance: return "Finance"
  case TAppId_Dating: return "Dating"
  case TAppId_Hundred: return "Hundred"
  case TAppId_FreeShow: return "FreeShow"
  case TAppId_GameGuild: return "GameGuild"
  case TAppId_Ktv: return "Ktv"
  case TAppId_Blackjack: return "Blackjack"
  case TAppId_Spy: return "Spy"
  case TAppId_SlaveSales: return "SlaveSales"
  case TAppId_ScratchOff: return "ScratchOff"
  case TAppId_Niuniu: return "Niuniu"
  case TAppId_MedicalTreatment: return "MedicalTreatment"
  case TAppId_Sport: return "Sport"
  case TAppId_VipPk: return "VipPk"
  case TAppId_HelloApp: return "HelloApp"
  case TAppId_FinanceForceRelieveContract: return "FinanceForceRelieveContract"
  case TAppId_GameSpot: return "GameSpot"
  case TAppId_Bilin: return "Bilin"
  case TAppId_XunHuan: return "XunHuan"
  case TAppId_WeiFang: return "WeiFang"
  case TAppId_TinyTime: return "TinyTime"
  case TAppId_YoMall: return "YoMall"
  case TAppId_GameTemplate: return "GameTemplate"
  case TAppId_MEPlus: return "MEPlus"
  case TAppId_WerewolfKill: return "WerewolfKill"
  case TAppId_TinyVideo: return "TinyVideo"
  case TAppId_MGameVoice: return "MGameVoice"
  case TAppId_DianHu: return "DianHu"
  }
  return "<UNSET>"
}

func TAppIdFromString(s string) (TAppId, error) {
  switch s {
  case "Finance": return TAppId_Finance, nil 
  case "Dating": return TAppId_Dating, nil 
  case "Hundred": return TAppId_Hundred, nil 
  case "FreeShow": return TAppId_FreeShow, nil 
  case "GameGuild": return TAppId_GameGuild, nil 
  case "Ktv": return TAppId_Ktv, nil 
  case "Blackjack": return TAppId_Blackjack, nil 
  case "Spy": return TAppId_Spy, nil 
  case "SlaveSales": return TAppId_SlaveSales, nil 
  case "ScratchOff": return TAppId_ScratchOff, nil 
  case "Niuniu": return TAppId_Niuniu, nil 
  case "MedicalTreatment": return TAppId_MedicalTreatment, nil 
  case "Sport": return TAppId_Sport, nil 
  case "VipPk": return TAppId_VipPk, nil 
  case "HelloApp": return TAppId_HelloApp, nil 
  case "FinanceForceRelieveContract": return TAppId_FinanceForceRelieveContract, nil 
  case "GameSpot": return TAppId_GameSpot, nil 
  case "Bilin": return TAppId_Bilin, nil 
  case "XunHuan": return TAppId_XunHuan, nil 
  case "WeiFang": return TAppId_WeiFang, nil 
  case "TinyTime": return TAppId_TinyTime, nil 
  case "YoMall": return TAppId_YoMall, nil 
  case "GameTemplate": return TAppId_GameTemplate, nil 
  case "MEPlus": return TAppId_MEPlus, nil 
  case "WerewolfKill": return TAppId_WerewolfKill, nil 
  case "TinyVideo": return TAppId_TinyVideo, nil 
  case "MGameVoice": return TAppId_MGameVoice, nil 
  case "DianHu": return TAppId_DianHu, nil 
  }
  return TAppId(0), fmt.Errorf("not a valid TAppId string")
}


func TAppIdPtr(v TAppId) *TAppId { return &v }

func (p TAppId) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TAppId) UnmarshalText(text []byte) error {
q, err := TAppIdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TAppId) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TAppId(v)
return nil
}

func (p * TAppId) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TCurrencyType int64
const (
  TCurrencyType_Virt TCurrencyType = 1
  TCurrencyType_Real TCurrencyType = 2
  TCurrencyType_Activity TCurrencyType = 3
  TCurrencyType_Yb TCurrencyType = 4
  TCurrencyType_Time TCurrencyType = 5
  TCurrencyType_Commission TCurrencyType = 6
  TCurrencyType_Sycee TCurrencyType = 7
  TCurrencyType_Golden TCurrencyType = 8
  TCurrencyType_Silver TCurrencyType = 9
  TCurrencyType_Copper TCurrencyType = 10
  TCurrencyType_RMB TCurrencyType = 11
  TCurrencyType_SilverShell TCurrencyType = 12
  TCurrencyType_Hello_Golden TCurrencyType = 13
  TCurrencyType_Hello_Diamond TCurrencyType = 14
  TCurrencyType_Hello_AppleDiamond TCurrencyType = 15
  TCurrencyType_Hello_RedDiamond TCurrencyType = 16
  TCurrencyType_SuperPurpleDiamond TCurrencyType = 17
  TCurrencyType_RedPacket TCurrencyType = 18
  TCurrencyType_Xh_Golden TCurrencyType = 19
  TCurrencyType_Xh_Diamond TCurrencyType = 20
  TCurrencyType_Xh_Ruby TCurrencyType = 21
  TCurrencyType_Bilin_Whale TCurrencyType = 22
  TCurrencyType_Bilin_Profit TCurrencyType = 23
  TCurrencyType_TinyTime_MiBi TCurrencyType = 24
  TCurrencyType_TinyTime_MiDou TCurrencyType = 25
  TCurrencyType_TinyTime_Profit TCurrencyType = 26
  TCurrencyType_TinyTime_EDou TCurrencyType = 27
  TCurrencyType_YoMall_Salary TCurrencyType = 28
  TCurrencyType_ME_Midas_Mibi TCurrencyType = 29
  TCurrencyType_GameTemplate_Diamond TCurrencyType = 30
  TCurrencyType_GameTemplate_Ruby TCurrencyType = 31
  TCurrencyType_YYLive_RedDiamond TCurrencyType = 32
  TCurrencyType_HappyCoin TCurrencyType = 33
  TCurrencyType_HappyDiamond TCurrencyType = 34
  TCurrencyType_MGameDiamond TCurrencyType = 35
  TCurrencyType_MGameBlackCoin TCurrencyType = 36
  TCurrencyType_AlipayRedPacket TCurrencyType = 37
  TCurrencyType_AlipayRedPacketFreeze TCurrencyType = 38
  TCurrencyType_HappyDrill TCurrencyType = 39
  TCurrencyType_Bilin_Whale_NEW TCurrencyType = 40
  TCurrencyType_Xh_Diamond_NEW TCurrencyType = 41
  TCurrencyType_TB_tdou TCurrencyType = 100
)

func (p TCurrencyType) String() string {
  switch p {
  case TCurrencyType_Virt: return "Virt"
  case TCurrencyType_Real: return "Real"
  case TCurrencyType_Activity: return "Activity"
  case TCurrencyType_Yb: return "Yb"
  case TCurrencyType_Time: return "Time"
  case TCurrencyType_Commission: return "Commission"
  case TCurrencyType_Sycee: return "Sycee"
  case TCurrencyType_Golden: return "Golden"
  case TCurrencyType_Silver: return "Silver"
  case TCurrencyType_Copper: return "Copper"
  case TCurrencyType_RMB: return "RMB"
  case TCurrencyType_SilverShell: return "SilverShell"
  case TCurrencyType_Hello_Golden: return "Hello_Golden"
  case TCurrencyType_Hello_Diamond: return "Hello_Diamond"
  case TCurrencyType_Hello_AppleDiamond: return "Hello_AppleDiamond"
  case TCurrencyType_Hello_RedDiamond: return "Hello_RedDiamond"
  case TCurrencyType_SuperPurpleDiamond: return "SuperPurpleDiamond"
  case TCurrencyType_RedPacket: return "RedPacket"
  case TCurrencyType_Xh_Golden: return "Xh_Golden"
  case TCurrencyType_Xh_Diamond: return "Xh_Diamond"
  case TCurrencyType_Xh_Ruby: return "Xh_Ruby"
  case TCurrencyType_Bilin_Whale: return "Bilin_Whale"
  case TCurrencyType_Bilin_Profit: return "Bilin_Profit"
  case TCurrencyType_TinyTime_MiBi: return "TinyTime_MiBi"
  case TCurrencyType_TinyTime_MiDou: return "TinyTime_MiDou"
  case TCurrencyType_TinyTime_Profit: return "TinyTime_Profit"
  case TCurrencyType_TinyTime_EDou: return "TinyTime_EDou"
  case TCurrencyType_YoMall_Salary: return "YoMall_Salary"
  case TCurrencyType_ME_Midas_Mibi: return "ME_Midas_Mibi"
  case TCurrencyType_GameTemplate_Diamond: return "GameTemplate_Diamond"
  case TCurrencyType_GameTemplate_Ruby: return "GameTemplate_Ruby"
  case TCurrencyType_YYLive_RedDiamond: return "YYLive_RedDiamond"
  case TCurrencyType_HappyCoin: return "HappyCoin"
  case TCurrencyType_HappyDiamond: return "HappyDiamond"
  case TCurrencyType_MGameDiamond: return "MGameDiamond"
  case TCurrencyType_MGameBlackCoin: return "MGameBlackCoin"
  case TCurrencyType_AlipayRedPacket: return "AlipayRedPacket"
  case TCurrencyType_AlipayRedPacketFreeze: return "AlipayRedPacketFreeze"
  case TCurrencyType_HappyDrill: return "HappyDrill"
  case TCurrencyType_Bilin_Whale_NEW: return "Bilin_Whale_NEW"
  case TCurrencyType_Xh_Diamond_NEW: return "Xh_Diamond_NEW"
  case TCurrencyType_TB_tdou: return "TB_tdou"
  }
  return "<UNSET>"
}

func TCurrencyTypeFromString(s string) (TCurrencyType, error) {
  switch s {
  case "Virt": return TCurrencyType_Virt, nil 
  case "Real": return TCurrencyType_Real, nil 
  case "Activity": return TCurrencyType_Activity, nil 
  case "Yb": return TCurrencyType_Yb, nil 
  case "Time": return TCurrencyType_Time, nil 
  case "Commission": return TCurrencyType_Commission, nil 
  case "Sycee": return TCurrencyType_Sycee, nil 
  case "Golden": return TCurrencyType_Golden, nil 
  case "Silver": return TCurrencyType_Silver, nil 
  case "Copper": return TCurrencyType_Copper, nil 
  case "RMB": return TCurrencyType_RMB, nil 
  case "SilverShell": return TCurrencyType_SilverShell, nil 
  case "Hello_Golden": return TCurrencyType_Hello_Golden, nil 
  case "Hello_Diamond": return TCurrencyType_Hello_Diamond, nil 
  case "Hello_AppleDiamond": return TCurrencyType_Hello_AppleDiamond, nil 
  case "Hello_RedDiamond": return TCurrencyType_Hello_RedDiamond, nil 
  case "SuperPurpleDiamond": return TCurrencyType_SuperPurpleDiamond, nil 
  case "RedPacket": return TCurrencyType_RedPacket, nil 
  case "Xh_Golden": return TCurrencyType_Xh_Golden, nil 
  case "Xh_Diamond": return TCurrencyType_Xh_Diamond, nil 
  case "Xh_Ruby": return TCurrencyType_Xh_Ruby, nil 
  case "Bilin_Whale": return TCurrencyType_Bilin_Whale, nil 
  case "Bilin_Profit": return TCurrencyType_Bilin_Profit, nil 
  case "TinyTime_MiBi": return TCurrencyType_TinyTime_MiBi, nil 
  case "TinyTime_MiDou": return TCurrencyType_TinyTime_MiDou, nil 
  case "TinyTime_Profit": return TCurrencyType_TinyTime_Profit, nil 
  case "TinyTime_EDou": return TCurrencyType_TinyTime_EDou, nil 
  case "YoMall_Salary": return TCurrencyType_YoMall_Salary, nil 
  case "ME_Midas_Mibi": return TCurrencyType_ME_Midas_Mibi, nil 
  case "GameTemplate_Diamond": return TCurrencyType_GameTemplate_Diamond, nil 
  case "GameTemplate_Ruby": return TCurrencyType_GameTemplate_Ruby, nil 
  case "YYLive_RedDiamond": return TCurrencyType_YYLive_RedDiamond, nil 
  case "HappyCoin": return TCurrencyType_HappyCoin, nil 
  case "HappyDiamond": return TCurrencyType_HappyDiamond, nil 
  case "MGameDiamond": return TCurrencyType_MGameDiamond, nil 
  case "MGameBlackCoin": return TCurrencyType_MGameBlackCoin, nil 
  case "AlipayRedPacket": return TCurrencyType_AlipayRedPacket, nil 
  case "AlipayRedPacketFreeze": return TCurrencyType_AlipayRedPacketFreeze, nil 
  case "HappyDrill": return TCurrencyType_HappyDrill, nil 
  case "Bilin_Whale_NEW": return TCurrencyType_Bilin_Whale_NEW, nil 
  case "Xh_Diamond_NEW": return TCurrencyType_Xh_Diamond_NEW, nil 
  case "TB_tdou": return TCurrencyType_TB_tdou, nil 
  }
  return TCurrencyType(0), fmt.Errorf("not a valid TCurrencyType string")
}


func TCurrencyTypePtr(v TCurrencyType) *TCurrencyType { return &v }

func (p TCurrencyType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TCurrencyType) UnmarshalText(text []byte) error {
q, err := TCurrencyTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TCurrencyType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TCurrencyType(v)
return nil
}

func (p * TCurrencyType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TSortType int64
const (
  TSortType_NoSort TSortType = 0
  TSortType_ASC TSortType = 1
  TSortType_DESC TSortType = 2
  TSortType_DEFAULT TSortType = 3
)

func (p TSortType) String() string {
  switch p {
  case TSortType_NoSort: return "NoSort"
  case TSortType_ASC: return "ASC"
  case TSortType_DESC: return "DESC"
  case TSortType_DEFAULT: return "DEFAULT"
  }
  return "<UNSET>"
}

func TSortTypeFromString(s string) (TSortType, error) {
  switch s {
  case "NoSort": return TSortType_NoSort, nil 
  case "ASC": return TSortType_ASC, nil 
  case "DESC": return TSortType_DESC, nil 
  case "DEFAULT": return TSortType_DEFAULT, nil 
  }
  return TSortType(0), fmt.Errorf("not a valid TSortType string")
}


func TSortTypePtr(v TSortType) *TSortType { return &v }

func (p TSortType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TSortType) UnmarshalText(text []byte) error {
q, err := TSortTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TSortType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TSortType(v)
return nil
}

func (p * TSortType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TRevenueSrcType int64
const (
  TRevenueSrcType_Props TRevenueSrcType = 1
  TRevenueSrcType_Tutor TRevenueSrcType = 2
  TRevenueSrcType_ExternalCharge TRevenueSrcType = 3
  TRevenueSrcType_PropsWithoutDaySettleLevel TRevenueSrcType = 4
  TRevenueSrcType_VipPkRevenue TRevenueSrcType = 5
  TRevenueSrcType_FinanceStrategy TRevenueSrcType = 6
  TRevenueSrcType_ForceRelieveContract TRevenueSrcType = 7
  TRevenueSrcType_YoMallSalaryRevenue TRevenueSrcType = 8
  TRevenueSrcType_XunhuanRoomRevenue TRevenueSrcType = 9
  TRevenueSrcType_XunhuanPropsAndRoomRevenue TRevenueSrcType = 10
  TRevenueSrcType_NiuWan TRevenueSrcType = 11
  TRevenueSrcType_Ask TRevenueSrcType = 12
  TRevenueSrcType_DATING_HATKING TRevenueSrcType = 13
  TRevenueSrcType_IssueBonus TRevenueSrcType = 14
  TRevenueSrcType_DATING_6P TRevenueSrcType = 15
  TRevenueSrcType_DATING_PC6P TRevenueSrcType = 16
  TRevenueSrcType_DATING_PC6P_VIRT TRevenueSrcType = 17
  TRevenueSrcType_MGVRandom TRevenueSrcType = 18
  TRevenueSrcType_DATING_6PFACE TRevenueSrcType = 19
  TRevenueSrcType_XunhuanActSubsidy TRevenueSrcType = 20
  TRevenueSrcType_DatingSeal TRevenueSrcType = 21
)

func (p TRevenueSrcType) String() string {
  switch p {
  case TRevenueSrcType_Props: return "Props"
  case TRevenueSrcType_Tutor: return "Tutor"
  case TRevenueSrcType_ExternalCharge: return "ExternalCharge"
  case TRevenueSrcType_PropsWithoutDaySettleLevel: return "PropsWithoutDaySettleLevel"
  case TRevenueSrcType_VipPkRevenue: return "VipPkRevenue"
  case TRevenueSrcType_FinanceStrategy: return "FinanceStrategy"
  case TRevenueSrcType_ForceRelieveContract: return "ForceRelieveContract"
  case TRevenueSrcType_YoMallSalaryRevenue: return "YoMallSalaryRevenue"
  case TRevenueSrcType_XunhuanRoomRevenue: return "XunhuanRoomRevenue"
  case TRevenueSrcType_XunhuanPropsAndRoomRevenue: return "XunhuanPropsAndRoomRevenue"
  case TRevenueSrcType_NiuWan: return "NiuWan"
  case TRevenueSrcType_Ask: return "Ask"
  case TRevenueSrcType_DATING_HATKING: return "DATING_HATKING"
  case TRevenueSrcType_IssueBonus: return "IssueBonus"
  case TRevenueSrcType_DATING_6P: return "DATING_6P"
  case TRevenueSrcType_DATING_PC6P: return "DATING_PC6P"
  case TRevenueSrcType_DATING_PC6P_VIRT: return "DATING_PC6P_VIRT"
  case TRevenueSrcType_MGVRandom: return "MGVRandom"
  case TRevenueSrcType_DATING_6PFACE: return "DATING_6PFACE"
  case TRevenueSrcType_XunhuanActSubsidy: return "XunhuanActSubsidy"
  case TRevenueSrcType_DatingSeal: return "DatingSeal"
  }
  return "<UNSET>"
}

func TRevenueSrcTypeFromString(s string) (TRevenueSrcType, error) {
  switch s {
  case "Props": return TRevenueSrcType_Props, nil 
  case "Tutor": return TRevenueSrcType_Tutor, nil 
  case "ExternalCharge": return TRevenueSrcType_ExternalCharge, nil 
  case "PropsWithoutDaySettleLevel": return TRevenueSrcType_PropsWithoutDaySettleLevel, nil 
  case "VipPkRevenue": return TRevenueSrcType_VipPkRevenue, nil 
  case "FinanceStrategy": return TRevenueSrcType_FinanceStrategy, nil 
  case "ForceRelieveContract": return TRevenueSrcType_ForceRelieveContract, nil 
  case "YoMallSalaryRevenue": return TRevenueSrcType_YoMallSalaryRevenue, nil 
  case "XunhuanRoomRevenue": return TRevenueSrcType_XunhuanRoomRevenue, nil 
  case "XunhuanPropsAndRoomRevenue": return TRevenueSrcType_XunhuanPropsAndRoomRevenue, nil 
  case "NiuWan": return TRevenueSrcType_NiuWan, nil 
  case "Ask": return TRevenueSrcType_Ask, nil 
  case "DATING_HATKING": return TRevenueSrcType_DATING_HATKING, nil 
  case "IssueBonus": return TRevenueSrcType_IssueBonus, nil 
  case "DATING_6P": return TRevenueSrcType_DATING_6P, nil 
  case "DATING_PC6P": return TRevenueSrcType_DATING_PC6P, nil 
  case "DATING_PC6P_VIRT": return TRevenueSrcType_DATING_PC6P_VIRT, nil 
  case "MGVRandom": return TRevenueSrcType_MGVRandom, nil 
  case "DATING_6PFACE": return TRevenueSrcType_DATING_6PFACE, nil 
  case "XunhuanActSubsidy": return TRevenueSrcType_XunhuanActSubsidy, nil 
  case "DatingSeal": return TRevenueSrcType_DatingSeal, nil 
  }
  return TRevenueSrcType(0), fmt.Errorf("not a valid TRevenueSrcType string")
}


func TRevenueSrcTypePtr(v TRevenueSrcType) *TRevenueSrcType { return &v }

func (p TRevenueSrcType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TRevenueSrcType) UnmarshalText(text []byte) error {
q, err := TRevenueSrcTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TRevenueSrcType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TRevenueSrcType(v)
return nil
}

func (p * TRevenueSrcType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Message
type TServiceException struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewTServiceException() *TServiceException {
  return &TServiceException{}
}


func (p *TServiceException) GetCode() int32 {
  return p.Code
}

func (p *TServiceException) GetMessage() string {
  return p.Message
}
func (p *TServiceException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServiceException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TServiceException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TServiceException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServiceException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TServiceException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServiceException(%+v)", *p)
}

func (p *TServiceException) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Message
//  - Data
type TPayResult_ struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
  Data string `thrift:"data,3" db:"data" json:"data"`
}

func NewTPayResult_() *TPayResult_ {
  return &TPayResult_{}
}


func (p *TPayResult_) GetCode() int32 {
  return p.Code
}

func (p *TPayResult_) GetMessage() string {
  return p.Message
}

func (p *TPayResult_) GetData() string {
  return p.Data
}
func (p *TPayResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPayResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TPayResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TPayResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *TPayResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPayResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPayResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TPayResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TPayResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *TPayResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPayResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - SettleDate
//  - UID
//  - Appid
//  - ContractType
//  - UserType
//  - AccountId
//  - AccountAmount
//  - AccountCurrencyType
//  - DescCurrencyType
//  - ExchangeLevel
//  - ExchangeIncome
//  - SettleTime
//  - ContractWeight
//  - ContractOwuid
//  - ContractAnchorUid
type TMonthRevenueRecord struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  SettleDate int64 `thrift:"settleDate,2" db:"settleDate" json:"settleDate"`
  UID int64 `thrift:"uid,3" db:"uid" json:"uid"`
  Appid int32 `thrift:"appid,4" db:"appid" json:"appid"`
  ContractType int32 `thrift:"contractType,5" db:"contractType" json:"contractType"`
  UserType int32 `thrift:"userType,6" db:"userType" json:"userType"`
  AccountId int64 `thrift:"accountId,7" db:"accountId" json:"accountId"`
  AccountAmount int32 `thrift:"accountAmount,8" db:"accountAmount" json:"accountAmount"`
  AccountCurrencyType int32 `thrift:"accountCurrencyType,9" db:"accountCurrencyType" json:"accountCurrencyType"`
  DescCurrencyType int32 `thrift:"descCurrencyType,10" db:"descCurrencyType" json:"descCurrencyType"`
  ExchangeLevel int32 `thrift:"exchangeLevel,11" db:"exchangeLevel" json:"exchangeLevel"`
  ExchangeIncome int32 `thrift:"exchangeIncome,12" db:"exchangeIncome" json:"exchangeIncome"`
  SettleTime int64 `thrift:"settleTime,13" db:"settleTime" json:"settleTime"`
  ContractWeight int32 `thrift:"contractWeight,14" db:"contractWeight" json:"contractWeight"`
  ContractOwuid int64 `thrift:"contractOwuid,15" db:"contractOwuid" json:"contractOwuid"`
  ContractAnchorUid int64 `thrift:"contractAnchorUid,16" db:"contractAnchorUid" json:"contractAnchorUid"`
}

func NewTMonthRevenueRecord() *TMonthRevenueRecord {
  return &TMonthRevenueRecord{}
}


func (p *TMonthRevenueRecord) GetID() int64 {
  return p.ID
}

func (p *TMonthRevenueRecord) GetSettleDate() int64 {
  return p.SettleDate
}

func (p *TMonthRevenueRecord) GetUID() int64 {
  return p.UID
}

func (p *TMonthRevenueRecord) GetAppid() int32 {
  return p.Appid
}

func (p *TMonthRevenueRecord) GetContractType() int32 {
  return p.ContractType
}

func (p *TMonthRevenueRecord) GetUserType() int32 {
  return p.UserType
}

func (p *TMonthRevenueRecord) GetAccountId() int64 {
  return p.AccountId
}

func (p *TMonthRevenueRecord) GetAccountAmount() int32 {
  return p.AccountAmount
}

func (p *TMonthRevenueRecord) GetAccountCurrencyType() int32 {
  return p.AccountCurrencyType
}

func (p *TMonthRevenueRecord) GetDescCurrencyType() int32 {
  return p.DescCurrencyType
}

func (p *TMonthRevenueRecord) GetExchangeLevel() int32 {
  return p.ExchangeLevel
}

func (p *TMonthRevenueRecord) GetExchangeIncome() int32 {
  return p.ExchangeIncome
}

func (p *TMonthRevenueRecord) GetSettleTime() int64 {
  return p.SettleTime
}

func (p *TMonthRevenueRecord) GetContractWeight() int32 {
  return p.ContractWeight
}

func (p *TMonthRevenueRecord) GetContractOwuid() int64 {
  return p.ContractOwuid
}

func (p *TMonthRevenueRecord) GetContractAnchorUid() int64 {
  return p.ContractAnchorUid
}
func (p *TMonthRevenueRecord) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMonthRevenueRecord)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SettleDate = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContractType = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserType = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AccountAmount = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AccountCurrencyType = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DescCurrencyType = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ExchangeLevel = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ExchangeIncome = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.SettleTime = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ContractWeight = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ContractOwuid = v
}
  return nil
}

func (p *TMonthRevenueRecord)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ContractAnchorUid = v
}
  return nil
}

func (p *TMonthRevenueRecord) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMonthRevenueRecord"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMonthRevenueRecord) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settleDate", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:settleDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.SettleDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settleDate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:settleDate: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uid: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appid: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contractType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContractType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contractType: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userType: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userType: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:accountId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:accountId: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountAmount", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accountAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountAmount (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accountAmount: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountCurrencyType", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:accountCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountCurrencyType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:accountCurrencyType: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("descCurrencyType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:descCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DescCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.descCurrencyType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:descCurrencyType: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchangeLevel", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:exchangeLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExchangeLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchangeLevel (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:exchangeLevel: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchangeIncome", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:exchangeIncome: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExchangeIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchangeIncome (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:exchangeIncome: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settleTime", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:settleTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.SettleTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settleTime (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:settleTime: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractWeight", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:contractWeight: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContractWeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractWeight (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:contractWeight: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractOwuid", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contractOwuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContractOwuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractOwuid (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contractOwuid: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractAnchorUid", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:contractAnchorUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContractAnchorUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractAnchorUid (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:contractAnchorUid: ", p), err) }
  return err
}

func (p *TMonthRevenueRecord) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMonthRevenueRecord(%+v)", *p)
}

// Attributes:
//  - TransedUid
//  - Count
//  - IsMaster
type TUserPropsTransfer struct {
  TransedUid int64 `thrift:"transedUid,1" db:"transedUid" json:"transedUid"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  IsMaster bool `thrift:"isMaster,3" db:"isMaster" json:"isMaster"`
}

func NewTUserPropsTransfer() *TUserPropsTransfer {
  return &TUserPropsTransfer{}
}


func (p *TUserPropsTransfer) GetTransedUid() int64 {
  return p.TransedUid
}

func (p *TUserPropsTransfer) GetCount() int32 {
  return p.Count
}

func (p *TUserPropsTransfer) GetIsMaster() bool {
  return p.IsMaster
}
func (p *TUserPropsTransfer) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserPropsTransfer)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TransedUid = v
}
  return nil
}

func (p *TUserPropsTransfer)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TUserPropsTransfer)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsMaster = v
}
  return nil
}

func (p *TUserPropsTransfer) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserPropsTransfer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserPropsTransfer) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transedUid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transedUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.TransedUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transedUid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transedUid: ", p), err) }
  return err
}

func (p *TUserPropsTransfer) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TUserPropsTransfer) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isMaster", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isMaster: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsMaster)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isMaster (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isMaster: ", p), err) }
  return err
}

func (p *TUserPropsTransfer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserPropsTransfer(%+v)", *p)
}

// Attributes:
//  - TotalMonth
//  - Commission
//  - AnchorUid
//  - Sid
//  - ForceRelieve
//  - ContractDuration
//  - OwUid
//  - Appid
type PinkDiamondSummary struct {
  TotalMonth int32 `thrift:"totalMonth,1" db:"totalMonth" json:"totalMonth"`
  Commission int64 `thrift:"commission,2" db:"commission" json:"commission"`
  AnchorUid int64 `thrift:"anchorUid,3" db:"anchorUid" json:"anchorUid"`
  Sid int64 `thrift:"sid,4" db:"sid" json:"sid"`
  ForceRelieve bool `thrift:"forceRelieve,5" db:"forceRelieve" json:"forceRelieve"`
  ContractDuration int64 `thrift:"contractDuration,6" db:"contractDuration" json:"contractDuration"`
  OwUid int64 `thrift:"owUid,7" db:"owUid" json:"owUid"`
  Appid int32 `thrift:"appid,8" db:"appid" json:"appid"`
}

func NewPinkDiamondSummary() *PinkDiamondSummary {
  return &PinkDiamondSummary{}
}


func (p *PinkDiamondSummary) GetTotalMonth() int32 {
  return p.TotalMonth
}

func (p *PinkDiamondSummary) GetCommission() int64 {
  return p.Commission
}

func (p *PinkDiamondSummary) GetAnchorUid() int64 {
  return p.AnchorUid
}

func (p *PinkDiamondSummary) GetSid() int64 {
  return p.Sid
}

func (p *PinkDiamondSummary) GetForceRelieve() bool {
  return p.ForceRelieve
}

func (p *PinkDiamondSummary) GetContractDuration() int64 {
  return p.ContractDuration
}

func (p *PinkDiamondSummary) GetOwUid() int64 {
  return p.OwUid
}

func (p *PinkDiamondSummary) GetAppid() int32 {
  return p.Appid
}
func (p *PinkDiamondSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PinkDiamondSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalMonth = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Commission = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AnchorUid = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ForceRelieve = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContractDuration = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OwUid = v
}
  return nil
}

func (p *PinkDiamondSummary)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *PinkDiamondSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PinkDiamondSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PinkDiamondSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalMonth", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalMonth: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalMonth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalMonth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalMonth: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commission", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commission: ", p), err) }
  if err := oprot.WriteI64(int64(p.Commission)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commission (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commission: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anchorUid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:anchorUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.AnchorUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.anchorUid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:anchorUid: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sid: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("forceRelieve", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:forceRelieve: ", p), err) }
  if err := oprot.WriteBool(bool(p.ForceRelieve)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceRelieve (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:forceRelieve: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractDuration", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contractDuration: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContractDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractDuration (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contractDuration: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owUid", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:owUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.OwUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owUid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:owUid: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:appid: ", p), err) }
  return err
}

func (p *PinkDiamondSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PinkDiamondSummary(%+v)", *p)
}

// Attributes:
//  - UID
//  - CurrencyType
//  - Amount
//  - Freezed
//  - Appid
//  - Sid
type TChannelAccount struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  CurrencyType TCurrencyType `thrift:"currencyType,2" db:"currencyType" json:"currencyType"`
  Amount int64 `thrift:"amount,3" db:"amount" json:"amount"`
  Freezed int64 `thrift:"freezed,4" db:"freezed" json:"freezed"`
  Appid int32 `thrift:"appid,5" db:"appid" json:"appid"`
  Sid int64 `thrift:"sid,6" db:"sid" json:"sid"`
}

func NewTChannelAccount() *TChannelAccount {
  return &TChannelAccount{}
}


func (p *TChannelAccount) GetUID() int64 {
  return p.UID
}

func (p *TChannelAccount) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}

func (p *TChannelAccount) GetAmount() int64 {
  return p.Amount
}

func (p *TChannelAccount) GetFreezed() int64 {
  return p.Freezed
}

func (p *TChannelAccount) GetAppid() int32 {
  return p.Appid
}

func (p *TChannelAccount) GetSid() int64 {
  return p.Sid
}
func (p *TChannelAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChannelAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TChannelAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TChannelAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TChannelAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Freezed = v
}
  return nil
}

func (p *TChannelAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TChannelAccount)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TChannelAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChannelAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChannelAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TChannelAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyType: ", p), err) }
  return err
}

func (p *TChannelAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err) }
  return err
}

func (p *TChannelAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezed", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:freezed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Freezed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:freezed: ", p), err) }
  return err
}

func (p *TChannelAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appid: ", p), err) }
  return err
}

func (p *TChannelAccount) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sid: ", p), err) }
  return err
}

func (p *TChannelAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChannelAccount(%+v)", *p)
}

// Attributes:
//  - Appid
//  - ContractType
//  - Level
//  - GreaterAndEqual
//  - LessThan
//  - Rate
//  - NotSuperAnchorMaxRate
//  - AdditionRate
//  - CanAdditionRate
//  - BonusRate
//  - OverflowLine
//  - OverflowRate
//  - OwRate
//  - OverflowOwRate
//  - CanExceed
//  - RewardType
type TDaySettleLevelConfig struct {
  Appid int32 `thrift:"appid,1" db:"appid" json:"appid"`
  ContractType int32 `thrift:"contractType,2" db:"contractType" json:"contractType"`
  Level string `thrift:"level,3" db:"level" json:"level"`
  GreaterAndEqual int32 `thrift:"greaterAndEqual,4" db:"greaterAndEqual" json:"greaterAndEqual"`
  LessThan int32 `thrift:"lessThan,5" db:"lessThan" json:"lessThan"`
  Rate int32 `thrift:"rate,6" db:"rate" json:"rate"`
  NotSuperAnchorMaxRate int32 `thrift:"notSuperAnchorMaxRate,7" db:"notSuperAnchorMaxRate" json:"notSuperAnchorMaxRate"`
  AdditionRate int32 `thrift:"additionRate,8" db:"additionRate" json:"additionRate"`
  CanAdditionRate int32 `thrift:"canAdditionRate,9" db:"canAdditionRate" json:"canAdditionRate"`
  BonusRate int32 `thrift:"bonusRate,10" db:"bonusRate" json:"bonusRate"`
  OverflowLine int32 `thrift:"overflowLine,11" db:"overflowLine" json:"overflowLine"`
  OverflowRate int32 `thrift:"overflowRate,12" db:"overflowRate" json:"overflowRate"`
  OwRate int32 `thrift:"owRate,13" db:"owRate" json:"owRate"`
  OverflowOwRate int32 `thrift:"overflowOwRate,14" db:"overflowOwRate" json:"overflowOwRate"`
  CanExceed int32 `thrift:"canExceed,15" db:"canExceed" json:"canExceed"`
  RewardType int32 `thrift:"rewardType,16" db:"rewardType" json:"rewardType"`
}

func NewTDaySettleLevelConfig() *TDaySettleLevelConfig {
  return &TDaySettleLevelConfig{}
}


func (p *TDaySettleLevelConfig) GetAppid() int32 {
  return p.Appid
}

func (p *TDaySettleLevelConfig) GetContractType() int32 {
  return p.ContractType
}

func (p *TDaySettleLevelConfig) GetLevel() string {
  return p.Level
}

func (p *TDaySettleLevelConfig) GetGreaterAndEqual() int32 {
  return p.GreaterAndEqual
}

func (p *TDaySettleLevelConfig) GetLessThan() int32 {
  return p.LessThan
}

func (p *TDaySettleLevelConfig) GetRate() int32 {
  return p.Rate
}

func (p *TDaySettleLevelConfig) GetNotSuperAnchorMaxRate() int32 {
  return p.NotSuperAnchorMaxRate
}

func (p *TDaySettleLevelConfig) GetAdditionRate() int32 {
  return p.AdditionRate
}

func (p *TDaySettleLevelConfig) GetCanAdditionRate() int32 {
  return p.CanAdditionRate
}

func (p *TDaySettleLevelConfig) GetBonusRate() int32 {
  return p.BonusRate
}

func (p *TDaySettleLevelConfig) GetOverflowLine() int32 {
  return p.OverflowLine
}

func (p *TDaySettleLevelConfig) GetOverflowRate() int32 {
  return p.OverflowRate
}

func (p *TDaySettleLevelConfig) GetOwRate() int32 {
  return p.OwRate
}

func (p *TDaySettleLevelConfig) GetOverflowOwRate() int32 {
  return p.OverflowOwRate
}

func (p *TDaySettleLevelConfig) GetCanExceed() int32 {
  return p.CanExceed
}

func (p *TDaySettleLevelConfig) GetRewardType() int32 {
  return p.RewardType
}
func (p *TDaySettleLevelConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ContractType = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GreaterAndEqual = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LessThan = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Rate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NotSuperAnchorMaxRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AdditionRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CanAdditionRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.BonusRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OverflowLine = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.OverflowRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.OwRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OverflowOwRate = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.CanExceed = v
}
  return nil
}

func (p *TDaySettleLevelConfig)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RewardType = v
}
  return nil
}

func (p *TDaySettleLevelConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDaySettleLevelConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDaySettleLevelConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contractType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContractType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contractType: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteString(string(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("greaterAndEqual", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:greaterAndEqual: ", p), err) }
  if err := oprot.WriteI32(int32(p.GreaterAndEqual)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.greaterAndEqual (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:greaterAndEqual: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lessThan", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lessThan: ", p), err) }
  if err := oprot.WriteI32(int32(p.LessThan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lessThan (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lessThan: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rate", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rate: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notSuperAnchorMaxRate", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:notSuperAnchorMaxRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.NotSuperAnchorMaxRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notSuperAnchorMaxRate (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:notSuperAnchorMaxRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRate", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:additionRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdditionRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.additionRate (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:additionRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canAdditionRate", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:canAdditionRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.CanAdditionRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canAdditionRate (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:canAdditionRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bonusRate", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:bonusRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.BonusRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bonusRate (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:bonusRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overflowLine", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:overflowLine: ", p), err) }
  if err := oprot.WriteI32(int32(p.OverflowLine)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overflowLine (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:overflowLine: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overflowRate", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:overflowRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.OverflowRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overflowRate (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:overflowRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owRate", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:owRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.OwRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owRate (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:owRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overflowOwRate", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:overflowOwRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.OverflowOwRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overflowOwRate (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:overflowOwRate: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canExceed", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:canExceed: ", p), err) }
  if err := oprot.WriteI32(int32(p.CanExceed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canExceed (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:canExceed: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rewardType", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:rewardType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RewardType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rewardType (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:rewardType: ", p), err) }
  return err
}

func (p *TDaySettleLevelConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDaySettleLevelConfig(%+v)", *p)
}

// Attributes:
//  - ID
//  - StatDate
//  - UID
//  - Sid
//  - Appid
//  - SignTime
//  - RelieveTime
//  - RevenueSum
//  - MonthSettle
//  - VirtExchange
type TCompereStandings struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  StatDate int64 `thrift:"statDate,2" db:"statDate" json:"statDate"`
  UID int64 `thrift:"uid,3" db:"uid" json:"uid"`
  Sid int64 `thrift:"sid,4" db:"sid" json:"sid"`
  Appid int32 `thrift:"appid,5" db:"appid" json:"appid"`
  SignTime int64 `thrift:"signTime,6" db:"signTime" json:"signTime"`
  RelieveTime int64 `thrift:"relieveTime,7" db:"relieveTime" json:"relieveTime"`
  RevenueSum int64 `thrift:"revenueSum,8" db:"revenueSum" json:"revenueSum"`
  MonthSettle float64 `thrift:"monthSettle,9" db:"monthSettle" json:"monthSettle"`
  VirtExchange int64 `thrift:"virtExchange,10" db:"virtExchange" json:"virtExchange"`
}

func NewTCompereStandings() *TCompereStandings {
  return &TCompereStandings{}
}


func (p *TCompereStandings) GetID() int64 {
  return p.ID
}

func (p *TCompereStandings) GetStatDate() int64 {
  return p.StatDate
}

func (p *TCompereStandings) GetUID() int64 {
  return p.UID
}

func (p *TCompereStandings) GetSid() int64 {
  return p.Sid
}

func (p *TCompereStandings) GetAppid() int32 {
  return p.Appid
}

func (p *TCompereStandings) GetSignTime() int64 {
  return p.SignTime
}

func (p *TCompereStandings) GetRelieveTime() int64 {
  return p.RelieveTime
}

func (p *TCompereStandings) GetRevenueSum() int64 {
  return p.RevenueSum
}

func (p *TCompereStandings) GetMonthSettle() float64 {
  return p.MonthSettle
}

func (p *TCompereStandings) GetVirtExchange() int64 {
  return p.VirtExchange
}
func (p *TCompereStandings) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCompereStandings)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TCompereStandings)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StatDate = v
}
  return nil
}

func (p *TCompereStandings)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TCompereStandings)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TCompereStandings)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TCompereStandings)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SignTime = v
}
  return nil
}

func (p *TCompereStandings)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RelieveTime = v
}
  return nil
}

func (p *TCompereStandings)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RevenueSum = v
}
  return nil
}

func (p *TCompereStandings)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.MonthSettle = v
}
  return nil
}

func (p *TCompereStandings)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VirtExchange = v
}
  return nil
}

func (p *TCompereStandings) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCompereStandings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCompereStandings) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statDate", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.StatDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statDate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statDate: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uid: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sid: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appid: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:signTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.SignTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:signTime: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relieveTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:relieveTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.RelieveTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relieveTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:relieveTime: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenueSum", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:revenueSum: ", p), err) }
  if err := oprot.WriteI64(int64(p.RevenueSum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenueSum (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:revenueSum: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("monthSettle", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:monthSettle: ", p), err) }
  if err := oprot.WriteDouble(float64(p.MonthSettle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.monthSettle (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:monthSettle: ", p), err) }
  return err
}

func (p *TCompereStandings) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("virtExchange", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:virtExchange: ", p), err) }
  if err := oprot.WriteI64(int64(p.VirtExchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.virtExchange (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:virtExchange: ", p), err) }
  return err
}

func (p *TCompereStandings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCompereStandings(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Appid
//  - UsedChannelType
//  - DestCurrencyType
//  - ChargeRate
//  - OffersType
//  - OffersRate
//  - SrcAmount
//  - DestAmount
//  - EffectStartTime
//  - EffectEndTime
//  - Status
//  - Weight
//  - ProductId
//  - OffersCurrencySame
//  - OffersCurrencyType
//  - Expand
type TChargeCurrencyConfig struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Appid int32 `thrift:"appid,3" db:"appid" json:"appid"`
  UsedChannelType int32 `thrift:"usedChannelType,4" db:"usedChannelType" json:"usedChannelType"`
  DestCurrencyType int32 `thrift:"destCurrencyType,5" db:"destCurrencyType" json:"destCurrencyType"`
  ChargeRate int32 `thrift:"chargeRate,6" db:"chargeRate" json:"chargeRate"`
  OffersType int32 `thrift:"offersType,7" db:"offersType" json:"offersType"`
  OffersRate int32 `thrift:"offersRate,8" db:"offersRate" json:"offersRate"`
  SrcAmount int32 `thrift:"srcAmount,9" db:"srcAmount" json:"srcAmount"`
  DestAmount int32 `thrift:"destAmount,10" db:"destAmount" json:"destAmount"`
  EffectStartTime int64 `thrift:"effectStartTime,11" db:"effectStartTime" json:"effectStartTime"`
  EffectEndTime int64 `thrift:"effectEndTime,12" db:"effectEndTime" json:"effectEndTime"`
  Status int32 `thrift:"status,13" db:"status" json:"status"`
  Weight int32 `thrift:"weight,14" db:"weight" json:"weight"`
  ProductId string `thrift:"productId,15" db:"productId" json:"productId"`
  OffersCurrencySame bool `thrift:"offersCurrencySame,16" db:"offersCurrencySame" json:"offersCurrencySame"`
  OffersCurrencyType int32 `thrift:"offersCurrencyType,17" db:"offersCurrencyType" json:"offersCurrencyType"`
  Expand string `thrift:"expand,18" db:"expand" json:"expand"`
}

func NewTChargeCurrencyConfig() *TChargeCurrencyConfig {
  return &TChargeCurrencyConfig{}
}


func (p *TChargeCurrencyConfig) GetID() int32 {
  return p.ID
}

func (p *TChargeCurrencyConfig) GetName() string {
  return p.Name
}

func (p *TChargeCurrencyConfig) GetAppid() int32 {
  return p.Appid
}

func (p *TChargeCurrencyConfig) GetUsedChannelType() int32 {
  return p.UsedChannelType
}

func (p *TChargeCurrencyConfig) GetDestCurrencyType() int32 {
  return p.DestCurrencyType
}

func (p *TChargeCurrencyConfig) GetChargeRate() int32 {
  return p.ChargeRate
}

func (p *TChargeCurrencyConfig) GetOffersType() int32 {
  return p.OffersType
}

func (p *TChargeCurrencyConfig) GetOffersRate() int32 {
  return p.OffersRate
}

func (p *TChargeCurrencyConfig) GetSrcAmount() int32 {
  return p.SrcAmount
}

func (p *TChargeCurrencyConfig) GetDestAmount() int32 {
  return p.DestAmount
}

func (p *TChargeCurrencyConfig) GetEffectStartTime() int64 {
  return p.EffectStartTime
}

func (p *TChargeCurrencyConfig) GetEffectEndTime() int64 {
  return p.EffectEndTime
}

func (p *TChargeCurrencyConfig) GetStatus() int32 {
  return p.Status
}

func (p *TChargeCurrencyConfig) GetWeight() int32 {
  return p.Weight
}

func (p *TChargeCurrencyConfig) GetProductId() string {
  return p.ProductId
}

func (p *TChargeCurrencyConfig) GetOffersCurrencySame() bool {
  return p.OffersCurrencySame
}

func (p *TChargeCurrencyConfig) GetOffersCurrencyType() int32 {
  return p.OffersCurrencyType
}

func (p *TChargeCurrencyConfig) GetExpand() string {
  return p.Expand
}
func (p *TChargeCurrencyConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UsedChannelType = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DestCurrencyType = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChargeRate = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OffersType = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OffersRate = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SrcAmount = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DestAmount = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EffectStartTime = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EffectEndTime = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.OffersCurrencySame = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.OffersCurrencyType = v
}
  return nil
}

func (p *TChargeCurrencyConfig)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Expand = v
}
  return nil
}

func (p *TChargeCurrencyConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChargeCurrencyConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChargeCurrencyConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usedChannelType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:usedChannelType: ", p), err) }
  if err := oprot.WriteI32(int32(p.UsedChannelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usedChannelType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:usedChannelType: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destCurrencyType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:destCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destCurrencyType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:destCurrencyType: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chargeRate", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chargeRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChargeRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chargeRate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chargeRate: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offersType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:offersType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OffersType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offersType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:offersType: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offersRate", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:offersRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.OffersRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offersRate (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:offersRate: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcAmount", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:srcAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.SrcAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcAmount (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:srcAmount: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destAmount", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:destAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destAmount (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:destAmount: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("effectStartTime", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:effectStartTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EffectStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.effectStartTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:effectStartTime: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("effectEndTime", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:effectEndTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EffectEndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.effectEndTime (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:effectEndTime: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:status: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:weight: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:productId: ", p), err) }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:productId: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offersCurrencySame", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:offersCurrencySame: ", p), err) }
  if err := oprot.WriteBool(bool(p.OffersCurrencySame)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offersCurrencySame (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:offersCurrencySame: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offersCurrencyType", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:offersCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OffersCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offersCurrencyType (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:offersCurrencyType: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expand", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:expand: ", p), err) }
  if err := oprot.WriteString(string(p.Expand)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expand (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:expand: ", p), err) }
  return err
}

func (p *TChargeCurrencyConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChargeCurrencyConfig(%+v)", *p)
}

// Attributes:
//  - ID
//  - Appid
//  - SrcCurrencyType
//  - DestCurrencyType
//  - SrcAmount
//  - DestAmount
//  - ExchangeRate
//  - Weight
//  - StartTime
//  - EndTime
type TExchangeCurrencyConfig struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
  SrcCurrencyType int32 `thrift:"srcCurrencyType,3" db:"srcCurrencyType" json:"srcCurrencyType"`
  DestCurrencyType int32 `thrift:"destCurrencyType,4" db:"destCurrencyType" json:"destCurrencyType"`
  SrcAmount int32 `thrift:"srcAmount,5" db:"srcAmount" json:"srcAmount"`
  DestAmount int32 `thrift:"destAmount,6" db:"destAmount" json:"destAmount"`
  ExchangeRate int32 `thrift:"exchangeRate,7" db:"exchangeRate" json:"exchangeRate"`
  Weight int32 `thrift:"weight,8" db:"weight" json:"weight"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,10" db:"endTime" json:"endTime"`
}

func NewTExchangeCurrencyConfig() *TExchangeCurrencyConfig {
  return &TExchangeCurrencyConfig{}
}


func (p *TExchangeCurrencyConfig) GetID() int64 {
  return p.ID
}

func (p *TExchangeCurrencyConfig) GetAppid() int32 {
  return p.Appid
}

func (p *TExchangeCurrencyConfig) GetSrcCurrencyType() int32 {
  return p.SrcCurrencyType
}

func (p *TExchangeCurrencyConfig) GetDestCurrencyType() int32 {
  return p.DestCurrencyType
}

func (p *TExchangeCurrencyConfig) GetSrcAmount() int32 {
  return p.SrcAmount
}

func (p *TExchangeCurrencyConfig) GetDestAmount() int32 {
  return p.DestAmount
}

func (p *TExchangeCurrencyConfig) GetExchangeRate() int32 {
  return p.ExchangeRate
}

func (p *TExchangeCurrencyConfig) GetWeight() int32 {
  return p.Weight
}

func (p *TExchangeCurrencyConfig) GetStartTime() int64 {
  return p.StartTime
}

func (p *TExchangeCurrencyConfig) GetEndTime() int64 {
  return p.EndTime
}
func (p *TExchangeCurrencyConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SrcCurrencyType = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DestCurrencyType = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SrcAmount = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DestAmount = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ExchangeRate = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TExchangeCurrencyConfig)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TExchangeCurrencyConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExchangeCurrencyConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExchangeCurrencyConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcCurrencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:srcCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SrcCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcCurrencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:srcCurrencyType: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destCurrencyType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:destCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destCurrencyType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:destCurrencyType: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcAmount", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:srcAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.SrcAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcAmount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:srcAmount: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destAmount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:destAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destAmount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:destAmount: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchangeRate", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:exchangeRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExchangeRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchangeRate (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:exchangeRate: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:weight: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endTime: ", p), err) }
  return err
}

func (p *TExchangeCurrencyConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExchangeCurrencyConfig(%+v)", *p)
}

// Attributes:
//  - UID
//  - AccountId
//  - CurrencyType
//  - AmountOrig
//  - AmountChange
//  - FreezedOrig
//  - FreezedChange
//  - OptTime
//  - Description
//  - OptType
//  - Appid
//  - ID
type TUserAccountHistory struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  AccountId int64 `thrift:"accountId,2" db:"accountId" json:"accountId"`
  CurrencyType TCurrencyType `thrift:"currencyType,3" db:"currencyType" json:"currencyType"`
  AmountOrig int64 `thrift:"amountOrig,4" db:"amountOrig" json:"amountOrig"`
  AmountChange int64 `thrift:"amountChange,5" db:"amountChange" json:"amountChange"`
  FreezedOrig int64 `thrift:"freezedOrig,6" db:"freezedOrig" json:"freezedOrig"`
  FreezedChange int64 `thrift:"freezedChange,7" db:"freezedChange" json:"freezedChange"`
  OptTime int64 `thrift:"optTime,8" db:"optTime" json:"optTime"`
  Description string `thrift:"description,9" db:"description" json:"description"`
  OptType TAccountOperateType `thrift:"optType,10" db:"optType" json:"optType"`
  Appid int32 `thrift:"appid,11" db:"appid" json:"appid"`
  ID int64 `thrift:"id,12" db:"id" json:"id"`
}

func NewTUserAccountHistory() *TUserAccountHistory {
  return &TUserAccountHistory{}
}


func (p *TUserAccountHistory) GetUID() int64 {
  return p.UID
}

func (p *TUserAccountHistory) GetAccountId() int64 {
  return p.AccountId
}

func (p *TUserAccountHistory) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}

func (p *TUserAccountHistory) GetAmountOrig() int64 {
  return p.AmountOrig
}

func (p *TUserAccountHistory) GetAmountChange() int64 {
  return p.AmountChange
}

func (p *TUserAccountHistory) GetFreezedOrig() int64 {
  return p.FreezedOrig
}

func (p *TUserAccountHistory) GetFreezedChange() int64 {
  return p.FreezedChange
}

func (p *TUserAccountHistory) GetOptTime() int64 {
  return p.OptTime
}

func (p *TUserAccountHistory) GetDescription() string {
  return p.Description
}

func (p *TUserAccountHistory) GetOptType() TAccountOperateType {
  return p.OptType
}

func (p *TUserAccountHistory) GetAppid() int32 {
  return p.Appid
}

func (p *TUserAccountHistory) GetID() int64 {
  return p.ID
}
func (p *TUserAccountHistory) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountHistory)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TUserAccountHistory)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AmountOrig = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AmountChange = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FreezedOrig = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FreezedChange = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OptTime = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TAccountOperateType(v)
  p.OptType = temp
}
  return nil
}

func (p *TUserAccountHistory)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TUserAccountHistory)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserAccountHistory) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAccountHistory"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountHistory) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountId: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencyType: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amountOrig", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amountOrig: ", p), err) }
  if err := oprot.WriteI64(int64(p.AmountOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amountOrig (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amountOrig: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amountChange", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amountChange: ", p), err) }
  if err := oprot.WriteI64(int64(p.AmountChange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amountChange (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amountChange: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezedOrig", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:freezedOrig: ", p), err) }
  if err := oprot.WriteI64(int64(p.FreezedOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezedOrig (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:freezedOrig: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezedChange", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:freezedChange: ", p), err) }
  if err := oprot.WriteI64(int64(p.FreezedChange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezedChange (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:freezedChange: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:optTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.OptTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:optTime: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:description: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:optType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OptType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:optType: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:appid: ", p), err) }
  return err
}

func (p *TUserAccountHistory) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:id: ", p), err) }
  return err
}

func (p *TUserAccountHistory) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountHistory(%+v)", *p)
}

// Attributes:
//  - UID
//  - Appid
//  - AdditionRate
//  - AdditionMonth
//  - Memo
//  - Legendary
type TDaySettleAdditionRate struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
  AdditionRate int32 `thrift:"additionRate,3" db:"additionRate" json:"additionRate"`
  AdditionMonth int64 `thrift:"additionMonth,4" db:"additionMonth" json:"additionMonth"`
  Memo string `thrift:"memo,5" db:"memo" json:"memo"`
  Legendary int32 `thrift:"legendary,6" db:"legendary" json:"legendary"`
}

func NewTDaySettleAdditionRate() *TDaySettleAdditionRate {
  return &TDaySettleAdditionRate{}
}


func (p *TDaySettleAdditionRate) GetUID() int64 {
  return p.UID
}

func (p *TDaySettleAdditionRate) GetAppid() int32 {
  return p.Appid
}

func (p *TDaySettleAdditionRate) GetAdditionRate() int32 {
  return p.AdditionRate
}

func (p *TDaySettleAdditionRate) GetAdditionMonth() int64 {
  return p.AdditionMonth
}

func (p *TDaySettleAdditionRate) GetMemo() string {
  return p.Memo
}

func (p *TDaySettleAdditionRate) GetLegendary() int32 {
  return p.Legendary
}
func (p *TDaySettleAdditionRate) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AdditionRate = v
}
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AdditionMonth = v
}
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Memo = v
}
  return nil
}

func (p *TDaySettleAdditionRate)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Legendary = v
}
  return nil
}

func (p *TDaySettleAdditionRate) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDaySettleAdditionRate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDaySettleAdditionRate) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRate", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:additionRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdditionRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.additionRate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:additionRate: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionMonth", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:additionMonth: ", p), err) }
  if err := oprot.WriteI64(int64(p.AdditionMonth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.additionMonth (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:additionMonth: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:memo: ", p), err) }
  if err := oprot.WriteString(string(p.Memo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:memo: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("legendary", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:legendary: ", p), err) }
  if err := oprot.WriteI32(int32(p.Legendary)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.legendary (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:legendary: ", p), err) }
  return err
}

func (p *TDaySettleAdditionRate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDaySettleAdditionRate(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Months
//  - Days
//  - Canexceed
type TDaySettleAdditionConfig struct {
  Appid int32 `thrift:"appid,1" db:"appid" json:"appid"`
  Months int32 `thrift:"months,2" db:"months" json:"months"`
  Days int32 `thrift:"days,3" db:"days" json:"days"`
  Canexceed int32 `thrift:"canexceed,4" db:"canexceed" json:"canexceed"`
}

func NewTDaySettleAdditionConfig() *TDaySettleAdditionConfig {
  return &TDaySettleAdditionConfig{}
}


func (p *TDaySettleAdditionConfig) GetAppid() int32 {
  return p.Appid
}

func (p *TDaySettleAdditionConfig) GetMonths() int32 {
  return p.Months
}

func (p *TDaySettleAdditionConfig) GetDays() int32 {
  return p.Days
}

func (p *TDaySettleAdditionConfig) GetCanexceed() int32 {
  return p.Canexceed
}
func (p *TDaySettleAdditionConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDaySettleAdditionConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TDaySettleAdditionConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Months = v
}
  return nil
}

func (p *TDaySettleAdditionConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Days = v
}
  return nil
}

func (p *TDaySettleAdditionConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Canexceed = v
}
  return nil
}

func (p *TDaySettleAdditionConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDaySettleAdditionConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDaySettleAdditionConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TDaySettleAdditionConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("months", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:months: ", p), err) }
  if err := oprot.WriteI32(int32(p.Months)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.months (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:months: ", p), err) }
  return err
}

func (p *TDaySettleAdditionConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("days", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:days: ", p), err) }
  if err := oprot.WriteI32(int32(p.Days)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.days (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:days: ", p), err) }
  return err
}

func (p *TDaySettleAdditionConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canexceed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:canexceed: ", p), err) }
  if err := oprot.WriteI32(int32(p.Canexceed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canexceed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:canexceed: ", p), err) }
  return err
}

func (p *TDaySettleAdditionConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDaySettleAdditionConfig(%+v)", *p)
}

// Attributes:
//  - UID
//  - Value
//  - Rank
type TRank struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Value int64 `thrift:"value,2" db:"value" json:"value"`
  Rank int64 `thrift:"rank,3" db:"rank" json:"rank"`
}

func NewTRank() *TRank {
  return &TRank{}
}


func (p *TRank) GetUID() int64 {
  return p.UID
}

func (p *TRank) GetValue() int64 {
  return p.Value
}

func (p *TRank) GetRank() int64 {
  return p.Rank
}
func (p *TRank) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRank)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TRank)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TRank)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Rank = v
}
  return nil
}

func (p *TRank) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRank"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRank) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TRank) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteI64(int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TRank) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rank", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rank: ", p), err) }
  if err := oprot.WriteI64(int64(p.Rank)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rank (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rank: ", p), err) }
  return err
}

func (p *TRank) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRank(%+v)", *p)
}

// Attributes:
//  - UID
//  - Seqid
//  - Amount
//  - Status
//  - CurrencyType
//  - OptTime
type TRevertModifyAccountOrder struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Seqid string `thrift:"seqid,2" db:"seqid" json:"seqid"`
  Amount int32 `thrift:"amount,3" db:"amount" json:"amount"`
  Status int32 `thrift:"status,4" db:"status" json:"status"`
  CurrencyType TCurrencyType `thrift:"currencyType,5" db:"currencyType" json:"currencyType"`
  OptTime int64 `thrift:"optTime,6" db:"optTime" json:"optTime"`
}

func NewTRevertModifyAccountOrder() *TRevertModifyAccountOrder {
  return &TRevertModifyAccountOrder{}
}


func (p *TRevertModifyAccountOrder) GetUID() int64 {
  return p.UID
}

func (p *TRevertModifyAccountOrder) GetSeqid() string {
  return p.Seqid
}

func (p *TRevertModifyAccountOrder) GetAmount() int32 {
  return p.Amount
}

func (p *TRevertModifyAccountOrder) GetStatus() int32 {
  return p.Status
}

func (p *TRevertModifyAccountOrder) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}

func (p *TRevertModifyAccountOrder) GetOptTime() int64 {
  return p.OptTime
}
func (p *TRevertModifyAccountOrder) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Seqid = v
}
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TRevertModifyAccountOrder)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OptTime = v
}
  return nil
}

func (p *TRevertModifyAccountOrder) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRevertModifyAccountOrder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRevertModifyAccountOrder) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seqid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:seqid: ", p), err) }
  if err := oprot.WriteString(string(p.Seqid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:seqid: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err) }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currencyType: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:optTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.OptTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:optTime: ", p), err) }
  return err
}

func (p *TRevertModifyAccountOrder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRevertModifyAccountOrder(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - LiveUid
//  - Owid
//  - Sid
//  - Ssid
//  - AppId
//  - Yb
//  - Period
//  - DurationType
//  - ActivateTime
//  - UsedChannel
//  - MonthRewarded
//  - YbRewarded
//  - ContractSid
//  - PayRequestId
type PinkDiamondRec struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  LiveUid int64 `thrift:"liveUid,3" db:"liveUid" json:"liveUid"`
  Owid int64 `thrift:"owid,4" db:"owid" json:"owid"`
  Sid int64 `thrift:"sid,5" db:"sid" json:"sid"`
  Ssid int64 `thrift:"ssid,6" db:"ssid" json:"ssid"`
  AppId int32 `thrift:"appId,7" db:"appId" json:"appId"`
  Yb int32 `thrift:"yb,8" db:"yb" json:"yb"`
  Period int32 `thrift:"period,9" db:"period" json:"period"`
  DurationType int32 `thrift:"durationType,10" db:"durationType" json:"durationType"`
  ActivateTime int64 `thrift:"activateTime,11" db:"activateTime" json:"activateTime"`
  UsedChannel int32 `thrift:"usedChannel,12" db:"usedChannel" json:"usedChannel"`
  MonthRewarded bool `thrift:"monthRewarded,13" db:"monthRewarded" json:"monthRewarded"`
  YbRewarded bool `thrift:"ybRewarded,14" db:"ybRewarded" json:"ybRewarded"`
  ContractSid int64 `thrift:"contractSid,15" db:"contractSid" json:"contractSid"`
  PayRequestId int64 `thrift:"payRequestId,16" db:"payRequestId" json:"payRequestId"`
}

func NewPinkDiamondRec() *PinkDiamondRec {
  return &PinkDiamondRec{}
}


func (p *PinkDiamondRec) GetID() int32 {
  return p.ID
}

func (p *PinkDiamondRec) GetUID() int64 {
  return p.UID
}

func (p *PinkDiamondRec) GetLiveUid() int64 {
  return p.LiveUid
}

func (p *PinkDiamondRec) GetOwid() int64 {
  return p.Owid
}

func (p *PinkDiamondRec) GetSid() int64 {
  return p.Sid
}

func (p *PinkDiamondRec) GetSsid() int64 {
  return p.Ssid
}

func (p *PinkDiamondRec) GetAppId() int32 {
  return p.AppId
}

func (p *PinkDiamondRec) GetYb() int32 {
  return p.Yb
}

func (p *PinkDiamondRec) GetPeriod() int32 {
  return p.Period
}

func (p *PinkDiamondRec) GetDurationType() int32 {
  return p.DurationType
}

func (p *PinkDiamondRec) GetActivateTime() int64 {
  return p.ActivateTime
}

func (p *PinkDiamondRec) GetUsedChannel() int32 {
  return p.UsedChannel
}

func (p *PinkDiamondRec) GetMonthRewarded() bool {
  return p.MonthRewarded
}

func (p *PinkDiamondRec) GetYbRewarded() bool {
  return p.YbRewarded
}

func (p *PinkDiamondRec) GetContractSid() int64 {
  return p.ContractSid
}

func (p *PinkDiamondRec) GetPayRequestId() int64 {
  return p.PayRequestId
}
func (p *PinkDiamondRec) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PinkDiamondRec)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LiveUid = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Owid = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Ssid = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Yb = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Period = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DurationType = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ActivateTime = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.UsedChannel = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.MonthRewarded = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.YbRewarded = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ContractSid = v
}
  return nil
}

func (p *PinkDiamondRec)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.PayRequestId = v
}
  return nil
}

func (p *PinkDiamondRec) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PinkDiamondRec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PinkDiamondRec) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("liveUid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:liveUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.LiveUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.liveUid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:liveUid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:owid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Owid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:owid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ssid", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ssid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ssid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ssid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appId: ", p), err) }
  if err := oprot.WriteI32(int32(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appId: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yb", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:yb: ", p), err) }
  if err := oprot.WriteI32(int32(p.Yb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yb (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:yb: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("period", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:period: ", p), err) }
  if err := oprot.WriteI32(int32(p.Period)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.period (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:period: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("durationType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:durationType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DurationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.durationType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:durationType: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("activateTime", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:activateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ActivateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.activateTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:activateTime: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usedChannel", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:usedChannel: ", p), err) }
  if err := oprot.WriteI32(int32(p.UsedChannel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usedChannel (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:usedChannel: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("monthRewarded", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:monthRewarded: ", p), err) }
  if err := oprot.WriteBool(bool(p.MonthRewarded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.monthRewarded (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:monthRewarded: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ybRewarded", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ybRewarded: ", p), err) }
  if err := oprot.WriteBool(bool(p.YbRewarded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ybRewarded (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ybRewarded: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractSid", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contractSid: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContractSid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractSid (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contractSid: ", p), err) }
  return err
}

func (p *PinkDiamondRec) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payRequestId", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:payRequestId: ", p), err) }
  if err := oprot.WriteI64(int64(p.PayRequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payRequestId (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:payRequestId: ", p), err) }
  return err
}

func (p *PinkDiamondRec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PinkDiamondRec(%+v)", *p)
}

// Attributes:
//  - UID
//  - Appid
//  - Month
//  - CurLevel
//  - NextLevel
//  - NextNeedDays
//  - CanLevelUp
//  - Legendary
//  - AdditionEnable
//  - AdditionRates
//  - CurLevelIndex
//  - NextLevelIndex
//  - IsMaxLevel
//  - OtherMaxThanCurLevelIndexes
//  - OtherMaxThanCurLevels
//  - OtherMaxThanCurLevelNeedDays
//  - CanLevelUpToOtherMaxThanCurLevels
//  - Days
//  - CurLevelString
//  - AdditionRateLevels
//  - AdditionRateGEDays
//  - AdditionRateDayCounts
type TDaySettleAdditionResultInfo struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  Month int64 `thrift:"month,3" db:"month" json:"month"`
  CurLevel int32 `thrift:"curLevel,4" db:"curLevel" json:"curLevel"`
  NextLevel int32 `thrift:"nextLevel,5" db:"nextLevel" json:"nextLevel"`
  NextNeedDays int32 `thrift:"nextNeedDays,6" db:"nextNeedDays" json:"nextNeedDays"`
  CanLevelUp bool `thrift:"canLevelUp,7" db:"canLevelUp" json:"canLevelUp"`
  Legendary bool `thrift:"legendary,8" db:"legendary" json:"legendary"`
  AdditionEnable bool `thrift:"additionEnable,9" db:"additionEnable" json:"additionEnable"`
  AdditionRates []int32 `thrift:"additionRates,10" db:"additionRates" json:"additionRates"`
  CurLevelIndex int32 `thrift:"curLevelIndex,11" db:"curLevelIndex" json:"curLevelIndex"`
  NextLevelIndex int32 `thrift:"nextLevelIndex,12" db:"nextLevelIndex" json:"nextLevelIndex"`
  IsMaxLevel bool `thrift:"isMaxLevel,13" db:"isMaxLevel" json:"isMaxLevel"`
  OtherMaxThanCurLevelIndexes []int32 `thrift:"otherMaxThanCurLevelIndexes,14" db:"otherMaxThanCurLevelIndexes" json:"otherMaxThanCurLevelIndexes"`
  OtherMaxThanCurLevels []int32 `thrift:"otherMaxThanCurLevels,15" db:"otherMaxThanCurLevels" json:"otherMaxThanCurLevels"`
  OtherMaxThanCurLevelNeedDays []int32 `thrift:"otherMaxThanCurLevelNeedDays,16" db:"otherMaxThanCurLevelNeedDays" json:"otherMaxThanCurLevelNeedDays"`
  CanLevelUpToOtherMaxThanCurLevels []bool `thrift:"canLevelUpToOtherMaxThanCurLevels,17" db:"canLevelUpToOtherMaxThanCurLevels" json:"canLevelUpToOtherMaxThanCurLevels"`
  Days int32 `thrift:"days,18" db:"days" json:"days"`
  CurLevelString string `thrift:"curLevelString,19" db:"curLevelString" json:"curLevelString"`
  AdditionRateLevels []string `thrift:"additionRateLevels,20" db:"additionRateLevels" json:"additionRateLevels"`
  AdditionRateGEDays []int32 `thrift:"additionRateGEDays,21" db:"additionRateGEDays" json:"additionRateGEDays"`
  AdditionRateDayCounts []int32 `thrift:"additionRateDayCounts,22" db:"additionRateDayCounts" json:"additionRateDayCounts"`
}

func NewTDaySettleAdditionResultInfo() *TDaySettleAdditionResultInfo {
  return &TDaySettleAdditionResultInfo{}
}


func (p *TDaySettleAdditionResultInfo) GetUID() int64 {
  return p.UID
}

func (p *TDaySettleAdditionResultInfo) GetAppid() TAppId {
  return p.Appid
}

func (p *TDaySettleAdditionResultInfo) GetMonth() int64 {
  return p.Month
}

func (p *TDaySettleAdditionResultInfo) GetCurLevel() int32 {
  return p.CurLevel
}

func (p *TDaySettleAdditionResultInfo) GetNextLevel() int32 {
  return p.NextLevel
}

func (p *TDaySettleAdditionResultInfo) GetNextNeedDays() int32 {
  return p.NextNeedDays
}

func (p *TDaySettleAdditionResultInfo) GetCanLevelUp() bool {
  return p.CanLevelUp
}

func (p *TDaySettleAdditionResultInfo) GetLegendary() bool {
  return p.Legendary
}

func (p *TDaySettleAdditionResultInfo) GetAdditionEnable() bool {
  return p.AdditionEnable
}

func (p *TDaySettleAdditionResultInfo) GetAdditionRates() []int32 {
  return p.AdditionRates
}

func (p *TDaySettleAdditionResultInfo) GetCurLevelIndex() int32 {
  return p.CurLevelIndex
}

func (p *TDaySettleAdditionResultInfo) GetNextLevelIndex() int32 {
  return p.NextLevelIndex
}

func (p *TDaySettleAdditionResultInfo) GetIsMaxLevel() bool {
  return p.IsMaxLevel
}

func (p *TDaySettleAdditionResultInfo) GetOtherMaxThanCurLevelIndexes() []int32 {
  return p.OtherMaxThanCurLevelIndexes
}

func (p *TDaySettleAdditionResultInfo) GetOtherMaxThanCurLevels() []int32 {
  return p.OtherMaxThanCurLevels
}

func (p *TDaySettleAdditionResultInfo) GetOtherMaxThanCurLevelNeedDays() []int32 {
  return p.OtherMaxThanCurLevelNeedDays
}

func (p *TDaySettleAdditionResultInfo) GetCanLevelUpToOtherMaxThanCurLevels() []bool {
  return p.CanLevelUpToOtherMaxThanCurLevels
}

func (p *TDaySettleAdditionResultInfo) GetDays() int32 {
  return p.Days
}

func (p *TDaySettleAdditionResultInfo) GetCurLevelString() string {
  return p.CurLevelString
}

func (p *TDaySettleAdditionResultInfo) GetAdditionRateLevels() []string {
  return p.AdditionRateLevels
}

func (p *TDaySettleAdditionResultInfo) GetAdditionRateGEDays() []int32 {
  return p.AdditionRateGEDays
}

func (p *TDaySettleAdditionResultInfo) GetAdditionRateDayCounts() []int32 {
  return p.AdditionRateDayCounts
}
func (p *TDaySettleAdditionResultInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Month = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CurLevel = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NextLevel = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NextNeedDays = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CanLevelUp = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Legendary = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AdditionEnable = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.AdditionRates =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.AdditionRates = append(p.AdditionRates, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CurLevelIndex = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NextLevelIndex = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IsMaxLevel = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.OtherMaxThanCurLevelIndexes =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.OtherMaxThanCurLevelIndexes = append(p.OtherMaxThanCurLevelIndexes, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.OtherMaxThanCurLevels =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.OtherMaxThanCurLevels = append(p.OtherMaxThanCurLevels, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.OtherMaxThanCurLevelNeedDays =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.OtherMaxThanCurLevelNeedDays = append(p.OtherMaxThanCurLevelNeedDays, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.CanLevelUpToOtherMaxThanCurLevels =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.CanLevelUpToOtherMaxThanCurLevels = append(p.CanLevelUpToOtherMaxThanCurLevels, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Days = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.CurLevelString = v
}
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AdditionRateLevels =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.AdditionRateLevels = append(p.AdditionRateLevels, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField21(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.AdditionRateGEDays =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.AdditionRateGEDays = append(p.AdditionRateGEDays, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo)  ReadField22(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.AdditionRateDayCounts =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.AdditionRateDayCounts = append(p.AdditionRateDayCounts, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDaySettleAdditionResultInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDaySettleAdditionResultInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDaySettleAdditionResultInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("month", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:month: ", p), err) }
  if err := oprot.WriteI64(int64(p.Month)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.month (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:month: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("curLevel", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:curLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.curLevel (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:curLevel: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nextLevel", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nextLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.NextLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nextLevel (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nextLevel: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nextNeedDays", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nextNeedDays: ", p), err) }
  if err := oprot.WriteI32(int32(p.NextNeedDays)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nextNeedDays (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nextNeedDays: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canLevelUp", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:canLevelUp: ", p), err) }
  if err := oprot.WriteBool(bool(p.CanLevelUp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.canLevelUp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:canLevelUp: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("legendary", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:legendary: ", p), err) }
  if err := oprot.WriteBool(bool(p.Legendary)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.legendary (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:legendary: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionEnable", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:additionEnable: ", p), err) }
  if err := oprot.WriteBool(bool(p.AdditionEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.additionEnable (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:additionEnable: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRates", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:additionRates: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AdditionRates)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdditionRates {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:additionRates: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("curLevelIndex", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:curLevelIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurLevelIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.curLevelIndex (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:curLevelIndex: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nextLevelIndex", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:nextLevelIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.NextLevelIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nextLevelIndex (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:nextLevelIndex: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isMaxLevel", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isMaxLevel: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsMaxLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isMaxLevel (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isMaxLevel: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("otherMaxThanCurLevelIndexes", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:otherMaxThanCurLevelIndexes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.OtherMaxThanCurLevelIndexes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OtherMaxThanCurLevelIndexes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:otherMaxThanCurLevelIndexes: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("otherMaxThanCurLevels", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:otherMaxThanCurLevels: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.OtherMaxThanCurLevels)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OtherMaxThanCurLevels {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:otherMaxThanCurLevels: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("otherMaxThanCurLevelNeedDays", thrift.LIST, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:otherMaxThanCurLevelNeedDays: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.OtherMaxThanCurLevelNeedDays)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OtherMaxThanCurLevelNeedDays {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:otherMaxThanCurLevelNeedDays: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canLevelUpToOtherMaxThanCurLevels", thrift.LIST, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:canLevelUpToOtherMaxThanCurLevels: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.CanLevelUpToOtherMaxThanCurLevels)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CanLevelUpToOtherMaxThanCurLevels {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:canLevelUpToOtherMaxThanCurLevels: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("days", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:days: ", p), err) }
  if err := oprot.WriteI32(int32(p.Days)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.days (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:days: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("curLevelString", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:curLevelString: ", p), err) }
  if err := oprot.WriteString(string(p.CurLevelString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.curLevelString (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:curLevelString: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRateLevels", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:additionRateLevels: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.AdditionRateLevels)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdditionRateLevels {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:additionRateLevels: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRateGEDays", thrift.LIST, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:additionRateGEDays: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AdditionRateGEDays)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdditionRateGEDays {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:additionRateGEDays: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRateDayCounts", thrift.LIST, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:additionRateDayCounts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AdditionRateDayCounts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdditionRateDayCounts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:additionRateDayCounts: ", p), err) }
  return err
}

func (p *TDaySettleAdditionResultInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDaySettleAdditionResultInfo(%+v)", *p)
}

// Attributes:
//  - Page
//  - Pagesize
//  - TotalElement
//  - TotalPage
//  - Content
//  - Extend
//  - Code
//  - Message
type TQueryPageInfo struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,2" db:"pagesize" json:"pagesize"`
  TotalElement int32 `thrift:"totalElement,3" db:"totalElement" json:"totalElement"`
  TotalPage int32 `thrift:"totalPage,4" db:"totalPage" json:"totalPage"`
  Content []map[string]string `thrift:"content,5" db:"content" json:"content"`
  Extend map[string]string `thrift:"extend,6" db:"extend" json:"extend"`
  Code int32 `thrift:"code,7" db:"code" json:"code"`
  Message string `thrift:"message,8" db:"message" json:"message"`
}

func NewTQueryPageInfo() *TQueryPageInfo {
  return &TQueryPageInfo{}
}


func (p *TQueryPageInfo) GetPage() int32 {
  return p.Page
}

func (p *TQueryPageInfo) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TQueryPageInfo) GetTotalElement() int32 {
  return p.TotalElement
}

func (p *TQueryPageInfo) GetTotalPage() int32 {
  return p.TotalPage
}

func (p *TQueryPageInfo) GetContent() []map[string]string {
  return p.Content
}

func (p *TQueryPageInfo) GetExtend() map[string]string {
  return p.Extend
}

func (p *TQueryPageInfo) GetCode() int32 {
  return p.Code
}

func (p *TQueryPageInfo) GetMessage() string {
  return p.Message
}
func (p *TQueryPageInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TQueryPageInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TQueryPageInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TQueryPageInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalElement = v
}
  return nil
}

func (p *TQueryPageInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalPage = v
}
  return nil
}

func (p *TQueryPageInfo)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Content =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem8 :=  tMap
    for i := 0; i < size; i ++ {
var _key9 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key9 = v
}
var _val10 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val10 = v
}
      _elem8[_key9] = _val10
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Content = append(p.Content, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TQueryPageInfo)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Extend[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TQueryPageInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TQueryPageInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TQueryPageInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TQueryPageInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TQueryPageInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pagesize: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalElement", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalElement: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalElement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalElement (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalElement: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:content: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Content)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Content {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:content: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extend", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extend: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:code: ", p), err) }
  return err
}

func (p *TQueryPageInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:message: ", p), err) }
  return err
}

func (p *TQueryPageInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TQueryPageInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - Appid
//  - ActId
//  - CurrencyType
//  - Amount
//  - Freezed
//  - ValidTime
//  - Version
//  - IsExchange
//  - ExchangeTime
type TExtraUserAccount struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Appid int32 `thrift:"appid,3" db:"appid" json:"appid"`
  ActId int64 `thrift:"actId,4" db:"actId" json:"actId"`
  CurrencyType int32 `thrift:"currencyType,5" db:"currencyType" json:"currencyType"`
  Amount int64 `thrift:"amount,6" db:"amount" json:"amount"`
  Freezed int64 `thrift:"freezed,7" db:"freezed" json:"freezed"`
  ValidTime int64 `thrift:"validTime,8" db:"validTime" json:"validTime"`
  Version int64 `thrift:"version,9" db:"version" json:"version"`
  IsExchange int8 `thrift:"isExchange,10" db:"isExchange" json:"isExchange"`
  ExchangeTime int64 `thrift:"exchangeTime,11" db:"exchangeTime" json:"exchangeTime"`
}

func NewTExtraUserAccount() *TExtraUserAccount {
  return &TExtraUserAccount{}
}


func (p *TExtraUserAccount) GetID() int64 {
  return p.ID
}

func (p *TExtraUserAccount) GetUID() int64 {
  return p.UID
}

func (p *TExtraUserAccount) GetAppid() int32 {
  return p.Appid
}

func (p *TExtraUserAccount) GetActId() int64 {
  return p.ActId
}

func (p *TExtraUserAccount) GetCurrencyType() int32 {
  return p.CurrencyType
}

func (p *TExtraUserAccount) GetAmount() int64 {
  return p.Amount
}

func (p *TExtraUserAccount) GetFreezed() int64 {
  return p.Freezed
}

func (p *TExtraUserAccount) GetValidTime() int64 {
  return p.ValidTime
}

func (p *TExtraUserAccount) GetVersion() int64 {
  return p.Version
}

func (p *TExtraUserAccount) GetIsExchange() int8 {
  return p.IsExchange
}

func (p *TExtraUserAccount) GetExchangeTime() int64 {
  return p.ExchangeTime
}
func (p *TExtraUserAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExtraUserAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ActId = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrencyType = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Freezed = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ValidTime = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TExtraUserAccount)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := int8(v)
  p.IsExchange = temp
}
  return nil
}

func (p *TExtraUserAccount)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ExchangeTime = v
}
  return nil
}

func (p *TExtraUserAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExtraUserAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExtraUserAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("actId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:actId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ActId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.actId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:actId: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currencyType: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezed", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:freezed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Freezed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezed (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:freezed: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:validTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ValidTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:validTime: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:version: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isExchange", thrift.BYTE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isExchange: ", p), err) }
  if err := oprot.WriteByte(int8(p.IsExchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isExchange (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isExchange: ", p), err) }
  return err
}

func (p *TExtraUserAccount) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchangeTime", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:exchangeTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExchangeTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchangeTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:exchangeTime: ", p), err) }
  return err
}

func (p *TExtraUserAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExtraUserAccount(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - Sid
//  - Appid
//  - CurrencyType
//  - Amount
type TChannelAccountCumulative struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Sid int64 `thrift:"sid,3" db:"sid" json:"sid"`
  Appid int32 `thrift:"appid,4" db:"appid" json:"appid"`
  CurrencyType int32 `thrift:"currencyType,5" db:"currencyType" json:"currencyType"`
  Amount int64 `thrift:"amount,6" db:"amount" json:"amount"`
}

func NewTChannelAccountCumulative() *TChannelAccountCumulative {
  return &TChannelAccountCumulative{}
}


func (p *TChannelAccountCumulative) GetID() int64 {
  return p.ID
}

func (p *TChannelAccountCumulative) GetUID() int64 {
  return p.UID
}

func (p *TChannelAccountCumulative) GetSid() int64 {
  return p.Sid
}

func (p *TChannelAccountCumulative) GetAppid() int32 {
  return p.Appid
}

func (p *TChannelAccountCumulative) GetCurrencyType() int32 {
  return p.CurrencyType
}

func (p *TChannelAccountCumulative) GetAmount() int64 {
  return p.Amount
}
func (p *TChannelAccountCumulative) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChannelAccountCumulative)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TChannelAccountCumulative)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TChannelAccountCumulative)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TChannelAccountCumulative)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TChannelAccountCumulative)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrencyType = v
}
  return nil
}

func (p *TChannelAccountCumulative)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TChannelAccountCumulative) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChannelAccountCumulative"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChannelAccountCumulative) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sid: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appid: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currencyType: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err) }
  return err
}

func (p *TChannelAccountCumulative) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChannelAccountCumulative(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - CurrencyType
//  - TotalAmount
//  - Amount
//  - IsFreezed
//  - Appid
//  - CreateTime
//  - StartTime
//  - EndTime
//  - Version
type TUserAccountPeriod struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  CurrencyType int32 `thrift:"currencyType,3" db:"currencyType" json:"currencyType"`
  TotalAmount int64 `thrift:"totalAmount,4" db:"totalAmount" json:"totalAmount"`
  Amount int64 `thrift:"amount,5" db:"amount" json:"amount"`
  IsFreezed int32 `thrift:"isFreezed,6" db:"isFreezed" json:"isFreezed"`
  Appid int32 `thrift:"appid,7" db:"appid" json:"appid"`
  CreateTime int64 `thrift:"createTime,8" db:"createTime" json:"createTime"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,10" db:"endTime" json:"endTime"`
  Version int64 `thrift:"version,11" db:"version" json:"version"`
}

func NewTUserAccountPeriod() *TUserAccountPeriod {
  return &TUserAccountPeriod{}
}


func (p *TUserAccountPeriod) GetID() int64 {
  return p.ID
}

func (p *TUserAccountPeriod) GetUID() int64 {
  return p.UID
}

func (p *TUserAccountPeriod) GetCurrencyType() int32 {
  return p.CurrencyType
}

func (p *TUserAccountPeriod) GetTotalAmount() int64 {
  return p.TotalAmount
}

func (p *TUserAccountPeriod) GetAmount() int64 {
  return p.Amount
}

func (p *TUserAccountPeriod) GetIsFreezed() int32 {
  return p.IsFreezed
}

func (p *TUserAccountPeriod) GetAppid() int32 {
  return p.Appid
}

func (p *TUserAccountPeriod) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *TUserAccountPeriod) GetStartTime() int64 {
  return p.StartTime
}

func (p *TUserAccountPeriod) GetEndTime() int64 {
  return p.EndTime
}

func (p *TUserAccountPeriod) GetVersion() int64 {
  return p.Version
}
func (p *TUserAccountPeriod) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountPeriod)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrencyType = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsFreezed = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TUserAccountPeriod)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TUserAccountPeriod) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAccountPeriod"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountPeriod) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencyType: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAmount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalAmount: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAmount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalAmount: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isFreezed", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isFreezed: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsFreezed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isFreezed (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isFreezed: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appid: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endTime: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:version: ", p), err) }
  return err
}

func (p *TUserAccountPeriod) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountPeriod(%+v)", *p)
}

// Attributes:
//  - ID
//  - AccountId
//  - UID
//  - CurrencyType
//  - AmountOrig
//  - AmountChange
//  - FreezedOrig
//  - FreezedChange
//  - OptType
//  - OptTime
//  - Description
//  - UserIp
//  - ActId
//  - Appid
//  - SeqId
//  - ValidTime
//  - Platform
//  - Device
type TExtraUserAccountHistory struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  AccountId int64 `thrift:"accountId,2" db:"accountId" json:"accountId"`
  UID int64 `thrift:"uid,3" db:"uid" json:"uid"`
  CurrencyType int32 `thrift:"currencyType,4" db:"currencyType" json:"currencyType"`
  AmountOrig int64 `thrift:"amountOrig,5" db:"amountOrig" json:"amountOrig"`
  AmountChange int64 `thrift:"amountChange,6" db:"amountChange" json:"amountChange"`
  FreezedOrig int64 `thrift:"freezedOrig,7" db:"freezedOrig" json:"freezedOrig"`
  FreezedChange int64 `thrift:"freezedChange,8" db:"freezedChange" json:"freezedChange"`
  OptType int32 `thrift:"optType,9" db:"optType" json:"optType"`
  OptTime int64 `thrift:"optTime,10" db:"optTime" json:"optTime"`
  Description string `thrift:"description,11" db:"description" json:"description"`
  UserIp string `thrift:"userIp,12" db:"userIp" json:"userIp"`
  ActId int64 `thrift:"actId,13" db:"actId" json:"actId"`
  Appid int32 `thrift:"appid,14" db:"appid" json:"appid"`
  SeqId string `thrift:"seqId,15" db:"seqId" json:"seqId"`
  ValidTime int64 `thrift:"validTime,16" db:"validTime" json:"validTime"`
  Platform string `thrift:"platform,17" db:"platform" json:"platform"`
  Device string `thrift:"device,18" db:"device" json:"device"`
}

func NewTExtraUserAccountHistory() *TExtraUserAccountHistory {
  return &TExtraUserAccountHistory{}
}


func (p *TExtraUserAccountHistory) GetID() int64 {
  return p.ID
}

func (p *TExtraUserAccountHistory) GetAccountId() int64 {
  return p.AccountId
}

func (p *TExtraUserAccountHistory) GetUID() int64 {
  return p.UID
}

func (p *TExtraUserAccountHistory) GetCurrencyType() int32 {
  return p.CurrencyType
}

func (p *TExtraUserAccountHistory) GetAmountOrig() int64 {
  return p.AmountOrig
}

func (p *TExtraUserAccountHistory) GetAmountChange() int64 {
  return p.AmountChange
}

func (p *TExtraUserAccountHistory) GetFreezedOrig() int64 {
  return p.FreezedOrig
}

func (p *TExtraUserAccountHistory) GetFreezedChange() int64 {
  return p.FreezedChange
}

func (p *TExtraUserAccountHistory) GetOptType() int32 {
  return p.OptType
}

func (p *TExtraUserAccountHistory) GetOptTime() int64 {
  return p.OptTime
}

func (p *TExtraUserAccountHistory) GetDescription() string {
  return p.Description
}

func (p *TExtraUserAccountHistory) GetUserIp() string {
  return p.UserIp
}

func (p *TExtraUserAccountHistory) GetActId() int64 {
  return p.ActId
}

func (p *TExtraUserAccountHistory) GetAppid() int32 {
  return p.Appid
}

func (p *TExtraUserAccountHistory) GetSeqId() string {
  return p.SeqId
}

func (p *TExtraUserAccountHistory) GetValidTime() int64 {
  return p.ValidTime
}

func (p *TExtraUserAccountHistory) GetPlatform() string {
  return p.Platform
}

func (p *TExtraUserAccountHistory) GetDevice() string {
  return p.Device
}
func (p *TExtraUserAccountHistory) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountId = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CurrencyType = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AmountOrig = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AmountChange = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FreezedOrig = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FreezedChange = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.OptType = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OptTime = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.UserIp = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ActId = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SeqId = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ValidTime = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Platform = v
}
  return nil
}

func (p *TExtraUserAccountHistory)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Device = v
}
  return nil
}

func (p *TExtraUserAccountHistory) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExtraUserAccountHistory"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExtraUserAccountHistory) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AccountId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountId: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uid: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currencyType: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amountOrig", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amountOrig: ", p), err) }
  if err := oprot.WriteI64(int64(p.AmountOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amountOrig (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amountOrig: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amountChange", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amountChange: ", p), err) }
  if err := oprot.WriteI64(int64(p.AmountChange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amountChange (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amountChange: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezedOrig", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:freezedOrig: ", p), err) }
  if err := oprot.WriteI64(int64(p.FreezedOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezedOrig (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:freezedOrig: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezedChange", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:freezedChange: ", p), err) }
  if err := oprot.WriteI64(int64(p.FreezedChange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezedChange (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:freezedChange: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optType", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:optType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OptType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:optType: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:optTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.OptTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:optTime: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:description: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userIp", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:userIp: ", p), err) }
  if err := oprot.WriteString(string(p.UserIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userIp (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:userIp: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("actId", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:actId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ActId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.actId (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:actId: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:appid: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seqId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:seqId: ", p), err) }
  if err := oprot.WriteString(string(p.SeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:seqId: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validTime", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:validTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ValidTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validTime (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:validTime: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("platform", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:platform: ", p), err) }
  if err := oprot.WriteString(string(p.Platform)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.platform (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:platform: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:device: ", p), err) }
  if err := oprot.WriteString(string(p.Device)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:device: ", p), err) }
  return err
}

func (p *TExtraUserAccountHistory) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExtraUserAccountHistory(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - ContributeUid
//  - Sid
//  - Income
//  - IncomeRate
//  - RealIncome
//  - OptTime
//  - RevenueDate
//  - RevenueType
//  - ExchageLevel
//  - Appid
//  - SrcType
//  - AdditionRate
//  - AllIncome
//  - Level
//  - BonusRate
//  - BonusIncome
//  - BonusStatus
type TRevenueRecord struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  ContributeUid int64 `thrift:"contributeUid,3" db:"contributeUid" json:"contributeUid"`
  Sid int64 `thrift:"sid,4" db:"sid" json:"sid"`
  Income float64 `thrift:"income,5" db:"income" json:"income"`
  IncomeRate float64 `thrift:"incomeRate,6" db:"incomeRate" json:"incomeRate"`
  RealIncome float64 `thrift:"realIncome,7" db:"realIncome" json:"realIncome"`
  OptTime int64 `thrift:"optTime,8" db:"optTime" json:"optTime"`
  RevenueDate int64 `thrift:"revenueDate,9" db:"revenueDate" json:"revenueDate"`
  RevenueType int32 `thrift:"revenueType,10" db:"revenueType" json:"revenueType"`
  ExchageLevel int32 `thrift:"exchageLevel,11" db:"exchageLevel" json:"exchageLevel"`
  Appid int32 `thrift:"appid,12" db:"appid" json:"appid"`
  SrcType int32 `thrift:"srcType,13" db:"srcType" json:"srcType"`
  AdditionRate int32 `thrift:"additionRate,14" db:"additionRate" json:"additionRate"`
  AllIncome float64 `thrift:"allIncome,15" db:"allIncome" json:"allIncome"`
  Level string `thrift:"level,16" db:"level" json:"level"`
  BonusRate int32 `thrift:"bonusRate,17" db:"bonusRate" json:"bonusRate"`
  BonusIncome float64 `thrift:"bonusIncome,18" db:"bonusIncome" json:"bonusIncome"`
  BonusStatus int32 `thrift:"bonusStatus,19" db:"bonusStatus" json:"bonusStatus"`
}

func NewTRevenueRecord() *TRevenueRecord {
  return &TRevenueRecord{}
}


func (p *TRevenueRecord) GetID() int64 {
  return p.ID
}

func (p *TRevenueRecord) GetUID() int64 {
  return p.UID
}

func (p *TRevenueRecord) GetContributeUid() int64 {
  return p.ContributeUid
}

func (p *TRevenueRecord) GetSid() int64 {
  return p.Sid
}

func (p *TRevenueRecord) GetIncome() float64 {
  return p.Income
}

func (p *TRevenueRecord) GetIncomeRate() float64 {
  return p.IncomeRate
}

func (p *TRevenueRecord) GetRealIncome() float64 {
  return p.RealIncome
}

func (p *TRevenueRecord) GetOptTime() int64 {
  return p.OptTime
}

func (p *TRevenueRecord) GetRevenueDate() int64 {
  return p.RevenueDate
}

func (p *TRevenueRecord) GetRevenueType() int32 {
  return p.RevenueType
}

func (p *TRevenueRecord) GetExchageLevel() int32 {
  return p.ExchageLevel
}

func (p *TRevenueRecord) GetAppid() int32 {
  return p.Appid
}

func (p *TRevenueRecord) GetSrcType() int32 {
  return p.SrcType
}

func (p *TRevenueRecord) GetAdditionRate() int32 {
  return p.AdditionRate
}

func (p *TRevenueRecord) GetAllIncome() float64 {
  return p.AllIncome
}

func (p *TRevenueRecord) GetLevel() string {
  return p.Level
}

func (p *TRevenueRecord) GetBonusRate() int32 {
  return p.BonusRate
}

func (p *TRevenueRecord) GetBonusIncome() float64 {
  return p.BonusIncome
}

func (p *TRevenueRecord) GetBonusStatus() int32 {
  return p.BonusStatus
}
func (p *TRevenueRecord) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRevenueRecord)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ContributeUid = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Income = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncomeRate = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RealIncome = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OptTime = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RevenueDate = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RevenueType = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ExchageLevel = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.SrcType = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.AdditionRate = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.AllIncome = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.BonusRate = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.BonusIncome = v
}
  return nil
}

func (p *TRevenueRecord)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.BonusStatus = v
}
  return nil
}

func (p *TRevenueRecord) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRevenueRecord"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRevenueRecord) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contributeUid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contributeUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContributeUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contributeUid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contributeUid: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sid: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("income", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:income: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Income)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.income (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:income: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("incomeRate", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomeRate: ", p), err) }
  if err := oprot.WriteDouble(float64(p.IncomeRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.incomeRate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomeRate: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("realIncome", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:realIncome: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RealIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.realIncome (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:realIncome: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:optTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.OptTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:optTime: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenueDate", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:revenueDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.RevenueDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenueDate (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:revenueDate: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenueType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:revenueType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RevenueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenueType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:revenueType: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchageLevel", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:exchageLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExchageLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchageLevel (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:exchageLevel: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:appid: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:srcType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SrcType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:srcType: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("additionRate", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:additionRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdditionRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.additionRate (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:additionRate: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allIncome", thrift.DOUBLE, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:allIncome: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AllIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allIncome (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:allIncome: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:level: ", p), err) }
  if err := oprot.WriteString(string(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:level: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bonusRate", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:bonusRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.BonusRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bonusRate (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:bonusRate: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bonusIncome", thrift.DOUBLE, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:bonusIncome: ", p), err) }
  if err := oprot.WriteDouble(float64(p.BonusIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bonusIncome (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:bonusIncome: ", p), err) }
  return err
}

func (p *TRevenueRecord) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bonusStatus", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:bonusStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.BonusStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bonusStatus (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:bonusStatus: ", p), err) }
  return err
}

func (p *TRevenueRecord) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRevenueRecord(%+v)", *p)
}

// Attributes:
//  - Income
//  - RealIncome
type TRevenueData struct {
  Income int64 `thrift:"income,1" db:"income" json:"income"`
  RealIncome int64 `thrift:"realIncome,2" db:"realIncome" json:"realIncome"`
}

func NewTRevenueData() *TRevenueData {
  return &TRevenueData{}
}


func (p *TRevenueData) GetIncome() int64 {
  return p.Income
}

func (p *TRevenueData) GetRealIncome() int64 {
  return p.RealIncome
}
func (p *TRevenueData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRevenueData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Income = v
}
  return nil
}

func (p *TRevenueData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RealIncome = v
}
  return nil
}

func (p *TRevenueData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRevenueData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRevenueData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("income", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:income: ", p), err) }
  if err := oprot.WriteI64(int64(p.Income)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.income (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:income: ", p), err) }
  return err
}

func (p *TRevenueData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("realIncome", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:realIncome: ", p), err) }
  if err := oprot.WriteI64(int64(p.RealIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.realIncome (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:realIncome: ", p), err) }
  return err
}

func (p *TRevenueData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRevenueData(%+v)", *p)
}

// Attributes:
//  - UID
//  - Amount
//  - CurrencyType
//  - Appid
//  - Seq
//  - CreateTime
//  - Finishtime
//  - Status
type TCurrencyIssue struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Amount int64 `thrift:"amount,2" db:"amount" json:"amount"`
  CurrencyType int32 `thrift:"currencyType,3" db:"currencyType" json:"currencyType"`
  Appid int32 `thrift:"appid,4" db:"appid" json:"appid"`
  Seq string `thrift:"seq,5" db:"seq" json:"seq"`
  CreateTime int64 `thrift:"createTime,6" db:"createTime" json:"createTime"`
  Finishtime int64 `thrift:"finishtime,7" db:"finishtime" json:"finishtime"`
  Status int32 `thrift:"status,8" db:"status" json:"status"`
}

func NewTCurrencyIssue() *TCurrencyIssue {
  return &TCurrencyIssue{}
}


func (p *TCurrencyIssue) GetUID() int64 {
  return p.UID
}

func (p *TCurrencyIssue) GetAmount() int64 {
  return p.Amount
}

func (p *TCurrencyIssue) GetCurrencyType() int32 {
  return p.CurrencyType
}

func (p *TCurrencyIssue) GetAppid() int32 {
  return p.Appid
}

func (p *TCurrencyIssue) GetSeq() string {
  return p.Seq
}

func (p *TCurrencyIssue) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *TCurrencyIssue) GetFinishtime() int64 {
  return p.Finishtime
}

func (p *TCurrencyIssue) GetStatus() int32 {
  return p.Status
}
func (p *TCurrencyIssue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyIssue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrencyType = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Finishtime = v
}
  return nil
}

func (p *TCurrencyIssue)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TCurrencyIssue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCurrencyIssue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyIssue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencyType: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appid: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:seq: ", p), err) }
  if err := oprot.WriteString(string(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:seq: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createTime: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("finishtime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:finishtime: ", p), err) }
  if err := oprot.WriteI64(int64(p.Finishtime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.finishtime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:finishtime: ", p), err) }
  return err
}

func (p *TCurrencyIssue) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TCurrencyIssue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyIssue(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - SettleDate
//  - ApplyTime
//  - ApplyRealAmount
//  - ExchangeSalaryAmount
//  - Result_
//  - Appid
//  - DestCurrencyType
//  - UserType
//  - CompensationAmount
//  - ReOrderFlag
//  - SettleType
//  - WithdrawAccountType
//  - WithdrawAccount
//  - ContractSid
//  - ViolationPunishLevel
//  - ViolationPunishAmount
//  - ResultMsg
type TMonthSettleApply struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  SettleDate int64 `thrift:"settleDate,3" db:"settleDate" json:"settleDate"`
  ApplyTime int64 `thrift:"applyTime,4" db:"applyTime" json:"applyTime"`
  ApplyRealAmount float64 `thrift:"applyRealAmount,5" db:"applyRealAmount" json:"applyRealAmount"`
  ExchangeSalaryAmount float64 `thrift:"exchangeSalaryAmount,6" db:"exchangeSalaryAmount" json:"exchangeSalaryAmount"`
  Result_ int32 `thrift:"result,7" db:"result" json:"result"`
  Appid int32 `thrift:"appid,8" db:"appid" json:"appid"`
  DestCurrencyType int32 `thrift:"destCurrencyType,9" db:"destCurrencyType" json:"destCurrencyType"`
  UserType TUserType `thrift:"userType,10" db:"userType" json:"userType"`
  CompensationAmount float64 `thrift:"compensationAmount,11" db:"compensationAmount" json:"compensationAmount"`
  ReOrderFlag int32 `thrift:"reOrderFlag,12" db:"reOrderFlag" json:"reOrderFlag"`
  SettleType int32 `thrift:"settleType,13" db:"settleType" json:"settleType"`
  WithdrawAccountType int32 `thrift:"withdrawAccountType,14" db:"withdrawAccountType" json:"withdrawAccountType"`
  WithdrawAccount string `thrift:"withdrawAccount,15" db:"withdrawAccount" json:"withdrawAccount"`
  ContractSid int64 `thrift:"contractSid,16" db:"contractSid" json:"contractSid"`
  ViolationPunishLevel int32 `thrift:"violationPunishLevel,17" db:"violationPunishLevel" json:"violationPunishLevel"`
  ViolationPunishAmount float64 `thrift:"violationPunishAmount,18" db:"violationPunishAmount" json:"violationPunishAmount"`
  ResultMsg string `thrift:"resultMsg,19" db:"resultMsg" json:"resultMsg"`
}

func NewTMonthSettleApply() *TMonthSettleApply {
  return &TMonthSettleApply{}
}


func (p *TMonthSettleApply) GetID() int64 {
  return p.ID
}

func (p *TMonthSettleApply) GetUID() int64 {
  return p.UID
}

func (p *TMonthSettleApply) GetSettleDate() int64 {
  return p.SettleDate
}

func (p *TMonthSettleApply) GetApplyTime() int64 {
  return p.ApplyTime
}

func (p *TMonthSettleApply) GetApplyRealAmount() float64 {
  return p.ApplyRealAmount
}

func (p *TMonthSettleApply) GetExchangeSalaryAmount() float64 {
  return p.ExchangeSalaryAmount
}

func (p *TMonthSettleApply) GetResult_() int32 {
  return p.Result_
}

func (p *TMonthSettleApply) GetAppid() int32 {
  return p.Appid
}

func (p *TMonthSettleApply) GetDestCurrencyType() int32 {
  return p.DestCurrencyType
}

func (p *TMonthSettleApply) GetUserType() TUserType {
  return p.UserType
}

func (p *TMonthSettleApply) GetCompensationAmount() float64 {
  return p.CompensationAmount
}

func (p *TMonthSettleApply) GetReOrderFlag() int32 {
  return p.ReOrderFlag
}

func (p *TMonthSettleApply) GetSettleType() int32 {
  return p.SettleType
}

func (p *TMonthSettleApply) GetWithdrawAccountType() int32 {
  return p.WithdrawAccountType
}

func (p *TMonthSettleApply) GetWithdrawAccount() string {
  return p.WithdrawAccount
}

func (p *TMonthSettleApply) GetContractSid() int64 {
  return p.ContractSid
}

func (p *TMonthSettleApply) GetViolationPunishLevel() int32 {
  return p.ViolationPunishLevel
}

func (p *TMonthSettleApply) GetViolationPunishAmount() float64 {
  return p.ViolationPunishAmount
}

func (p *TMonthSettleApply) GetResultMsg() string {
  return p.ResultMsg
}
func (p *TMonthSettleApply) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMonthSettleApply)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SettleDate = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplyTime = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ApplyRealAmount = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExchangeSalaryAmount = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DestCurrencyType = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TUserType(v)
  p.UserType = temp
}
  return nil
}

func (p *TMonthSettleApply)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CompensationAmount = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ReOrderFlag = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.SettleType = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.WithdrawAccountType = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.WithdrawAccount = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ContractSid = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ViolationPunishLevel = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.ViolationPunishAmount = v
}
  return nil
}

func (p *TMonthSettleApply)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ResultMsg = v
}
  return nil
}

func (p *TMonthSettleApply) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMonthSettleApply"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMonthSettleApply) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settleDate", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settleDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.SettleDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settleDate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settleDate: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applyTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applyTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ApplyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applyTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applyTime: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applyRealAmount", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:applyRealAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ApplyRealAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applyRealAmount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:applyRealAmount: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exchangeSalaryAmount", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:exchangeSalaryAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ExchangeSalaryAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exchangeSalaryAmount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:exchangeSalaryAmount: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:result: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:appid: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destCurrencyType", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:destCurrencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestCurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destCurrencyType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:destCurrencyType: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userType: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userType: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compensationAmount", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:compensationAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.CompensationAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compensationAmount (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:compensationAmount: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reOrderFlag", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:reOrderFlag: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReOrderFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reOrderFlag (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:reOrderFlag: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settleType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:settleType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SettleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settleType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:settleType: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawAccountType", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:withdrawAccountType: ", p), err) }
  if err := oprot.WriteI32(int32(p.WithdrawAccountType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawAccountType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:withdrawAccountType: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawAccount", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:withdrawAccount: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawAccount (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:withdrawAccount: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contractSid", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:contractSid: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContractSid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contractSid (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:contractSid: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("violationPunishLevel", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:violationPunishLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.ViolationPunishLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.violationPunishLevel (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:violationPunishLevel: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("violationPunishAmount", thrift.DOUBLE, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:violationPunishAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ViolationPunishAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.violationPunishAmount (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:violationPunishAmount: ", p), err) }
  return err
}

func (p *TMonthSettleApply) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resultMsg", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:resultMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ResultMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resultMsg (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:resultMsg: ", p), err) }
  return err
}

func (p *TMonthSettleApply) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMonthSettleApply(%+v)", *p)
}

// Attributes:
//  - UID
//  - CurrencyType
//  - Amount
//  - Freezed
//  - Appid
type TUserAccount struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  CurrencyType TCurrencyType `thrift:"currencyType,2" db:"currencyType" json:"currencyType"`
  Amount int64 `thrift:"amount,3" db:"amount" json:"amount"`
  Freezed int64 `thrift:"freezed,4" db:"freezed" json:"freezed"`
  Appid int32 `thrift:"appid,5" db:"appid" json:"appid"`
}

func NewTUserAccount() *TUserAccount {
  return &TUserAccount{}
}


func (p *TUserAccount) GetUID() int64 {
  return p.UID
}

func (p *TUserAccount) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}

func (p *TUserAccount) GetAmount() int64 {
  return p.Amount
}

func (p *TUserAccount) GetFreezed() int64 {
  return p.Freezed
}

func (p *TUserAccount) GetAppid() int32 {
  return p.Appid
}
func (p *TUserAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TUserAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TUserAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TUserAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Freezed = v
}
  return nil
}

func (p *TUserAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TUserAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TUserAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyType: ", p), err) }
  return err
}

func (p *TUserAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err) }
  if err := oprot.WriteI64(int64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err) }
  return err
}

func (p *TUserAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freezed", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:freezed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Freezed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freezed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:freezed: ", p), err) }
  return err
}

func (p *TUserAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appid: ", p), err) }
  return err
}

func (p *TUserAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccount(%+v)", *p)
}

// Attributes:
//  - LiveUid
//  - GroupName
//  - Sid
//  - OwUid
//  - Weight
//  - SignTime
//  - Appid
//  - CompanySign
//  - FinishTime
//  - Months
//  - SuperAnchorSign
//  - TemplateId
type TContract struct {
  LiveUid int64 `thrift:"liveUid,1" db:"liveUid" json:"liveUid"`
  GroupName string `thrift:"groupName,2" db:"groupName" json:"groupName"`
  Sid int64 `thrift:"sid,3" db:"sid" json:"sid"`
  OwUid int64 `thrift:"owUid,4" db:"owUid" json:"owUid"`
  Weight int32 `thrift:"weight,5" db:"weight" json:"weight"`
  SignTime int64 `thrift:"signTime,6" db:"signTime" json:"signTime"`
  Appid int32 `thrift:"appid,7" db:"appid" json:"appid"`
  CompanySign int32 `thrift:"companySign,8" db:"companySign" json:"companySign"`
  FinishTime int64 `thrift:"finishTime,9" db:"finishTime" json:"finishTime"`
  Months int32 `thrift:"months,10" db:"months" json:"months"`
  SuperAnchorSign int32 `thrift:"superAnchorSign,11" db:"superAnchorSign" json:"superAnchorSign"`
  TemplateId int32 `thrift:"templateId,12" db:"templateId" json:"templateId"`
}

func NewTContract() *TContract {
  return &TContract{}
}


func (p *TContract) GetLiveUid() int64 {
  return p.LiveUid
}

func (p *TContract) GetGroupName() string {
  return p.GroupName
}

func (p *TContract) GetSid() int64 {
  return p.Sid
}

func (p *TContract) GetOwUid() int64 {
  return p.OwUid
}

func (p *TContract) GetWeight() int32 {
  return p.Weight
}

func (p *TContract) GetSignTime() int64 {
  return p.SignTime
}

func (p *TContract) GetAppid() int32 {
  return p.Appid
}

func (p *TContract) GetCompanySign() int32 {
  return p.CompanySign
}

func (p *TContract) GetFinishTime() int64 {
  return p.FinishTime
}

func (p *TContract) GetMonths() int32 {
  return p.Months
}

func (p *TContract) GetSuperAnchorSign() int32 {
  return p.SuperAnchorSign
}

func (p *TContract) GetTemplateId() int32 {
  return p.TemplateId
}
func (p *TContract) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContract)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LiveUid = v
}
  return nil
}

func (p *TContract)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *TContract)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TContract)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OwUid = v
}
  return nil
}

func (p *TContract)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *TContract)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SignTime = v
}
  return nil
}

func (p *TContract)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TContract)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CompanySign = v
}
  return nil
}

func (p *TContract)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.FinishTime = v
}
  return nil
}

func (p *TContract)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Months = v
}
  return nil
}

func (p *TContract)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.SuperAnchorSign = v
}
  return nil
}

func (p *TContract)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TemplateId = v
}
  return nil
}

func (p *TContract) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TContract"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContract) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("liveUid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:liveUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.LiveUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.liveUid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:liveUid: ", p), err) }
  return err
}

func (p *TContract) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err) }
  return err
}

func (p *TContract) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sid: ", p), err) }
  return err
}

func (p *TContract) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owUid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:owUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.OwUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owUid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:owUid: ", p), err) }
  return err
}

func (p *TContract) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:weight: ", p), err) }
  return err
}

func (p *TContract) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:signTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.SignTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:signTime: ", p), err) }
  return err
}

func (p *TContract) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appid: ", p), err) }
  return err
}

func (p *TContract) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("companySign", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:companySign: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompanySign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.companySign (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:companySign: ", p), err) }
  return err
}

func (p *TContract) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("finishTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:finishTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.FinishTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.finishTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:finishTime: ", p), err) }
  return err
}

func (p *TContract) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("months", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:months: ", p), err) }
  if err := oprot.WriteI32(int32(p.Months)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.months (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:months: ", p), err) }
  return err
}

func (p *TContract) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("superAnchorSign", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:superAnchorSign: ", p), err) }
  if err := oprot.WriteI32(int32(p.SuperAnchorSign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.superAnchorSign (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:superAnchorSign: ", p), err) }
  return err
}

func (p *TContract) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("templateId", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:templateId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.templateId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:templateId: ", p), err) }
  return err
}

func (p *TContract) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContract(%+v)", *p)
}

// Attributes:
//  - UID
//  - PropId
//  - PropName
//  - PricingId
//  - Amount
//  - UsedTime
//  - Sid
//  - PropCnt
//  - GuestUid
//  - AnchorUid
//  - SumAmount
//  - ID
//  - CurrencyType
//  - Appid
//  - PlayType
//  - Expand
type TWeekPropsRecvInfo struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  PropId int32 `thrift:"propId,2" db:"propId" json:"propId"`
  PropName string `thrift:"propName,3" db:"propName" json:"propName"`
  PricingId int32 `thrift:"pricingId,4" db:"pricingId" json:"pricingId"`
  Amount float64 `thrift:"amount,5" db:"amount" json:"amount"`
  UsedTime int64 `thrift:"usedTime,6" db:"usedTime" json:"usedTime"`
  Sid int64 `thrift:"sid,7" db:"sid" json:"sid"`
  PropCnt int32 `thrift:"propCnt,8" db:"propCnt" json:"propCnt"`
  GuestUid string `thrift:"guestUid,9" db:"guestUid" json:"guestUid"`
  AnchorUid int64 `thrift:"anchorUid,10" db:"anchorUid" json:"anchorUid"`
  SumAmount float64 `thrift:"sumAmount,11" db:"sumAmount" json:"sumAmount"`
  ID int64 `thrift:"id,12" db:"id" json:"id"`
  CurrencyType TCurrencyType `thrift:"currencyType,13" db:"currencyType" json:"currencyType"`
  Appid int32 `thrift:"appid,14" db:"appid" json:"appid"`
  PlayType int32 `thrift:"playType,15" db:"playType" json:"playType"`
  Expand string `thrift:"expand,16" db:"expand" json:"expand"`
}

func NewTWeekPropsRecvInfo() *TWeekPropsRecvInfo {
  return &TWeekPropsRecvInfo{}
}


func (p *TWeekPropsRecvInfo) GetUID() int64 {
  return p.UID
}

func (p *TWeekPropsRecvInfo) GetPropId() int32 {
  return p.PropId
}

func (p *TWeekPropsRecvInfo) GetPropName() string {
  return p.PropName
}

func (p *TWeekPropsRecvInfo) GetPricingId() int32 {
  return p.PricingId
}

func (p *TWeekPropsRecvInfo) GetAmount() float64 {
  return p.Amount
}

func (p *TWeekPropsRecvInfo) GetUsedTime() int64 {
  return p.UsedTime
}

func (p *TWeekPropsRecvInfo) GetSid() int64 {
  return p.Sid
}

func (p *TWeekPropsRecvInfo) GetPropCnt() int32 {
  return p.PropCnt
}

func (p *TWeekPropsRecvInfo) GetGuestUid() string {
  return p.GuestUid
}

func (p *TWeekPropsRecvInfo) GetAnchorUid() int64 {
  return p.AnchorUid
}

func (p *TWeekPropsRecvInfo) GetSumAmount() float64 {
  return p.SumAmount
}

func (p *TWeekPropsRecvInfo) GetID() int64 {
  return p.ID
}

func (p *TWeekPropsRecvInfo) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}

func (p *TWeekPropsRecvInfo) GetAppid() int32 {
  return p.Appid
}

func (p *TWeekPropsRecvInfo) GetPlayType() int32 {
  return p.PlayType
}

func (p *TWeekPropsRecvInfo) GetExpand() string {
  return p.Expand
}
func (p *TWeekPropsRecvInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PropId = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PropName = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PricingId = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UsedTime = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PropCnt = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.GuestUid = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AnchorUid = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.SumAmount = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PlayType = v
}
  return nil
}

func (p *TWeekPropsRecvInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Expand = v
}
  return nil
}

func (p *TWeekPropsRecvInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TWeekPropsRecvInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TWeekPropsRecvInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("propId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:propId: ", p), err) }
  if err := oprot.WriteI32(int32(p.PropId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.propId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:propId: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("propName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:propName: ", p), err) }
  if err := oprot.WriteString(string(p.PropName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.propName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:propName: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pricingId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pricingId: ", p), err) }
  if err := oprot.WriteI32(int32(p.PricingId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pricingId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pricingId: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usedTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:usedTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UsedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usedTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:usedTime: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sid: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("propCnt", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:propCnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.PropCnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.propCnt (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:propCnt: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("guestUid", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:guestUid: ", p), err) }
  if err := oprot.WriteString(string(p.GuestUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.guestUid (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:guestUid: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anchorUid", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:anchorUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.AnchorUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.anchorUid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:anchorUid: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sumAmount", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sumAmount: ", p), err) }
  if err := oprot.WriteDouble(float64(p.SumAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sumAmount (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sumAmount: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:id: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:currencyType: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:appid: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("playType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:playType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PlayType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.playType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:playType: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expand", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:expand: ", p), err) }
  if err := oprot.WriteString(string(p.Expand)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expand (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:expand: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TWeekPropsRecvInfo(%+v)", *p)
}

// Attributes:
//  - Content
//  - Page
//  - Pagesize
//  - TotalElement
//  - TotalPage
//  - Extend
type TWeekPropsRecvInfoQueryPage struct {
  Content []*TWeekPropsRecvInfo `thrift:"content,1" db:"content" json:"content"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,3" db:"pagesize" json:"pagesize"`
  TotalElement int32 `thrift:"totalElement,4" db:"totalElement" json:"totalElement"`
  TotalPage int32 `thrift:"totalPage,5" db:"totalPage" json:"totalPage"`
  Extend map[string]string `thrift:"extend,6" db:"extend" json:"extend"`
}

func NewTWeekPropsRecvInfoQueryPage() *TWeekPropsRecvInfoQueryPage {
  return &TWeekPropsRecvInfoQueryPage{}
}


func (p *TWeekPropsRecvInfoQueryPage) GetContent() []*TWeekPropsRecvInfo {
  return p.Content
}

func (p *TWeekPropsRecvInfoQueryPage) GetPage() int32 {
  return p.Page
}

func (p *TWeekPropsRecvInfoQueryPage) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TWeekPropsRecvInfoQueryPage) GetTotalElement() int32 {
  return p.TotalElement
}

func (p *TWeekPropsRecvInfoQueryPage) GetTotalPage() int32 {
  return p.TotalPage
}

func (p *TWeekPropsRecvInfoQueryPage) GetExtend() map[string]string {
  return p.Extend
}
func (p *TWeekPropsRecvInfoQueryPage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TWeekPropsRecvInfo, 0, size)
  p.Content =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &TWeekPropsRecvInfo{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Content = append(p.Content, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalElement = v
}
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalPage = v
}
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.Extend[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TWeekPropsRecvInfoQueryPage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TWeekPropsRecvInfoQueryPage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:content: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Content)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Content {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:content: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pagesize: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalElement", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalElement: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalElement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalElement (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalElement: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalPage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalPage: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extend", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extend: ", p), err) }
  return err
}

func (p *TWeekPropsRecvInfoQueryPage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TWeekPropsRecvInfoQueryPage(%+v)", *p)
}

type TCurrencyService interface {
  // 查询频道指定特定时间范围内的收入情况 timeGreaterThan与timeLessThan不能同时为null
  // 
  // @param sid
  // @param appid
  // @param timeGreaterThan 日期格式：yyyyMMddHHmmss
  // @param timeLessThan 日期格式：yyyyMMddHHmmss
  // @param revenueUserType 1-主播，2-OW，0-所有
  // @param page 从1开始
  // @param pagesize
  // @param anchorUid 当revenueUserType=1时，需要传入主播UID
  // @return
  // 
  // Parameters:
  //  - Sid
  //  - Appid
  //  - TimeGreaterThan
  //  - TimeLessThan
  //  - RevenueUserType
  //  - Page
  //  - Pagesize
  //  - AnchorUid
  QueryRevenueRecord(ctx context.Context, sid int64, appid int32, timeGreaterThan string, timeLessThan string, revenueUserType int32, page int32, pagesize int32, anchorUid int64) (r []*TRevenueRecord, err error)
  // 提现记录查询
  // 
  // @param uid
  // @param timeGreaterThan
  // @param timeLessThan
  // @param appid
  // @param page
  // @param pagesize
  // @return
  // 
  // Parameters:
  //  - UID
  //  - TimeGreaterThan
  //  - TimeLessThan
  //  - Appid
  //  - Page
  //  - Pagesize
  QueryUserMonthSettleApply(ctx context.Context, uid int64, timeGreaterThan int64, timeLessThan int64, appid int32, page int32, pagesize int32) (r []*TMonthSettleApply, err error)
  // Parameters:
  //  - UID
  //  - Sid
  //  - Appid
  //  - CurrencyType
  GetChannelAccountByUidAndType(ctx context.Context, uid int64, sid int64, appid TAppId, currencyType TCurrencyType) (r *TChannelAccount, err error)
  // Parameters:
  //  - UID
  //  - Appid
  //  - Pagesize
  //  - Page
  //  - RevenueUserType
  //  - StartDate
  //  - EndDate
  //  - AnchorUid
  //  - Sid
  //  - SrcType
  QueryRevenueRecordPaging(ctx context.Context, uid int64, appid TAppId, pagesize int32, page int32, revenueUserType TUserType, startDate int64, endDate int64, anchorUid int64, sid int64, srcType TRevenueSrcType) (r *TQueryPageInfo, err error)
}

type TCurrencyServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTCurrencyService instead
func NewTCurrencyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCurrencyServiceClient {
  return &TCurrencyServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTCurrencyService instead
func NewTCurrencyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCurrencyServiceClient {
  return &TCurrencyServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTCurrencyServiceClient(c thrift.TClient) *TCurrencyServiceClient {
  return &TCurrencyServiceClient{
    c: c,
  }
}

// 查询频道指定特定时间范围内的收入情况 timeGreaterThan与timeLessThan不能同时为null
// 
// @param sid
// @param appid
// @param timeGreaterThan 日期格式：yyyyMMddHHmmss
// @param timeLessThan 日期格式：yyyyMMddHHmmss
// @param revenueUserType 1-主播，2-OW，0-所有
// @param page 从1开始
// @param pagesize
// @param anchorUid 当revenueUserType=1时，需要传入主播UID
// @return
// 
// Parameters:
//  - Sid
//  - Appid
//  - TimeGreaterThan
//  - TimeLessThan
//  - RevenueUserType
//  - Page
//  - Pagesize
//  - AnchorUid
func (p *TCurrencyServiceClient) QueryRevenueRecord(ctx context.Context, sid int64, appid int32, timeGreaterThan string, timeLessThan string, revenueUserType int32, page int32, pagesize int32, anchorUid int64) (r []*TRevenueRecord, err error) {
  var _args16 TCurrencyServiceQueryRevenueRecordArgs
  _args16.Sid = sid
  _args16.Appid = appid
  _args16.TimeGreaterThan = timeGreaterThan
  _args16.TimeLessThan = timeLessThan
  _args16.RevenueUserType = revenueUserType
  _args16.Page = page
  _args16.Pagesize = pagesize
  _args16.AnchorUid = anchorUid
  var _result17 TCurrencyServiceQueryRevenueRecordResult
  if err = p.c.Call(ctx, "queryRevenueRecord", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// 提现记录查询
// 
// @param uid
// @param timeGreaterThan
// @param timeLessThan
// @param appid
// @param page
// @param pagesize
// @return
// 
// Parameters:
//  - UID
//  - TimeGreaterThan
//  - TimeLessThan
//  - Appid
//  - Page
//  - Pagesize
func (p *TCurrencyServiceClient) QueryUserMonthSettleApply(ctx context.Context, uid int64, timeGreaterThan int64, timeLessThan int64, appid int32, page int32, pagesize int32) (r []*TMonthSettleApply, err error) {
  var _args18 TCurrencyServiceQueryUserMonthSettleApplyArgs
  _args18.UID = uid
  _args18.TimeGreaterThan = timeGreaterThan
  _args18.TimeLessThan = timeLessThan
  _args18.Appid = appid
  _args18.Page = page
  _args18.Pagesize = pagesize
  var _result19 TCurrencyServiceQueryUserMonthSettleApplyResult
  if err = p.c.Call(ctx, "queryUserMonthSettleApply", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Sid
//  - Appid
//  - CurrencyType
func (p *TCurrencyServiceClient) GetChannelAccountByUidAndType(ctx context.Context, uid int64, sid int64, appid TAppId, currencyType TCurrencyType) (r *TChannelAccount, err error) {
  var _args20 TCurrencyServiceGetChannelAccountByUidAndTypeArgs
  _args20.UID = uid
  _args20.Sid = sid
  _args20.Appid = appid
  _args20.CurrencyType = currencyType
  var _result21 TCurrencyServiceGetChannelAccountByUidAndTypeResult
  if err = p.c.Call(ctx, "getChannelAccountByUidAndType", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Appid
//  - Pagesize
//  - Page
//  - RevenueUserType
//  - StartDate
//  - EndDate
//  - AnchorUid
//  - Sid
//  - SrcType
func (p *TCurrencyServiceClient) QueryRevenueRecordPaging(ctx context.Context, uid int64, appid TAppId, pagesize int32, page int32, revenueUserType TUserType, startDate int64, endDate int64, anchorUid int64, sid int64, srcType TRevenueSrcType) (r *TQueryPageInfo, err error) {
  var _args22 TCurrencyServiceQueryRevenueRecordPagingArgs
  _args22.UID = uid
  _args22.Appid = appid
  _args22.Pagesize = pagesize
  _args22.Page = page
  _args22.RevenueUserType = revenueUserType
  _args22.StartDate = startDate
  _args22.EndDate = endDate
  _args22.AnchorUid = anchorUid
  _args22.Sid = sid
  _args22.SrcType = srcType
  var _result23 TCurrencyServiceQueryRevenueRecordPagingResult
  if err = p.c.Call(ctx, "queryRevenueRecordPaging", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

type TCurrencyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TCurrencyService
}

func (p *TCurrencyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TCurrencyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TCurrencyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTCurrencyServiceProcessor(handler TCurrencyService) *TCurrencyServiceProcessor {

  self24 := &TCurrencyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["queryRevenueRecord"] = &tCurrencyServiceProcessorQueryRevenueRecord{handler:handler}
  self24.processorMap["queryUserMonthSettleApply"] = &tCurrencyServiceProcessorQueryUserMonthSettleApply{handler:handler}
  self24.processorMap["getChannelAccountByUidAndType"] = &tCurrencyServiceProcessorGetChannelAccountByUidAndType{handler:handler}
  self24.processorMap["queryRevenueRecordPaging"] = &tCurrencyServiceProcessorQueryRevenueRecordPaging{handler:handler}
return self24
}

func (p *TCurrencyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x25

}

type tCurrencyServiceProcessorQueryRevenueRecord struct {
  handler TCurrencyService
}

func (p *tCurrencyServiceProcessorQueryRevenueRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCurrencyServiceQueryRevenueRecordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryRevenueRecord", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCurrencyServiceQueryRevenueRecordResult{}
var retval []*TRevenueRecord
  var err2 error
  if retval, err2 = p.handler.QueryRevenueRecord(ctx, args.Sid, args.Appid, args.TimeGreaterThan, args.TimeLessThan, args.RevenueUserType, args.Page, args.Pagesize, args.AnchorUid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryRevenueRecord: " + err2.Error())
    oprot.WriteMessageBegin("queryRevenueRecord", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryRevenueRecord", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tCurrencyServiceProcessorQueryUserMonthSettleApply struct {
  handler TCurrencyService
}

func (p *tCurrencyServiceProcessorQueryUserMonthSettleApply) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCurrencyServiceQueryUserMonthSettleApplyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryUserMonthSettleApply", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCurrencyServiceQueryUserMonthSettleApplyResult{}
var retval []*TMonthSettleApply
  var err2 error
  if retval, err2 = p.handler.QueryUserMonthSettleApply(ctx, args.UID, args.TimeGreaterThan, args.TimeLessThan, args.Appid, args.Page, args.Pagesize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserMonthSettleApply: " + err2.Error())
    oprot.WriteMessageBegin("queryUserMonthSettleApply", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryUserMonthSettleApply", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tCurrencyServiceProcessorGetChannelAccountByUidAndType struct {
  handler TCurrencyService
}

func (p *tCurrencyServiceProcessorGetChannelAccountByUidAndType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCurrencyServiceGetChannelAccountByUidAndTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChannelAccountByUidAndType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCurrencyServiceGetChannelAccountByUidAndTypeResult{}
var retval *TChannelAccount
  var err2 error
  if retval, err2 = p.handler.GetChannelAccountByUidAndType(ctx, args.UID, args.Sid, args.Appid, args.CurrencyType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelAccountByUidAndType: " + err2.Error())
    oprot.WriteMessageBegin("getChannelAccountByUidAndType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChannelAccountByUidAndType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tCurrencyServiceProcessorQueryRevenueRecordPaging struct {
  handler TCurrencyService
}

func (p *tCurrencyServiceProcessorQueryRevenueRecordPaging) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCurrencyServiceQueryRevenueRecordPagingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryRevenueRecordPaging", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCurrencyServiceQueryRevenueRecordPagingResult{}
var retval *TQueryPageInfo
  var err2 error
  if retval, err2 = p.handler.QueryRevenueRecordPaging(ctx, args.UID, args.Appid, args.Pagesize, args.Page, args.RevenueUserType, args.StartDate, args.EndDate, args.AnchorUid, args.Sid, args.SrcType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryRevenueRecordPaging: " + err2.Error())
    oprot.WriteMessageBegin("queryRevenueRecordPaging", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryRevenueRecordPaging", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Sid
//  - Appid
//  - TimeGreaterThan
//  - TimeLessThan
//  - RevenueUserType
//  - Page
//  - Pagesize
//  - AnchorUid
type TCurrencyServiceQueryRevenueRecordArgs struct {
  Sid int64 `thrift:"sid,1" db:"sid" json:"sid"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
  TimeGreaterThan string `thrift:"timeGreaterThan,3" db:"timeGreaterThan" json:"timeGreaterThan"`
  TimeLessThan string `thrift:"timeLessThan,4" db:"timeLessThan" json:"timeLessThan"`
  RevenueUserType int32 `thrift:"revenueUserType,5" db:"revenueUserType" json:"revenueUserType"`
  Page int32 `thrift:"page,6" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,7" db:"pagesize" json:"pagesize"`
  AnchorUid int64 `thrift:"anchorUid,8" db:"anchorUid" json:"anchorUid"`
}

func NewTCurrencyServiceQueryRevenueRecordArgs() *TCurrencyServiceQueryRevenueRecordArgs {
  return &TCurrencyServiceQueryRevenueRecordArgs{}
}


func (p *TCurrencyServiceQueryRevenueRecordArgs) GetSid() int64 {
  return p.Sid
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetAppid() int32 {
  return p.Appid
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetTimeGreaterThan() string {
  return p.TimeGreaterThan
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetTimeLessThan() string {
  return p.TimeLessThan
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetRevenueUserType() int32 {
  return p.RevenueUserType
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetPage() int32 {
  return p.Page
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) GetAnchorUid() int64 {
  return p.AnchorUid
}
func (p *TCurrencyServiceQueryRevenueRecordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeGreaterThan = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeLessThan = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RevenueUserType = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AnchorUid = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryRevenueRecord_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeGreaterThan", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeGreaterThan: ", p), err) }
  if err := oprot.WriteString(string(p.TimeGreaterThan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeGreaterThan (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeGreaterThan: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeLessThan", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeLessThan: ", p), err) }
  if err := oprot.WriteString(string(p.TimeLessThan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeLessThan (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeLessThan: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenueUserType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:revenueUserType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RevenueUserType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenueUserType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:revenueUserType: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:page: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pagesize: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anchorUid", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:anchorUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.AnchorUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.anchorUid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:anchorUid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryRevenueRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCurrencyServiceQueryRevenueRecordResult struct {
  Success []*TRevenueRecord `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCurrencyServiceQueryRevenueRecordResult() *TCurrencyServiceQueryRevenueRecordResult {
  return &TCurrencyServiceQueryRevenueRecordResult{}
}

var TCurrencyServiceQueryRevenueRecordResult_Success_DEFAULT []*TRevenueRecord

func (p *TCurrencyServiceQueryRevenueRecordResult) GetSuccess() []*TRevenueRecord {
  return p.Success
}
func (p *TCurrencyServiceQueryRevenueRecordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCurrencyServiceQueryRevenueRecordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRevenueRecord, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &TRevenueRecord{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Success = append(p.Success, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryRevenueRecord_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryRevenueRecordResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - TimeGreaterThan
//  - TimeLessThan
//  - Appid
//  - Page
//  - Pagesize
type TCurrencyServiceQueryUserMonthSettleApplyArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  TimeGreaterThan int64 `thrift:"timeGreaterThan,2" db:"timeGreaterThan" json:"timeGreaterThan"`
  TimeLessThan int64 `thrift:"timeLessThan,3" db:"timeLessThan" json:"timeLessThan"`
  Appid int32 `thrift:"appid,4" db:"appid" json:"appid"`
  Page int32 `thrift:"page,5" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,6" db:"pagesize" json:"pagesize"`
}

func NewTCurrencyServiceQueryUserMonthSettleApplyArgs() *TCurrencyServiceQueryUserMonthSettleApplyArgs {
  return &TCurrencyServiceQueryUserMonthSettleApplyArgs{}
}


func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetUID() int64 {
  return p.UID
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetTimeGreaterThan() int64 {
  return p.TimeGreaterThan
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetTimeLessThan() int64 {
  return p.TimeLessThan
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetAppid() int32 {
  return p.Appid
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetPage() int32 {
  return p.Page
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) GetPagesize() int32 {
  return p.Pagesize
}
func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeGreaterThan = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeLessThan = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUserMonthSettleApply_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeGreaterThan", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeGreaterThan: ", p), err) }
  if err := oprot.WriteI64(int64(p.TimeGreaterThan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeGreaterThan (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeGreaterThan: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeLessThan", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeLessThan: ", p), err) }
  if err := oprot.WriteI64(int64(p.TimeLessThan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeLessThan (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeLessThan: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:page: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pagesize: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryUserMonthSettleApplyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCurrencyServiceQueryUserMonthSettleApplyResult struct {
  Success []*TMonthSettleApply `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCurrencyServiceQueryUserMonthSettleApplyResult() *TCurrencyServiceQueryUserMonthSettleApplyResult {
  return &TCurrencyServiceQueryUserMonthSettleApplyResult{}
}

var TCurrencyServiceQueryUserMonthSettleApplyResult_Success_DEFAULT []*TMonthSettleApply

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) GetSuccess() []*TMonthSettleApply {
  return p.Success
}
func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMonthSettleApply, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &TMonthSettleApply{}
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Success = append(p.Success, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryUserMonthSettleApply_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCurrencyServiceQueryUserMonthSettleApplyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryUserMonthSettleApplyResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Sid
//  - Appid
//  - CurrencyType
type TCurrencyServiceGetChannelAccountByUidAndTypeArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Sid int64 `thrift:"sid,2" db:"sid" json:"sid"`
  Appid TAppId `thrift:"appid,3" db:"appid" json:"appid"`
  CurrencyType TCurrencyType `thrift:"currencyType,4" db:"currencyType" json:"currencyType"`
}

func NewTCurrencyServiceGetChannelAccountByUidAndTypeArgs() *TCurrencyServiceGetChannelAccountByUidAndTypeArgs {
  return &TCurrencyServiceGetChannelAccountByUidAndTypeArgs{}
}


func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) GetUID() int64 {
  return p.UID
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) GetSid() int64 {
  return p.Sid
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}
func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChannelAccountByUidAndType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currencyType: ", p), err) }
  return err
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceGetChannelAccountByUidAndTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCurrencyServiceGetChannelAccountByUidAndTypeResult struct {
  Success *TChannelAccount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCurrencyServiceGetChannelAccountByUidAndTypeResult() *TCurrencyServiceGetChannelAccountByUidAndTypeResult {
  return &TCurrencyServiceGetChannelAccountByUidAndTypeResult{}
}

var TCurrencyServiceGetChannelAccountByUidAndTypeResult_Success_DEFAULT *TChannelAccount
func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) GetSuccess() *TChannelAccount {
  if !p.IsSetSuccess() {
    return TCurrencyServiceGetChannelAccountByUidAndTypeResult_Success_DEFAULT
  }
return p.Success
}
func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChannelAccount{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChannelAccountByUidAndType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCurrencyServiceGetChannelAccountByUidAndTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceGetChannelAccountByUidAndTypeResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Appid
//  - Pagesize
//  - Page
//  - RevenueUserType
//  - StartDate
//  - EndDate
//  - AnchorUid
//  - Sid
//  - SrcType
type TCurrencyServiceQueryRevenueRecordPagingArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  Pagesize int32 `thrift:"pagesize,3" db:"pagesize" json:"pagesize"`
  Page int32 `thrift:"page,4" db:"page" json:"page"`
  RevenueUserType TUserType `thrift:"revenueUserType,5" db:"revenueUserType" json:"revenueUserType"`
  StartDate int64 `thrift:"startDate,6" db:"startDate" json:"startDate"`
  EndDate int64 `thrift:"endDate,7" db:"endDate" json:"endDate"`
  AnchorUid int64 `thrift:"anchorUid,8" db:"anchorUid" json:"anchorUid"`
  Sid int64 `thrift:"sid,9" db:"sid" json:"sid"`
  SrcType TRevenueSrcType `thrift:"srcType,10" db:"srcType" json:"srcType"`
}

func NewTCurrencyServiceQueryRevenueRecordPagingArgs() *TCurrencyServiceQueryRevenueRecordPagingArgs {
  return &TCurrencyServiceQueryRevenueRecordPagingArgs{}
}


func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetUID() int64 {
  return p.UID
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetPage() int32 {
  return p.Page
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetRevenueUserType() TUserType {
  return p.RevenueUserType
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetStartDate() int64 {
  return p.StartDate
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetEndDate() int64 {
  return p.EndDate
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetAnchorUid() int64 {
  return p.AnchorUid
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetSid() int64 {
  return p.Sid
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) GetSrcType() TRevenueSrcType {
  return p.SrcType
}
func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TUserType(v)
  p.RevenueUserType = temp
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartDate = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EndDate = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AnchorUid = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TRevenueSrcType(v)
  p.SrcType = temp
}
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryRevenueRecordPaging_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pagesize: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenueUserType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:revenueUserType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RevenueUserType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenueUserType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:revenueUserType: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startDate", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startDate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startDate: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endDate", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endDate (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endDate: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anchorUid", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:anchorUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.AnchorUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.anchorUid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:anchorUid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sid: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:srcType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SrcType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:srcType: ", p), err) }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryRevenueRecordPagingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCurrencyServiceQueryRevenueRecordPagingResult struct {
  Success *TQueryPageInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCurrencyServiceQueryRevenueRecordPagingResult() *TCurrencyServiceQueryRevenueRecordPagingResult {
  return &TCurrencyServiceQueryRevenueRecordPagingResult{}
}

var TCurrencyServiceQueryRevenueRecordPagingResult_Success_DEFAULT *TQueryPageInfo
func (p *TCurrencyServiceQueryRevenueRecordPagingResult) GetSuccess() *TQueryPageInfo {
  if !p.IsSetSuccess() {
    return TCurrencyServiceQueryRevenueRecordPagingResult_Success_DEFAULT
  }
return p.Success
}
func (p *TCurrencyServiceQueryRevenueRecordPagingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TQueryPageInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryRevenueRecordPaging_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrencyServiceQueryRevenueRecordPagingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCurrencyServiceQueryRevenueRecordPagingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrencyServiceQueryRevenueRecordPagingResult(%+v)", *p)
}


type TUserAccountService interface {
  // Parameters:
  //  - UID
  //  - Appid
  //  - CurrencyType
  GetUserAccountByUidAndType(ctx context.Context, uid int64, appid TAppId, currencyType TCurrencyType) (r *TUserAccount, err error)
  // Parameters:
  //  - UID
  BilinCumulativeProfit(ctx context.Context, uid int64) (r int64, err error)
}

type TUserAccountServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTUserAccountService instead
func NewTUserAccountServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TUserAccountServiceClient {
  return &TUserAccountServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTUserAccountService instead
func NewTUserAccountServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TUserAccountServiceClient {
  return &TUserAccountServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTUserAccountServiceClient(c thrift.TClient) *TUserAccountServiceClient {
  return &TUserAccountServiceClient{
    c: c,
  }
}

// Parameters:
//  - UID
//  - Appid
//  - CurrencyType
func (p *TUserAccountServiceClient) GetUserAccountByUidAndType(ctx context.Context, uid int64, appid TAppId, currencyType TCurrencyType) (r *TUserAccount, err error) {
  var _args51 TUserAccountServiceGetUserAccountByUidAndTypeArgs
  _args51.UID = uid
  _args51.Appid = appid
  _args51.CurrencyType = currencyType
  var _result52 TUserAccountServiceGetUserAccountByUidAndTypeResult
  if err = p.c.Call(ctx, "getUserAccountByUidAndType", &_args51, &_result52); err != nil {
    return
  }
  return _result52.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *TUserAccountServiceClient) BilinCumulativeProfit(ctx context.Context, uid int64) (r int64, err error) {
  var _args53 TUserAccountServiceBilinCumulativeProfitArgs
  _args53.UID = uid
  var _result54 TUserAccountServiceBilinCumulativeProfitResult
  if err = p.c.Call(ctx, "bilinCumulativeProfit", &_args53, &_result54); err != nil {
    return
  }
  return _result54.GetSuccess(), nil
}

type TUserAccountServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TUserAccountService
}

func (p *TUserAccountServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TUserAccountServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TUserAccountServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTUserAccountServiceProcessor(handler TUserAccountService) *TUserAccountServiceProcessor {

  self55 := &TUserAccountServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self55.processorMap["getUserAccountByUidAndType"] = &tUserAccountServiceProcessorGetUserAccountByUidAndType{handler:handler}
  self55.processorMap["bilinCumulativeProfit"] = &tUserAccountServiceProcessorBilinCumulativeProfit{handler:handler}
return self55
}

func (p *TUserAccountServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x56 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x56.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x56

}

type tUserAccountServiceProcessorGetUserAccountByUidAndType struct {
  handler TUserAccountService
}

func (p *tUserAccountServiceProcessorGetUserAccountByUidAndType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserAccountServiceGetUserAccountByUidAndTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserAccountByUidAndType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserAccountServiceGetUserAccountByUidAndTypeResult{}
var retval *TUserAccount
  var err2 error
  if retval, err2 = p.handler.GetUserAccountByUidAndType(ctx, args.UID, args.Appid, args.CurrencyType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAccountByUidAndType: " + err2.Error())
    oprot.WriteMessageBegin("getUserAccountByUidAndType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserAccountByUidAndType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserAccountServiceProcessorBilinCumulativeProfit struct {
  handler TUserAccountService
}

func (p *tUserAccountServiceProcessorBilinCumulativeProfit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserAccountServiceBilinCumulativeProfitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bilinCumulativeProfit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserAccountServiceBilinCumulativeProfitResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.BilinCumulativeProfit(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bilinCumulativeProfit: " + err2.Error())
    oprot.WriteMessageBegin("bilinCumulativeProfit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bilinCumulativeProfit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
//  - Appid
//  - CurrencyType
type TUserAccountServiceGetUserAccountByUidAndTypeArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  CurrencyType TCurrencyType `thrift:"currencyType,3" db:"currencyType" json:"currencyType"`
}

func NewTUserAccountServiceGetUserAccountByUidAndTypeArgs() *TUserAccountServiceGetUserAccountByUidAndTypeArgs {
  return &TUserAccountServiceGetUserAccountByUidAndTypeArgs{}
}


func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) GetUID() int64 {
  return p.UID
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) GetCurrencyType() TCurrencyType {
  return p.CurrencyType
}
func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TCurrencyType(v)
  p.CurrencyType = temp
}
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserAccountByUidAndType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CurrencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencyType: ", p), err) }
  return err
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountServiceGetUserAccountByUidAndTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserAccountServiceGetUserAccountByUidAndTypeResult struct {
  Success *TUserAccount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserAccountServiceGetUserAccountByUidAndTypeResult() *TUserAccountServiceGetUserAccountByUidAndTypeResult {
  return &TUserAccountServiceGetUserAccountByUidAndTypeResult{}
}

var TUserAccountServiceGetUserAccountByUidAndTypeResult_Success_DEFAULT *TUserAccount
func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) GetSuccess() *TUserAccount {
  if !p.IsSetSuccess() {
    return TUserAccountServiceGetUserAccountByUidAndTypeResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserAccount{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserAccountByUidAndType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserAccountServiceGetUserAccountByUidAndTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountServiceGetUserAccountByUidAndTypeResult(%+v)", *p)
}

// Attributes:
//  - UID
type TUserAccountServiceBilinCumulativeProfitArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewTUserAccountServiceBilinCumulativeProfitArgs() *TUserAccountServiceBilinCumulativeProfitArgs {
  return &TUserAccountServiceBilinCumulativeProfitArgs{}
}


func (p *TUserAccountServiceBilinCumulativeProfitArgs) GetUID() int64 {
  return p.UID
}
func (p *TUserAccountServiceBilinCumulativeProfitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bilinCumulativeProfit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TUserAccountServiceBilinCumulativeProfitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountServiceBilinCumulativeProfitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserAccountServiceBilinCumulativeProfitResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserAccountServiceBilinCumulativeProfitResult() *TUserAccountServiceBilinCumulativeProfitResult {
  return &TUserAccountServiceBilinCumulativeProfitResult{}
}

var TUserAccountServiceBilinCumulativeProfitResult_Success_DEFAULT int64
func (p *TUserAccountServiceBilinCumulativeProfitResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TUserAccountServiceBilinCumulativeProfitResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserAccountServiceBilinCumulativeProfitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserAccountServiceBilinCumulativeProfitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bilinCumulativeProfit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAccountServiceBilinCumulativeProfitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserAccountServiceBilinCumulativeProfitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAccountServiceBilinCumulativeProfitResult(%+v)", *p)
}


type TPingService interface {
  // Parameters:
  //  - Seq
  Ping(ctx context.Context, seq int64) (r int64, err error)
  Ping2(ctx context.Context) (err error)
}

type TPingServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTPingService instead
func NewTPingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TPingServiceClient {
  return &TPingServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTPingService instead
func NewTPingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TPingServiceClient {
  return &TPingServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTPingServiceClient(c thrift.TClient) *TPingServiceClient {
  return &TPingServiceClient{
    c: c,
  }
}

// Parameters:
//  - Seq
func (p *TPingServiceClient) Ping(ctx context.Context, seq int64) (r int64, err error) {
  var _args59 TPingServicePingArgs
  _args59.Seq = seq
  var _result60 TPingServicePingResult
  if err = p.c.Call(ctx, "ping", &_args59, &_result60); err != nil {
    return
  }
  return _result60.GetSuccess(), nil
}

func (p *TPingServiceClient) Ping2(ctx context.Context) (err error) {
  var _args61 TPingServicePing2Args
  var _result62 TPingServicePing2Result
  if err = p.c.Call(ctx, "ping2", &_args61, &_result62); err != nil {
    return
  }
  return nil
}

type TPingServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TPingService
}

func (p *TPingServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TPingServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TPingServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTPingServiceProcessor(handler TPingService) *TPingServiceProcessor {

  self63 := &TPingServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self63.processorMap["ping"] = &tPingServiceProcessorPing{handler:handler}
  self63.processorMap["ping2"] = &tPingServiceProcessorPing2{handler:handler}
return self63
}

func (p *TPingServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x64 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x64.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x64

}

type tPingServiceProcessorPing struct {
  handler TPingService
}

func (p *tPingServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TPingServicePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TPingServicePingResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.Ping(ctx, args.Seq); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tPingServiceProcessorPing2 struct {
  handler TPingService
}

func (p *tPingServiceProcessorPing2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TPingServicePing2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TPingServicePing2Result{}
  var err2 error
  if err2 = p.handler.Ping2(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping2: " + err2.Error())
    oprot.WriteMessageBegin("ping2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("ping2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Seq
type TPingServicePingArgs struct {
  Seq int64 `thrift:"seq,1" db:"seq" json:"seq"`
}

func NewTPingServicePingArgs() *TPingServicePingArgs {
  return &TPingServicePingArgs{}
}


func (p *TPingServicePingArgs) GetSeq() int64 {
  return p.Seq
}
func (p *TPingServicePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPingServicePingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TPingServicePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPingServicePingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI64(int64(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TPingServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPingServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TPingServicePingResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTPingServicePingResult() *TPingServicePingResult {
  return &TPingServicePingResult{}
}

var TPingServicePingResult_Success_DEFAULT int64
func (p *TPingServicePingResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TPingServicePingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TPingServicePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TPingServicePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPingServicePingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TPingServicePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPingServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TPingServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPingServicePingResult(%+v)", *p)
}

type TPingServicePing2Args struct {
}

func NewTPingServicePing2Args() *TPingServicePing2Args {
  return &TPingServicePing2Args{}
}

func (p *TPingServicePing2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPingServicePing2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPingServicePing2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPingServicePing2Args(%+v)", *p)
}

type TPingServicePing2Result struct {
}

func NewTPingServicePing2Result() *TPingServicePing2Result {
  return &TPingServicePing2Result{}
}

func (p *TPingServicePing2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPingServicePing2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPingServicePing2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPingServicePing2Result(%+v)", *p)
}


type TContractService interface {
  // Parameters:
  //  - UID
  //  - Appid
  //  - Sid
  //  - Owuid
  //  - Weight
  //  - TemplateId
  AddContractInfoExternal(ctx context.Context, uid int64, appid TAppId, sid int64, owuid int64, weight int32, templateId int32) (r int32, err error)
  // Parameters:
  //  - UID
  //  - Appid
  QueryContractByAnchor(ctx context.Context, uid int64, appid TAppId) (r *TContract, err error)
}

type TContractServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTContractService instead
func NewTContractServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TContractServiceClient {
  return &TContractServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTContractService instead
func NewTContractServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TContractServiceClient {
  return &TContractServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTContractServiceClient(c thrift.TClient) *TContractServiceClient {
  return &TContractServiceClient{
    c: c,
  }
}

// Parameters:
//  - UID
//  - Appid
//  - Sid
//  - Owuid
//  - Weight
//  - TemplateId
func (p *TContractServiceClient) AddContractInfoExternal(ctx context.Context, uid int64, appid TAppId, sid int64, owuid int64, weight int32, templateId int32) (r int32, err error) {
  var _args66 TContractServiceAddContractInfoExternalArgs
  _args66.UID = uid
  _args66.Appid = appid
  _args66.Sid = sid
  _args66.Owuid = owuid
  _args66.Weight = weight
  _args66.TemplateId = templateId
  var _result67 TContractServiceAddContractInfoExternalResult
  if err = p.c.Call(ctx, "addContractInfoExternal", &_args66, &_result67); err != nil {
    return
  }
  return _result67.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Appid
func (p *TContractServiceClient) QueryContractByAnchor(ctx context.Context, uid int64, appid TAppId) (r *TContract, err error) {
  var _args68 TContractServiceQueryContractByAnchorArgs
  _args68.UID = uid
  _args68.Appid = appid
  var _result69 TContractServiceQueryContractByAnchorResult
  if err = p.c.Call(ctx, "queryContractByAnchor", &_args68, &_result69); err != nil {
    return
  }
  return _result69.GetSuccess(), nil
}

type TContractServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TContractService
}

func (p *TContractServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TContractServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TContractServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTContractServiceProcessor(handler TContractService) *TContractServiceProcessor {

  self70 := &TContractServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self70.processorMap["addContractInfoExternal"] = &tContractServiceProcessorAddContractInfoExternal{handler:handler}
  self70.processorMap["queryContractByAnchor"] = &tContractServiceProcessorQueryContractByAnchor{handler:handler}
return self70
}

func (p *TContractServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x71 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x71.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x71

}

type tContractServiceProcessorAddContractInfoExternal struct {
  handler TContractService
}

func (p *tContractServiceProcessorAddContractInfoExternal) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContractServiceAddContractInfoExternalArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addContractInfoExternal", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContractServiceAddContractInfoExternalResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.AddContractInfoExternal(ctx, args.UID, args.Appid, args.Sid, args.Owuid, args.Weight, args.TemplateId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addContractInfoExternal: " + err2.Error())
    oprot.WriteMessageBegin("addContractInfoExternal", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addContractInfoExternal", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContractServiceProcessorQueryContractByAnchor struct {
  handler TContractService
}

func (p *tContractServiceProcessorQueryContractByAnchor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContractServiceQueryContractByAnchorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryContractByAnchor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContractServiceQueryContractByAnchorResult{}
var retval *TContract
  var err2 error
  if retval, err2 = p.handler.QueryContractByAnchor(ctx, args.UID, args.Appid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryContractByAnchor: " + err2.Error())
    oprot.WriteMessageBegin("queryContractByAnchor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryContractByAnchor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
//  - Appid
//  - Sid
//  - Owuid
//  - Weight
//  - TemplateId
type TContractServiceAddContractInfoExternalArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  Sid int64 `thrift:"sid,3" db:"sid" json:"sid"`
  Owuid int64 `thrift:"owuid,4" db:"owuid" json:"owuid"`
  Weight int32 `thrift:"weight,5" db:"weight" json:"weight"`
  TemplateId int32 `thrift:"templateId,6" db:"templateId" json:"templateId"`
}

func NewTContractServiceAddContractInfoExternalArgs() *TContractServiceAddContractInfoExternalArgs {
  return &TContractServiceAddContractInfoExternalArgs{}
}


func (p *TContractServiceAddContractInfoExternalArgs) GetUID() int64 {
  return p.UID
}

func (p *TContractServiceAddContractInfoExternalArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TContractServiceAddContractInfoExternalArgs) GetSid() int64 {
  return p.Sid
}

func (p *TContractServiceAddContractInfoExternalArgs) GetOwuid() int64 {
  return p.Owuid
}

func (p *TContractServiceAddContractInfoExternalArgs) GetWeight() int32 {
  return p.Weight
}

func (p *TContractServiceAddContractInfoExternalArgs) GetTemplateId() int32 {
  return p.TemplateId
}
func (p *TContractServiceAddContractInfoExternalArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Owuid = v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TemplateId = v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addContractInfoExternal_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sid: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owuid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:owuid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Owuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owuid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:owuid: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:weight: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:weight: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("templateId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:templateId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.templateId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:templateId: ", p), err) }
  return err
}

func (p *TContractServiceAddContractInfoExternalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContractServiceAddContractInfoExternalArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContractServiceAddContractInfoExternalResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContractServiceAddContractInfoExternalResult() *TContractServiceAddContractInfoExternalResult {
  return &TContractServiceAddContractInfoExternalResult{}
}

var TContractServiceAddContractInfoExternalResult_Success_DEFAULT int32
func (p *TContractServiceAddContractInfoExternalResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TContractServiceAddContractInfoExternalResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContractServiceAddContractInfoExternalResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContractServiceAddContractInfoExternalResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContractServiceAddContractInfoExternalResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContractServiceAddContractInfoExternalResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addContractInfoExternal_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContractServiceAddContractInfoExternalResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContractServiceAddContractInfoExternalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContractServiceAddContractInfoExternalResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Appid
type TContractServiceQueryContractByAnchorArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewTContractServiceQueryContractByAnchorArgs() *TContractServiceQueryContractByAnchorArgs {
  return &TContractServiceQueryContractByAnchorArgs{}
}


func (p *TContractServiceQueryContractByAnchorArgs) GetUID() int64 {
  return p.UID
}

func (p *TContractServiceQueryContractByAnchorArgs) GetAppid() TAppId {
  return p.Appid
}
func (p *TContractServiceQueryContractByAnchorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContractServiceQueryContractByAnchorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TContractServiceQueryContractByAnchorArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TContractServiceQueryContractByAnchorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryContractByAnchor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContractServiceQueryContractByAnchorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TContractServiceQueryContractByAnchorArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TContractServiceQueryContractByAnchorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContractServiceQueryContractByAnchorArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContractServiceQueryContractByAnchorResult struct {
  Success *TContract `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContractServiceQueryContractByAnchorResult() *TContractServiceQueryContractByAnchorResult {
  return &TContractServiceQueryContractByAnchorResult{}
}

var TContractServiceQueryContractByAnchorResult_Success_DEFAULT *TContract
func (p *TContractServiceQueryContractByAnchorResult) GetSuccess() *TContract {
  if !p.IsSetSuccess() {
    return TContractServiceQueryContractByAnchorResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContractServiceQueryContractByAnchorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContractServiceQueryContractByAnchorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContractServiceQueryContractByAnchorResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TContract{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContractServiceQueryContractByAnchorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryContractByAnchor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContractServiceQueryContractByAnchorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContractServiceQueryContractByAnchorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContractServiceQueryContractByAnchorResult(%+v)", *p)
}


type TPropsService interface {
  // Parameters:
  //  - UID
  //  - Appid
  //  - StartTime
  //  - EndTime
  //  - Page
  //  - Pagesize
  //  - PropIds
  //  - PlayTypes
  QueryAnchorWeekPropsRecieve(ctx context.Context, uid int64, appid TAppId, startTime int64, endTime int64, page int32, pagesize int32, propIds []int32, playTypes []int32) (r *TWeekPropsRecvInfoQueryPage, err error)
  // Parameters:
  //  - Sid
  //  - Appid
  //  - StartTime
  //  - EndTime
  //  - Page
  //  - Pagesize
  //  - UsedUid
  QueryChannelWeekPropsRecieve(ctx context.Context, sid int64, appid TAppId, startTime int64, endTime int64, page int32, pagesize int32, usedUid int64) (r *TWeekPropsRecvInfoQueryPage, err error)
}

type TPropsServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTPropsService instead
func NewTPropsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TPropsServiceClient {
  return &TPropsServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTPropsService instead
func NewTPropsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TPropsServiceClient {
  return &TPropsServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTPropsServiceClient(c thrift.TClient) *TPropsServiceClient {
  return &TPropsServiceClient{
    c: c,
  }
}

// Parameters:
//  - UID
//  - Appid
//  - StartTime
//  - EndTime
//  - Page
//  - Pagesize
//  - PropIds
//  - PlayTypes
func (p *TPropsServiceClient) QueryAnchorWeekPropsRecieve(ctx context.Context, uid int64, appid TAppId, startTime int64, endTime int64, page int32, pagesize int32, propIds []int32, playTypes []int32) (r *TWeekPropsRecvInfoQueryPage, err error) {
  var _args78 TPropsServiceQueryAnchorWeekPropsRecieveArgs
  _args78.UID = uid
  _args78.Appid = appid
  _args78.StartTime = startTime
  _args78.EndTime = endTime
  _args78.Page = page
  _args78.Pagesize = pagesize
  _args78.PropIds = propIds
  _args78.PlayTypes = playTypes
  var _result79 TPropsServiceQueryAnchorWeekPropsRecieveResult
  if err = p.c.Call(ctx, "queryAnchorWeekPropsRecieve", &_args78, &_result79); err != nil {
    return
  }
  return _result79.GetSuccess(), nil
}

// Parameters:
//  - Sid
//  - Appid
//  - StartTime
//  - EndTime
//  - Page
//  - Pagesize
//  - UsedUid
func (p *TPropsServiceClient) QueryChannelWeekPropsRecieve(ctx context.Context, sid int64, appid TAppId, startTime int64, endTime int64, page int32, pagesize int32, usedUid int64) (r *TWeekPropsRecvInfoQueryPage, err error) {
  var _args80 TPropsServiceQueryChannelWeekPropsRecieveArgs
  _args80.Sid = sid
  _args80.Appid = appid
  _args80.StartTime = startTime
  _args80.EndTime = endTime
  _args80.Page = page
  _args80.Pagesize = pagesize
  _args80.UsedUid = usedUid
  var _result81 TPropsServiceQueryChannelWeekPropsRecieveResult
  if err = p.c.Call(ctx, "queryChannelWeekPropsRecieve", &_args80, &_result81); err != nil {
    return
  }
  return _result81.GetSuccess(), nil
}

type TPropsServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TPropsService
}

func (p *TPropsServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TPropsServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TPropsServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTPropsServiceProcessor(handler TPropsService) *TPropsServiceProcessor {

  self82 := &TPropsServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self82.processorMap["queryAnchorWeekPropsRecieve"] = &tPropsServiceProcessorQueryAnchorWeekPropsRecieve{handler:handler}
  self82.processorMap["queryChannelWeekPropsRecieve"] = &tPropsServiceProcessorQueryChannelWeekPropsRecieve{handler:handler}
return self82
}

func (p *TPropsServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x83 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x83.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x83

}

type tPropsServiceProcessorQueryAnchorWeekPropsRecieve struct {
  handler TPropsService
}

func (p *tPropsServiceProcessorQueryAnchorWeekPropsRecieve) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TPropsServiceQueryAnchorWeekPropsRecieveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryAnchorWeekPropsRecieve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TPropsServiceQueryAnchorWeekPropsRecieveResult{}
var retval *TWeekPropsRecvInfoQueryPage
  var err2 error
  if retval, err2 = p.handler.QueryAnchorWeekPropsRecieve(ctx, args.UID, args.Appid, args.StartTime, args.EndTime, args.Page, args.Pagesize, args.PropIds, args.PlayTypes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryAnchorWeekPropsRecieve: " + err2.Error())
    oprot.WriteMessageBegin("queryAnchorWeekPropsRecieve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryAnchorWeekPropsRecieve", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tPropsServiceProcessorQueryChannelWeekPropsRecieve struct {
  handler TPropsService
}

func (p *tPropsServiceProcessorQueryChannelWeekPropsRecieve) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TPropsServiceQueryChannelWeekPropsRecieveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryChannelWeekPropsRecieve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TPropsServiceQueryChannelWeekPropsRecieveResult{}
var retval *TWeekPropsRecvInfoQueryPage
  var err2 error
  if retval, err2 = p.handler.QueryChannelWeekPropsRecieve(ctx, args.Sid, args.Appid, args.StartTime, args.EndTime, args.Page, args.Pagesize, args.UsedUid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryChannelWeekPropsRecieve: " + err2.Error())
    oprot.WriteMessageBegin("queryChannelWeekPropsRecieve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryChannelWeekPropsRecieve", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
//  - Appid
//  - StartTime
//  - EndTime
//  - Page
//  - Pagesize
//  - PropIds
//  - PlayTypes
type TPropsServiceQueryAnchorWeekPropsRecieveArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
  Page int32 `thrift:"page,5" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,6" db:"pagesize" json:"pagesize"`
  PropIds []int32 `thrift:"propIds,7" db:"propIds" json:"propIds"`
  PlayTypes []int32 `thrift:"playTypes,8" db:"playTypes" json:"playTypes"`
}

func NewTPropsServiceQueryAnchorWeekPropsRecieveArgs() *TPropsServiceQueryAnchorWeekPropsRecieveArgs {
  return &TPropsServiceQueryAnchorWeekPropsRecieveArgs{}
}


func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetUID() int64 {
  return p.UID
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetPage() int32 {
  return p.Page
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetPropIds() []int32 {
  return p.PropIds
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) GetPlayTypes() []int32 {
  return p.PlayTypes
}
func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.PropIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem84 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem84 = v
}
    p.PropIds = append(p.PropIds, _elem84)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.PlayTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem85 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem85 = v
}
    p.PlayTypes = append(p.PlayTypes, _elem85)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryAnchorWeekPropsRecieve_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:page: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pagesize: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("propIds", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:propIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PropIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PropIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:propIds: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("playTypes", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:playTypes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PlayTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PlayTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:playTypes: ", p), err) }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPropsServiceQueryAnchorWeekPropsRecieveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TPropsServiceQueryAnchorWeekPropsRecieveResult struct {
  Success *TWeekPropsRecvInfoQueryPage `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTPropsServiceQueryAnchorWeekPropsRecieveResult() *TPropsServiceQueryAnchorWeekPropsRecieveResult {
  return &TPropsServiceQueryAnchorWeekPropsRecieveResult{}
}

var TPropsServiceQueryAnchorWeekPropsRecieveResult_Success_DEFAULT *TWeekPropsRecvInfoQueryPage
func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) GetSuccess() *TWeekPropsRecvInfoQueryPage {
  if !p.IsSetSuccess() {
    return TPropsServiceQueryAnchorWeekPropsRecieveResult_Success_DEFAULT
  }
return p.Success
}
func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TWeekPropsRecvInfoQueryPage{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryAnchorWeekPropsRecieve_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TPropsServiceQueryAnchorWeekPropsRecieveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPropsServiceQueryAnchorWeekPropsRecieveResult(%+v)", *p)
}

// Attributes:
//  - Sid
//  - Appid
//  - StartTime
//  - EndTime
//  - Page
//  - Pagesize
//  - UsedUid
type TPropsServiceQueryChannelWeekPropsRecieveArgs struct {
  Sid int64 `thrift:"sid,1" db:"sid" json:"sid"`
  Appid TAppId `thrift:"appid,2" db:"appid" json:"appid"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
  Page int32 `thrift:"page,5" db:"page" json:"page"`
  Pagesize int32 `thrift:"pagesize,6" db:"pagesize" json:"pagesize"`
  UsedUid int64 `thrift:"usedUid,7" db:"usedUid" json:"usedUid"`
}

func NewTPropsServiceQueryChannelWeekPropsRecieveArgs() *TPropsServiceQueryChannelWeekPropsRecieveArgs {
  return &TPropsServiceQueryChannelWeekPropsRecieveArgs{}
}


func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetSid() int64 {
  return p.Sid
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetAppid() TAppId {
  return p.Appid
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetPage() int32 {
  return p.Page
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetPagesize() int32 {
  return p.Pagesize
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) GetUsedUid() int64 {
  return p.UsedUid
}
func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TAppId(v)
  p.Appid = temp
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Pagesize = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UsedUid = v
}
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryChannelWeekPropsRecieve_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:page: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagesize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pagesize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pagesize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagesize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pagesize: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usedUid", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:usedUid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UsedUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usedUid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:usedUid: ", p), err) }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPropsServiceQueryChannelWeekPropsRecieveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TPropsServiceQueryChannelWeekPropsRecieveResult struct {
  Success *TWeekPropsRecvInfoQueryPage `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTPropsServiceQueryChannelWeekPropsRecieveResult() *TPropsServiceQueryChannelWeekPropsRecieveResult {
  return &TPropsServiceQueryChannelWeekPropsRecieveResult{}
}

var TPropsServiceQueryChannelWeekPropsRecieveResult_Success_DEFAULT *TWeekPropsRecvInfoQueryPage
func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) GetSuccess() *TWeekPropsRecvInfoQueryPage {
  if !p.IsSetSuccess() {
    return TPropsServiceQueryChannelWeekPropsRecieveResult_Success_DEFAULT
  }
return p.Success
}
func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TWeekPropsRecvInfoQueryPage{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryChannelWeekPropsRecieve_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TPropsServiceQueryChannelWeekPropsRecieveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPropsServiceQueryChannelWeekPropsRecieveResult(%+v)", *p)
}


