// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package officialhotline

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
    "bilin/thrift/gen-go/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
// Attributes:
//  - Result_
//  - Response
//  - ErrorMsg
type OfficialHotlineRet struct {
  Result_ string `thrift:"result,1,required" db:"result" json:"result"`
  Response *string `thrift:"response,2" db:"response" json:"response,omitempty"`
  ErrorMsg *string `thrift:"errorMsg,3" db:"errorMsg" json:"errorMsg,omitempty"`
}

func NewOfficialHotlineRet() *OfficialHotlineRet {
  return &OfficialHotlineRet{}
}


func (p *OfficialHotlineRet) GetResult_() string {
  return p.Result_
}
var OfficialHotlineRet_Response_DEFAULT string
func (p *OfficialHotlineRet) GetResponse() string {
  if !p.IsSetResponse() {
    return OfficialHotlineRet_Response_DEFAULT
  }
return *p.Response
}
var OfficialHotlineRet_ErrorMsg_DEFAULT string
func (p *OfficialHotlineRet) GetErrorMsg() string {
  if !p.IsSetErrorMsg() {
    return OfficialHotlineRet_ErrorMsg_DEFAULT
  }
return *p.ErrorMsg
}
func (p *OfficialHotlineRet) IsSetResponse() bool {
  return p.Response != nil
}

func (p *OfficialHotlineRet) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *OfficialHotlineRet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *OfficialHotlineRet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *OfficialHotlineRet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Response = &v
}
  return nil
}

func (p *OfficialHotlineRet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ErrorMsg = &v
}
  return nil
}

func (p *OfficialHotlineRet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OfficialHotlineRet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OfficialHotlineRet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *OfficialHotlineRet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetResponse() {
    if err := oprot.WriteFieldBegin("response", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:response: ", p), err) }
    if err := oprot.WriteString(string(*p.Response)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.response (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:response: ", p), err) }
  }
  return err
}

func (p *OfficialHotlineRet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errorMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMsg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errorMsg: ", p), err) }
  }
  return err
}

func (p *OfficialHotlineRet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OfficialHotlineRet(%+v)", *p)
}

type OfficialHotlineService interface {
  common.BaseService
  //官频接口接口

  //   * 官频切换回调
  //   * sid 频道号
  //   * oldUserId 原主播
  //   * newUserId 新主播
  //   * msg 业务方的透传消息
  //   * resultCode -1 用户不在房间
  // 0 成功
  // -501 查询房间主播身份（join_hot_line）thrift请求异常
  // -502 查询房间主播身份（join_hot_line）身份失败，身份值小于0
  // 
  // Parameters:
  //  - Sid
  //  - OldUserId
  //  - NewUserId_
  //  - Msg
  //  - ResultCode
  SwitchCallback(ctx context.Context, sid int32, oldUserId int64, newUserId int64, msg string, resultCode int32) (r *OfficialHotlineRet, err error)
  // 官频主播上麦成功调用
  // sid 频道号
  // userId 主播ID
  // 
  // Parameters:
  //  - Sid
  //  - UserId
  OnOfficialMike(ctx context.Context, sid int32, userId int64) (r *OfficialHotlineRet, err error)
}

//官频接口接口
type OfficialHotlineServiceClient struct {
  c thrift.TClient
  *common.BaseServiceClient
}

// Deprecated: Use NewOfficialHotlineService instead
func NewOfficialHotlineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OfficialHotlineServiceClient {
  return &OfficialHotlineServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}}

// Deprecated: Use NewOfficialHotlineService instead
func NewOfficialHotlineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OfficialHotlineServiceClient {
  return &OfficialHotlineServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewOfficialHotlineServiceClient(c thrift.TClient) *OfficialHotlineServiceClient {
  return &OfficialHotlineServiceClient{
    c: c,
    BaseServiceClient: common.NewBaseServiceClient(c),
  }
}

//   * 官频切换回调
//   * sid 频道号
//   * oldUserId 原主播
//   * newUserId 新主播
//   * msg 业务方的透传消息
//   * resultCode -1 用户不在房间
// 0 成功
// -501 查询房间主播身份（join_hot_line）thrift请求异常
// -502 查询房间主播身份（join_hot_line）身份失败，身份值小于0
// 
// Parameters:
//  - Sid
//  - OldUserId
//  - NewUserId_
//  - Msg
//  - ResultCode
func (p *OfficialHotlineServiceClient) SwitchCallback(ctx context.Context, sid int32, oldUserId int64, newUserId int64, msg string, resultCode int32) (r *OfficialHotlineRet, err error) {
  var _args0 OfficialHotlineServiceSwitchCallbackArgs
  _args0.Sid = sid
  _args0.OldUserId = oldUserId
  _args0.NewUserId_ = newUserId
  _args0.Msg = msg
  _args0.ResultCode = resultCode
  var _result1 OfficialHotlineServiceSwitchCallbackResult
  if err = p.c.Call(ctx, "switchCallback", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// 官频主播上麦成功调用
// sid 频道号
// userId 主播ID
// 
// Parameters:
//  - Sid
//  - UserId
func (p *OfficialHotlineServiceClient) OnOfficialMike(ctx context.Context, sid int32, userId int64) (r *OfficialHotlineRet, err error) {
  var _args2 OfficialHotlineServiceOnOfficialMikeArgs
  _args2.Sid = sid
  _args2.UserId = userId
  var _result3 OfficialHotlineServiceOnOfficialMikeResult
  if err = p.c.Call(ctx, "onOfficialMike", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type OfficialHotlineServiceProcessor struct {
  *common.BaseServiceProcessor
}

func NewOfficialHotlineServiceProcessor(handler OfficialHotlineService) *OfficialHotlineServiceProcessor {
  self4 := &OfficialHotlineServiceProcessor{common.NewBaseServiceProcessor(handler)}
  self4.AddToProcessorMap("switchCallback", &officialHotlineServiceProcessorSwitchCallback{handler:handler})
  self4.AddToProcessorMap("onOfficialMike", &officialHotlineServiceProcessorOnOfficialMike{handler:handler})
  return self4
}

type officialHotlineServiceProcessorSwitchCallback struct {
  handler OfficialHotlineService
}

func (p *officialHotlineServiceProcessorSwitchCallback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OfficialHotlineServiceSwitchCallbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("switchCallback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OfficialHotlineServiceSwitchCallbackResult{}
var retval *OfficialHotlineRet
  var err2 error
  if retval, err2 = p.handler.SwitchCallback(ctx, args.Sid, args.OldUserId, args.NewUserId_, args.Msg, args.ResultCode); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing switchCallback: " + err2.Error())
    oprot.WriteMessageBegin("switchCallback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("switchCallback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type officialHotlineServiceProcessorOnOfficialMike struct {
  handler OfficialHotlineService
}

func (p *officialHotlineServiceProcessorOnOfficialMike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OfficialHotlineServiceOnOfficialMikeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OfficialHotlineServiceOnOfficialMikeResult{}
var retval *OfficialHotlineRet
  var err2 error
  if retval, err2 = p.handler.OnOfficialMike(ctx, args.Sid, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onOfficialMike: " + err2.Error())
    oprot.WriteMessageBegin("onOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("onOfficialMike", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Sid
//  - OldUserId
//  - NewUserId_
//  - Msg
//  - ResultCode
type OfficialHotlineServiceSwitchCallbackArgs struct {
  Sid int32 `thrift:"sid,1" db:"sid" json:"sid"`
  OldUserId int64 `thrift:"oldUserId,2" db:"oldUserId" json:"oldUserId"`
  NewUserId_ int64 `thrift:"newUserId,3" db:"newUserId" json:"newUserId"`
  Msg string `thrift:"msg,4" db:"msg" json:"msg"`
  ResultCode int32 `thrift:"resultCode,5" db:"resultCode" json:"resultCode"`
}

func NewOfficialHotlineServiceSwitchCallbackArgs() *OfficialHotlineServiceSwitchCallbackArgs {
  return &OfficialHotlineServiceSwitchCallbackArgs{}
}


func (p *OfficialHotlineServiceSwitchCallbackArgs) GetSid() int32 {
  return p.Sid
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) GetOldUserId() int64 {
  return p.OldUserId
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) GetNewUserId_() int64 {
  return p.NewUserId_
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) GetMsg() string {
  return p.Msg
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) GetResultCode() int32 {
  return p.ResultCode
}
func (p *OfficialHotlineServiceSwitchCallbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OldUserId = v
}
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewUserId_ = v
}
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ResultCode = v
}
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("switchCallback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.OldUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUserId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldUserId: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newUserId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.NewUserId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newUserId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newUserId: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resultCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resultCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resultCode: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OfficialHotlineServiceSwitchCallbackArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OfficialHotlineServiceSwitchCallbackResult struct {
  Success *OfficialHotlineRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOfficialHotlineServiceSwitchCallbackResult() *OfficialHotlineServiceSwitchCallbackResult {
  return &OfficialHotlineServiceSwitchCallbackResult{}
}

var OfficialHotlineServiceSwitchCallbackResult_Success_DEFAULT *OfficialHotlineRet
func (p *OfficialHotlineServiceSwitchCallbackResult) GetSuccess() *OfficialHotlineRet {
  if !p.IsSetSuccess() {
    return OfficialHotlineServiceSwitchCallbackResult_Success_DEFAULT
  }
return p.Success
}
func (p *OfficialHotlineServiceSwitchCallbackResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OfficialHotlineServiceSwitchCallbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OfficialHotlineRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("switchCallback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OfficialHotlineServiceSwitchCallbackResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OfficialHotlineServiceSwitchCallbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OfficialHotlineServiceSwitchCallbackResult(%+v)", *p)
}

// Attributes:
//  - Sid
//  - UserId
type OfficialHotlineServiceOnOfficialMikeArgs struct {
  Sid int32 `thrift:"sid,1" db:"sid" json:"sid"`
  UserId int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewOfficialHotlineServiceOnOfficialMikeArgs() *OfficialHotlineServiceOnOfficialMikeArgs {
  return &OfficialHotlineServiceOnOfficialMikeArgs{}
}


func (p *OfficialHotlineServiceOnOfficialMikeArgs) GetSid() int32 {
  return p.Sid
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs) GetUserId() int64 {
  return p.UserId
}
func (p *OfficialHotlineServiceOnOfficialMikeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onOfficialMike_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *OfficialHotlineServiceOnOfficialMikeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OfficialHotlineServiceOnOfficialMikeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OfficialHotlineServiceOnOfficialMikeResult struct {
  Success *OfficialHotlineRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOfficialHotlineServiceOnOfficialMikeResult() *OfficialHotlineServiceOnOfficialMikeResult {
  return &OfficialHotlineServiceOnOfficialMikeResult{}
}

var OfficialHotlineServiceOnOfficialMikeResult_Success_DEFAULT *OfficialHotlineRet
func (p *OfficialHotlineServiceOnOfficialMikeResult) GetSuccess() *OfficialHotlineRet {
  if !p.IsSetSuccess() {
    return OfficialHotlineServiceOnOfficialMikeResult_Success_DEFAULT
  }
return p.Success
}
func (p *OfficialHotlineServiceOnOfficialMikeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OfficialHotlineServiceOnOfficialMikeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OfficialHotlineRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onOfficialMike_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OfficialHotlineServiceOnOfficialMikeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OfficialHotlineServiceOnOfficialMikeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OfficialHotlineServiceOnOfficialMikeResult(%+v)", *p)
}


