// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
    "bilin/thrift/gen-go/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
// 通话过程中加关注调用返回类型
// 
// Attributes:
//  - Result_
//  - ErrorMsg
//  - ClientType
type GetUserForConServerRet struct {
  Result_ string `thrift:"result,1,required" db:"result" json:"result"`
  ErrorMsg *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
  ClientType *string `thrift:"clientType,3" db:"clientType" json:"clientType,omitempty"`
}

func NewGetUserForConServerRet() *GetUserForConServerRet {
  return &GetUserForConServerRet{}
}


func (p *GetUserForConServerRet) GetResult_() string {
  return p.Result_
}
var GetUserForConServerRet_ErrorMsg_DEFAULT string
func (p *GetUserForConServerRet) GetErrorMsg() string {
  if !p.IsSetErrorMsg() {
    return GetUserForConServerRet_ErrorMsg_DEFAULT
  }
return *p.ErrorMsg
}
var GetUserForConServerRet_ClientType_DEFAULT string
func (p *GetUserForConServerRet) GetClientType() string {
  if !p.IsSetClientType() {
    return GetUserForConServerRet_ClientType_DEFAULT
  }
return *p.ClientType
}
func (p *GetUserForConServerRet) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *GetUserForConServerRet) IsSetClientType() bool {
  return p.ClientType != nil
}

func (p *GetUserForConServerRet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetUserForConServerRet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *GetUserForConServerRet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = &v
}
  return nil
}

func (p *GetUserForConServerRet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClientType = &v
}
  return nil
}

func (p *GetUserForConServerRet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserForConServerRet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserForConServerRet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetUserForConServerRet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err) }
  }
  return err
}

func (p *GetUserForConServerRet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientType() {
    if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientType: ", p), err) }
    if err := oprot.WriteString(string(*p.ClientType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clientType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientType: ", p), err) }
  }
  return err
}

func (p *GetUserForConServerRet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserForConServerRet(%+v)", *p)
}

// 查询关注用户的人数
// 
// Attributes:
//  - Result_
//  - ErrorMsg
//  - AttentionMeCountMap
type QueryAttentionMeCountRet struct {
  Result_ string `thrift:"result,1,required" db:"result" json:"result"`
  ErrorMsg *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
  AttentionMeCountMap map[int64]int64 `thrift:"attentionMeCountMap,3" db:"attentionMeCountMap" json:"attentionMeCountMap,omitempty"`
}

func NewQueryAttentionMeCountRet() *QueryAttentionMeCountRet {
  return &QueryAttentionMeCountRet{}
}


func (p *QueryAttentionMeCountRet) GetResult_() string {
  return p.Result_
}
var QueryAttentionMeCountRet_ErrorMsg_DEFAULT string
func (p *QueryAttentionMeCountRet) GetErrorMsg() string {
  if !p.IsSetErrorMsg() {
    return QueryAttentionMeCountRet_ErrorMsg_DEFAULT
  }
return *p.ErrorMsg
}
var QueryAttentionMeCountRet_AttentionMeCountMap_DEFAULT map[int64]int64

func (p *QueryAttentionMeCountRet) GetAttentionMeCountMap() map[int64]int64 {
  return p.AttentionMeCountMap
}
func (p *QueryAttentionMeCountRet) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *QueryAttentionMeCountRet) IsSetAttentionMeCountMap() bool {
  return p.AttentionMeCountMap != nil
}

func (p *QueryAttentionMeCountRet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *QueryAttentionMeCountRet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *QueryAttentionMeCountRet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = &v
}
  return nil
}

func (p *QueryAttentionMeCountRet)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]int64, size)
  p.AttentionMeCountMap =  tMap
  for i := 0; i < size; i ++ {
var _key0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.AttentionMeCountMap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QueryAttentionMeCountRet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryAttentionMeCountRet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAttentionMeCountRet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *QueryAttentionMeCountRet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err) }
  }
  return err
}

func (p *QueryAttentionMeCountRet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttentionMeCountMap() {
    if err := oprot.WriteFieldBegin("attentionMeCountMap", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attentionMeCountMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.AttentionMeCountMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.AttentionMeCountMap {
      if err := oprot.WriteI64(int64(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attentionMeCountMap: ", p), err) }
  }
  return err
}

func (p *QueryAttentionMeCountRet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAttentionMeCountRet(%+v)", *p)
}

type UserService interface {
  common.BaseService
  //用户相关服务接口

  // Parameters:
  //  - UserIds
  //  - BilinIds
  InternalHttpForbidUser(ctx context.Context, userIds string, bilinIds string) (r *common.ComRet, err error)
  // Parameters:
  //  - UserId
  //  - FromUserId
  //  - GroupId
  //  - IfPush
  //  - RequestType
  GetUserForConServer(ctx context.Context, userId int64, fromUserId int64, groupId int64, ifPush bool, requestType string) (r *GetUserForConServerRet, err error)
  // Parameters:
  //  - UserList
  QueryAttentionMeCount(ctx context.Context, userList []int64) (r *QueryAttentionMeCountRet, err error)
}

//用户相关服务接口
type UserServiceClient struct {
  c thrift.TClient
  *common.BaseServiceClient
}

// Deprecated: Use NewUserService instead
func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}}

// Deprecated: Use NewUserService instead
func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
    BaseServiceClient: common.NewBaseServiceClient(c),
  }
}

// Parameters:
//  - UserIds
//  - BilinIds
func (p *UserServiceClient) InternalHttpForbidUser(ctx context.Context, userIds string, bilinIds string) (r *common.ComRet, err error) {
  var _args2 UserServiceInternalHttpForbidUserArgs
  _args2.UserIds = userIds
  _args2.BilinIds = bilinIds
  var _result3 UserServiceInternalHttpForbidUserResult
  if err = p.c.Call(ctx, "internalHttpForbidUser", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - FromUserId
//  - GroupId
//  - IfPush
//  - RequestType
func (p *UserServiceClient) GetUserForConServer(ctx context.Context, userId int64, fromUserId int64, groupId int64, ifPush bool, requestType string) (r *GetUserForConServerRet, err error) {
  var _args4 UserServiceGetUserForConServerArgs
  _args4.UserId = userId
  _args4.FromUserId = fromUserId
  _args4.GroupId = groupId
  _args4.IfPush = ifPush
  _args4.RequestType = requestType
  var _result5 UserServiceGetUserForConServerResult
  if err = p.c.Call(ctx, "getUserForConServer", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - UserList
func (p *UserServiceClient) QueryAttentionMeCount(ctx context.Context, userList []int64) (r *QueryAttentionMeCountRet, err error) {
  var _args6 UserServiceQueryAttentionMeCountArgs
  _args6.UserList = userList
  var _result7 UserServiceQueryAttentionMeCountResult
  if err = p.c.Call(ctx, "QueryAttentionMeCount", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type UserServiceProcessor struct {
  *common.BaseServiceProcessor
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {
  self8 := &UserServiceProcessor{common.NewBaseServiceProcessor(handler)}
  self8.AddToProcessorMap("internalHttpForbidUser", &userServiceProcessorInternalHttpForbidUser{handler:handler})
  self8.AddToProcessorMap("getUserForConServer", &userServiceProcessorGetUserForConServer{handler:handler})
  self8.AddToProcessorMap("QueryAttentionMeCount", &userServiceProcessorQueryAttentionMeCount{handler:handler})
  return self8
}

type userServiceProcessorInternalHttpForbidUser struct {
  handler UserService
}

func (p *userServiceProcessorInternalHttpForbidUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceInternalHttpForbidUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("internalHttpForbidUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceInternalHttpForbidUserResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.InternalHttpForbidUser(ctx, args.UserIds, args.BilinIds); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing internalHttpForbidUser: " + err2.Error())
    oprot.WriteMessageBegin("internalHttpForbidUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("internalHttpForbidUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserForConServer struct {
  handler UserService
}

func (p *userServiceProcessorGetUserForConServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserForConServerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserForConServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserForConServerResult{}
var retval *GetUserForConServerRet
  var err2 error
  if retval, err2 = p.handler.GetUserForConServer(ctx, args.UserId, args.FromUserId, args.GroupId, args.IfPush, args.RequestType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserForConServer: " + err2.Error())
    oprot.WriteMessageBegin("getUserForConServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserForConServer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorQueryAttentionMeCount struct {
  handler UserService
}

func (p *userServiceProcessorQueryAttentionMeCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceQueryAttentionMeCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("QueryAttentionMeCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceQueryAttentionMeCountResult{}
var retval *QueryAttentionMeCountRet
  var err2 error
  if retval, err2 = p.handler.QueryAttentionMeCount(ctx, args.UserList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryAttentionMeCount: " + err2.Error())
    oprot.WriteMessageBegin("QueryAttentionMeCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("QueryAttentionMeCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserIds
//  - BilinIds
type UserServiceInternalHttpForbidUserArgs struct {
  UserIds string `thrift:"userIds,1" db:"userIds" json:"userIds"`
  BilinIds string `thrift:"bilinIds,2" db:"bilinIds" json:"bilinIds"`
}

func NewUserServiceInternalHttpForbidUserArgs() *UserServiceInternalHttpForbidUserArgs {
  return &UserServiceInternalHttpForbidUserArgs{}
}


func (p *UserServiceInternalHttpForbidUserArgs) GetUserIds() string {
  return p.UserIds
}

func (p *UserServiceInternalHttpForbidUserArgs) GetBilinIds() string {
  return p.BilinIds
}
func (p *UserServiceInternalHttpForbidUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceInternalHttpForbidUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserIds = v
}
  return nil
}

func (p *UserServiceInternalHttpForbidUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BilinIds = v
}
  return nil
}

func (p *UserServiceInternalHttpForbidUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("internalHttpForbidUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceInternalHttpForbidUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userIds", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userIds: ", p), err) }
  if err := oprot.WriteString(string(p.UserIds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userIds (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userIds: ", p), err) }
  return err
}

func (p *UserServiceInternalHttpForbidUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bilinIds", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bilinIds: ", p), err) }
  if err := oprot.WriteString(string(p.BilinIds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bilinIds (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bilinIds: ", p), err) }
  return err
}

func (p *UserServiceInternalHttpForbidUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceInternalHttpForbidUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceInternalHttpForbidUserResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceInternalHttpForbidUserResult() *UserServiceInternalHttpForbidUserResult {
  return &UserServiceInternalHttpForbidUserResult{}
}

var UserServiceInternalHttpForbidUserResult_Success_DEFAULT *common.ComRet
func (p *UserServiceInternalHttpForbidUserResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return UserServiceInternalHttpForbidUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceInternalHttpForbidUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceInternalHttpForbidUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceInternalHttpForbidUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceInternalHttpForbidUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("internalHttpForbidUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceInternalHttpForbidUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceInternalHttpForbidUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceInternalHttpForbidUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - FromUserId
//  - GroupId
//  - IfPush
//  - RequestType
type UserServiceGetUserForConServerArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  FromUserId int64 `thrift:"fromUserId,2" db:"fromUserId" json:"fromUserId"`
  GroupId int64 `thrift:"groupId,3" db:"groupId" json:"groupId"`
  IfPush bool `thrift:"ifPush,4" db:"ifPush" json:"ifPush"`
  RequestType string `thrift:"requestType,5" db:"requestType" json:"requestType"`
}

func NewUserServiceGetUserForConServerArgs() *UserServiceGetUserForConServerArgs {
  return &UserServiceGetUserForConServerArgs{}
}


func (p *UserServiceGetUserForConServerArgs) GetUserId() int64 {
  return p.UserId
}

func (p *UserServiceGetUserForConServerArgs) GetFromUserId() int64 {
  return p.FromUserId
}

func (p *UserServiceGetUserForConServerArgs) GetGroupId() int64 {
  return p.GroupId
}

func (p *UserServiceGetUserForConServerArgs) GetIfPush() bool {
  return p.IfPush
}

func (p *UserServiceGetUserForConServerArgs) GetRequestType() string {
  return p.RequestType
}
func (p *UserServiceGetUserForConServerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserForConServerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceGetUserForConServerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromUserId = v
}
  return nil
}

func (p *UserServiceGetUserForConServerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *UserServiceGetUserForConServerArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfPush = v
}
  return nil
}

func (p *UserServiceGetUserForConServerArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RequestType = v
}
  return nil
}

func (p *UserServiceGetUserForConServerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserForConServer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserForConServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserServiceGetUserForConServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromUserId: ", p), err) }
  return err
}

func (p *UserServiceGetUserForConServerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupId: ", p), err) }
  return err
}

func (p *UserServiceGetUserForConServerArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ifPush", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ifPush: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfPush)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifPush (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ifPush: ", p), err) }
  return err
}

func (p *UserServiceGetUserForConServerArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestType", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requestType: ", p), err) }
  if err := oprot.WriteString(string(p.RequestType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requestType: ", p), err) }
  return err
}

func (p *UserServiceGetUserForConServerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserForConServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserForConServerResult struct {
  Success *GetUserForConServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserForConServerResult() *UserServiceGetUserForConServerResult {
  return &UserServiceGetUserForConServerResult{}
}

var UserServiceGetUserForConServerResult_Success_DEFAULT *GetUserForConServerRet
func (p *UserServiceGetUserForConServerResult) GetSuccess() *GetUserForConServerRet {
  if !p.IsSetSuccess() {
    return UserServiceGetUserForConServerResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceGetUserForConServerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserForConServerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserForConServerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserForConServerRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceGetUserForConServerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserForConServer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserForConServerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserForConServerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserForConServerResult(%+v)", *p)
}

// Attributes:
//  - UserList
type UserServiceQueryAttentionMeCountArgs struct {
  UserList []int64 `thrift:"userList,1" db:"userList" json:"userList"`
}

func NewUserServiceQueryAttentionMeCountArgs() *UserServiceQueryAttentionMeCountArgs {
  return &UserServiceQueryAttentionMeCountArgs{}
}


func (p *UserServiceQueryAttentionMeCountArgs) GetUserList() []int64 {
  return p.UserList
}
func (p *UserServiceQueryAttentionMeCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceQueryAttentionMeCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.UserList =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.UserList = append(p.UserList, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserServiceQueryAttentionMeCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryAttentionMeCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceQueryAttentionMeCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.UserList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserList {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userList: ", p), err) }
  return err
}

func (p *UserServiceQueryAttentionMeCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceQueryAttentionMeCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceQueryAttentionMeCountResult struct {
  Success *QueryAttentionMeCountRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceQueryAttentionMeCountResult() *UserServiceQueryAttentionMeCountResult {
  return &UserServiceQueryAttentionMeCountResult{}
}

var UserServiceQueryAttentionMeCountResult_Success_DEFAULT *QueryAttentionMeCountRet
func (p *UserServiceQueryAttentionMeCountResult) GetSuccess() *QueryAttentionMeCountRet {
  if !p.IsSetSuccess() {
    return UserServiceQueryAttentionMeCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceQueryAttentionMeCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceQueryAttentionMeCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceQueryAttentionMeCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &QueryAttentionMeCountRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceQueryAttentionMeCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryAttentionMeCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceQueryAttentionMeCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceQueryAttentionMeCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceQueryAttentionMeCountResult(%+v)", *p)
}


