// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package meeting

import (
	"bilin/thrift/gen-go/common"
	"bytes"
	"context"
	"fmt"
	"reflect"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__

// 会议话题
//
// Attributes:
//  - ID
//  - Topic
type Topic struct {
	ID    int64  `thrift:"id,1,required" db:"id" json:"id"`
	Topic string `thrift:"topic,2,required" db:"topic" json:"topic"`
}

func NewTopic() *Topic {
	return &Topic{}
}

func (p *Topic) GetID() int64 {
	return p.ID
}

func (p *Topic) GetTopic() string {
	return p.Topic
}
func (p *Topic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetTopic bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetID = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetTopic = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetTopic {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Topic is not set"))
	}
	return nil
}

func (p *Topic) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Topic) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *Topic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Topic"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Topic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Topic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic: ", p), err)
	}
	return err
}

func (p *Topic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Topic(%+v)", *p)
}

// CC服务方需要的获取所有的会议话题的配置
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - MeetingTopicList
type QueryAllMeetingTopicListByCCServerRet struct {
	Result_          string   `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg         *string  `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	MeetingTopicList []*Topic `thrift:"meetingTopicList,3" db:"meetingTopicList" json:"meetingTopicList,omitempty"`
}

func NewQueryAllMeetingTopicListByCCServerRet() *QueryAllMeetingTopicListByCCServerRet {
	return &QueryAllMeetingTopicListByCCServerRet{}
}

func (p *QueryAllMeetingTopicListByCCServerRet) GetResult_() string {
	return p.Result_
}

var QueryAllMeetingTopicListByCCServerRet_ErrorMsg_DEFAULT string

func (p *QueryAllMeetingTopicListByCCServerRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryAllMeetingTopicListByCCServerRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryAllMeetingTopicListByCCServerRet_MeetingTopicList_DEFAULT []*Topic

func (p *QueryAllMeetingTopicListByCCServerRet) GetMeetingTopicList() []*Topic {
	return p.MeetingTopicList
}
func (p *QueryAllMeetingTopicListByCCServerRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) IsSetMeetingTopicList() bool {
	return p.MeetingTopicList != nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Topic, 0, size)
	p.MeetingTopicList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Topic{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.MeetingTopicList = append(p.MeetingTopicList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryAllMeetingTopicListByCCServerRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryAllMeetingTopicListByCCServerRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryAllMeetingTopicListByCCServerRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryAllMeetingTopicListByCCServerRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeetingTopicList() {
		if err := oprot.WriteFieldBegin("meetingTopicList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meetingTopicList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MeetingTopicList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MeetingTopicList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meetingTopicList: ", p), err)
		}
	}
	return err
}

func (p *QueryAllMeetingTopicListByCCServerRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllMeetingTopicListByCCServerRet(%+v)", *p)
}

// 会议昵称
//
// Attributes:
//  - ID
//  - BoyNick
//  - GirlNick
//  - Title
type Nickname struct {
	ID       int64    `thrift:"id,1,required" db:"id" json:"id"`
	BoyNick  []string `thrift:"boyNick,2,required" db:"boyNick" json:"boyNick"`
	GirlNick []string `thrift:"girlNick,3,required" db:"girlNick" json:"girlNick"`
	Title    string   `thrift:"title,4,required" db:"title" json:"title"`
}

func NewNickname() *Nickname {
	return &Nickname{}
}

func (p *Nickname) GetID() int64 {
	return p.ID
}

func (p *Nickname) GetBoyNick() []string {
	return p.BoyNick
}

func (p *Nickname) GetGirlNick() []string {
	return p.GirlNick
}

func (p *Nickname) GetTitle() string {
	return p.Title
}
func (p *Nickname) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetBoyNick bool = false
	var issetGirlNick bool = false
	var issetTitle bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetID = true
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetBoyNick = true
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetGirlNick = true
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetTitle = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetBoyNick {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BoyNick is not set"))
	}
	if !issetGirlNick {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GirlNick is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	return nil
}

func (p *Nickname) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Nickname) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.BoyNick = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.BoyNick = append(p.BoyNick, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Nickname) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GirlNick = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.GirlNick = append(p.GirlNick, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Nickname) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Nickname) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Nickname"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Nickname) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Nickname) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("boyNick", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boyNick: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BoyNick)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BoyNick {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boyNick: ", p), err)
	}
	return err
}

func (p *Nickname) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("girlNick", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:girlNick: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GirlNick)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GirlNick {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:girlNick: ", p), err)
	}
	return err
}

func (p *Nickname) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
	}
	return err
}

func (p *Nickname) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Nickname(%+v)", *p)
}

// 获取所有的会议昵称配置
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - NicknameList
type QueryAllMeetingNicknameByCCServerRet struct {
	Result_      string      `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg     *string     `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	NicknameList []*Nickname `thrift:"nicknameList,3" db:"nicknameList" json:"nicknameList,omitempty"`
}

func NewQueryAllMeetingNicknameByCCServerRet() *QueryAllMeetingNicknameByCCServerRet {
	return &QueryAllMeetingNicknameByCCServerRet{}
}

func (p *QueryAllMeetingNicknameByCCServerRet) GetResult_() string {
	return p.Result_
}

var QueryAllMeetingNicknameByCCServerRet_ErrorMsg_DEFAULT string

func (p *QueryAllMeetingNicknameByCCServerRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryAllMeetingNicknameByCCServerRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryAllMeetingNicknameByCCServerRet_NicknameList_DEFAULT []*Nickname

func (p *QueryAllMeetingNicknameByCCServerRet) GetNicknameList() []*Nickname {
	return p.NicknameList
}
func (p *QueryAllMeetingNicknameByCCServerRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) IsSetNicknameList() bool {
	return p.NicknameList != nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Nickname, 0, size)
	p.NicknameList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &Nickname{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.NicknameList = append(p.NicknameList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryAllMeetingNicknameByCCServerRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryAllMeetingNicknameByCCServerRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryAllMeetingNicknameByCCServerRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryAllMeetingNicknameByCCServerRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNicknameList() {
		if err := oprot.WriteFieldBegin("nicknameList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nicknameList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NicknameList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.NicknameList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nicknameList: ", p), err)
		}
	}
	return err
}

func (p *QueryAllMeetingNicknameByCCServerRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllMeetingNicknameByCCServerRet(%+v)", *p)
}

// 用户设备信息
//
// Attributes:
//  - UserId
//  - Version
//  - ClientType
//  - OsVersion
type UserAgent struct {
	UserId     int64  `thrift:"userId,1,required" db:"userId" json:"userId"`
	Version    string `thrift:"version,2,required" db:"version" json:"version"`
	ClientType string `thrift:"clientType,3,required" db:"clientType" json:"clientType"`
	OsVersion  string `thrift:"osVersion,4,required" db:"osVersion" json:"osVersion"`
}

func NewUserAgent() *UserAgent {
	return &UserAgent{}
}

func (p *UserAgent) GetUserId() int64 {
	return p.UserId
}

func (p *UserAgent) GetVersion() string {
	return p.Version
}

func (p *UserAgent) GetClientType() string {
	return p.ClientType
}

func (p *UserAgent) GetOsVersion() string {
	return p.OsVersion
}
func (p *UserAgent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserId bool = false
	var issetVersion bool = false
	var issetClientType bool = false
	var issetOsVersion bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetUserId = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetVersion = true
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetClientType = true
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetOsVersion = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"))
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetClientType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientType is not set"))
	}
	if !issetOsVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OsVersion is not set"))
	}
	return nil
}

func (p *UserAgent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserAgent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *UserAgent) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ClientType = v
	}
	return nil
}

func (p *UserAgent) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OsVersion = v
	}
	return nil
}

func (p *UserAgent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAgent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAgent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserAgent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *UserAgent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientType: ", p), err)
	}
	return err
}

func (p *UserAgent) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("osVersion", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:osVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.OsVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.osVersion (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:osVersion: ", p), err)
	}
	return err
}

func (p *UserAgent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAgent(%+v)", *p)
}

// 批量获取用户设备信息接口调用返回对象
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - UserList
type QueryUserDeviceInfoByCCServerRet struct {
	Result_  string       `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg *string      `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	UserList []*UserAgent `thrift:"userList,3" db:"userList" json:"userList,omitempty"`
}

func NewQueryUserDeviceInfoByCCServerRet() *QueryUserDeviceInfoByCCServerRet {
	return &QueryUserDeviceInfoByCCServerRet{}
}

func (p *QueryUserDeviceInfoByCCServerRet) GetResult_() string {
	return p.Result_
}

var QueryUserDeviceInfoByCCServerRet_ErrorMsg_DEFAULT string

func (p *QueryUserDeviceInfoByCCServerRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryUserDeviceInfoByCCServerRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryUserDeviceInfoByCCServerRet_UserList_DEFAULT []*UserAgent

func (p *QueryUserDeviceInfoByCCServerRet) GetUserList() []*UserAgent {
	return p.UserList
}
func (p *QueryUserDeviceInfoByCCServerRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryUserDeviceInfoByCCServerRet) IsSetUserList() bool {
	return p.UserList != nil
}

func (p *QueryUserDeviceInfoByCCServerRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryUserDeviceInfoByCCServerRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryUserDeviceInfoByCCServerRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryUserDeviceInfoByCCServerRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserAgent, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &UserAgent{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.UserList = append(p.UserList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryUserDeviceInfoByCCServerRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserDeviceInfoByCCServerRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryUserDeviceInfoByCCServerRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryUserDeviceInfoByCCServerRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryUserDeviceInfoByCCServerRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserList() {
		if err := oprot.WriteFieldBegin("userList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userList: ", p), err)
		}
	}
	return err
}

func (p *QueryUserDeviceInfoByCCServerRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserDeviceInfoByCCServerRet(%+v)", *p)
}

// 根据话题类型获取话题列表接口调用返回对象
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - MeettingTopicList
type QueryTopicListByCCServerRet struct {
	Result_           string   `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg          *string  `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	MeettingTopicList []*Topic `thrift:"meettingTopicList,3" db:"meettingTopicList" json:"meettingTopicList,omitempty"`
}

func NewQueryTopicListByCCServerRet() *QueryTopicListByCCServerRet {
	return &QueryTopicListByCCServerRet{}
}

func (p *QueryTopicListByCCServerRet) GetResult_() string {
	return p.Result_
}

var QueryTopicListByCCServerRet_ErrorMsg_DEFAULT string

func (p *QueryTopicListByCCServerRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryTopicListByCCServerRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryTopicListByCCServerRet_MeettingTopicList_DEFAULT []*Topic

func (p *QueryTopicListByCCServerRet) GetMeettingTopicList() []*Topic {
	return p.MeettingTopicList
}
func (p *QueryTopicListByCCServerRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryTopicListByCCServerRet) IsSetMeettingTopicList() bool {
	return p.MeettingTopicList != nil
}

func (p *QueryTopicListByCCServerRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryTopicListByCCServerRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryTopicListByCCServerRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryTopicListByCCServerRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Topic, 0, size)
	p.MeettingTopicList = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &Topic{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.MeettingTopicList = append(p.MeettingTopicList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryTopicListByCCServerRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopicListByCCServerRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryTopicListByCCServerRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryTopicListByCCServerRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryTopicListByCCServerRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeettingTopicList() {
		if err := oprot.WriteFieldBegin("meettingTopicList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meettingTopicList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MeettingTopicList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MeettingTopicList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meettingTopicList: ", p), err)
		}
	}
	return err
}

func (p *QueryTopicListByCCServerRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicListByCCServerRet(%+v)", *p)
}

// 超能力标签
//
// Attributes:
//  - ID
//  - Name
//  - IconImgUrl
//  - TagImgUrl
type SuperPowerTag struct {
	ID         int64  `thrift:"id,1,required" db:"id" json:"id"`
	Name       string `thrift:"name,2,required" db:"name" json:"name"`
	IconImgUrl string `thrift:"iconImgUrl,3,required" db:"iconImgUrl" json:"iconImgUrl"`
	TagImgUrl  string `thrift:"tagImgUrl,4,required" db:"tagImgUrl" json:"tagImgUrl"`
}

func NewSuperPowerTag() *SuperPowerTag {
	return &SuperPowerTag{}
}

func (p *SuperPowerTag) GetID() int64 {
	return p.ID
}

func (p *SuperPowerTag) GetName() string {
	return p.Name
}

func (p *SuperPowerTag) GetIconImgUrl() string {
	return p.IconImgUrl
}

func (p *SuperPowerTag) GetTagImgUrl() string {
	return p.TagImgUrl
}
func (p *SuperPowerTag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetIconImgUrl bool = false
	var issetTagImgUrl bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetID = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetName = true
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetIconImgUrl = true
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetTagImgUrl = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetIconImgUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IconImgUrl is not set"))
	}
	if !issetTagImgUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TagImgUrl is not set"))
	}
	return nil
}

func (p *SuperPowerTag) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SuperPowerTag) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SuperPowerTag) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IconImgUrl = v
	}
	return nil
}

func (p *SuperPowerTag) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TagImgUrl = v
	}
	return nil
}

func (p *SuperPowerTag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SuperPowerTag"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SuperPowerTag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SuperPowerTag) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *SuperPowerTag) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iconImgUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iconImgUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.IconImgUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iconImgUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iconImgUrl: ", p), err)
	}
	return err
}

func (p *SuperPowerTag) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagImgUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tagImgUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.TagImgUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tagImgUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tagImgUrl: ", p), err)
	}
	return err
}

func (p *SuperPowerTag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SuperPowerTag(%+v)", *p)
}

// 获取所有的会议超能力配置接口调用返回对象
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - TagList
type QueryAllSuperPowerTagListByCCServerRet struct {
	Result_  string           `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg *string          `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	TagList  []*SuperPowerTag `thrift:"tagList,3" db:"tagList" json:"tagList,omitempty"`
}

func NewQueryAllSuperPowerTagListByCCServerRet() *QueryAllSuperPowerTagListByCCServerRet {
	return &QueryAllSuperPowerTagListByCCServerRet{}
}

func (p *QueryAllSuperPowerTagListByCCServerRet) GetResult_() string {
	return p.Result_
}

var QueryAllSuperPowerTagListByCCServerRet_ErrorMsg_DEFAULT string

func (p *QueryAllSuperPowerTagListByCCServerRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryAllSuperPowerTagListByCCServerRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryAllSuperPowerTagListByCCServerRet_TagList_DEFAULT []*SuperPowerTag

func (p *QueryAllSuperPowerTagListByCCServerRet) GetTagList() []*SuperPowerTag {
	return p.TagList
}
func (p *QueryAllSuperPowerTagListByCCServerRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) IsSetTagList() bool {
	return p.TagList != nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SuperPowerTag, 0, size)
	p.TagList = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &SuperPowerTag{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.TagList = append(p.TagList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryAllSuperPowerTagListByCCServerRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryAllSuperPowerTagListByCCServerRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryAllSuperPowerTagListByCCServerRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryAllSuperPowerTagListByCCServerRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagList() {
		if err := oprot.WriteFieldBegin("tagList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagList: ", p), err)
		}
	}
	return err
}

func (p *QueryAllSuperPowerTagListByCCServerRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllSuperPowerTagListByCCServerRet(%+v)", *p)
}

// 是否能踢人接口调用返回对象
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - IsCanKickout
//  - IsNewPipe
//  - ForbidLevel
//  - ForbidPrompt
type IsCanKickOutRet struct {
	Result_      string  `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg     *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	IsCanKickout *int32  `thrift:"isCanKickout,3" db:"isCanKickout" json:"isCanKickout,omitempty"`
	IsNewPipe    *int32  `thrift:"isNewPipe,4" db:"isNewPipe" json:"isNewPipe,omitempty"`
	ForbidLevel  *int32  `thrift:"forbidLevel,5" db:"forbidLevel" json:"forbidLevel,omitempty"`
	ForbidPrompt *string `thrift:"forbidPrompt,6" db:"forbidPrompt" json:"forbidPrompt,omitempty"`
}

func NewIsCanKickOutRet() *IsCanKickOutRet {
	return &IsCanKickOutRet{}
}

func (p *IsCanKickOutRet) GetResult_() string {
	return p.Result_
}

var IsCanKickOutRet_ErrorMsg_DEFAULT string

func (p *IsCanKickOutRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return IsCanKickOutRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var IsCanKickOutRet_IsCanKickout_DEFAULT int32

func (p *IsCanKickOutRet) GetIsCanKickout() int32 {
	if !p.IsSetIsCanKickout() {
		return IsCanKickOutRet_IsCanKickout_DEFAULT
	}
	return *p.IsCanKickout
}

var IsCanKickOutRet_IsNewPipe_DEFAULT int32

func (p *IsCanKickOutRet) GetIsNewPipe() int32 {
	if !p.IsSetIsNewPipe() {
		return IsCanKickOutRet_IsNewPipe_DEFAULT
	}
	return *p.IsNewPipe
}

var IsCanKickOutRet_ForbidLevel_DEFAULT int32

func (p *IsCanKickOutRet) GetForbidLevel() int32 {
	if !p.IsSetForbidLevel() {
		return IsCanKickOutRet_ForbidLevel_DEFAULT
	}
	return *p.ForbidLevel
}

var IsCanKickOutRet_ForbidPrompt_DEFAULT string

func (p *IsCanKickOutRet) GetForbidPrompt() string {
	if !p.IsSetForbidPrompt() {
		return IsCanKickOutRet_ForbidPrompt_DEFAULT
	}
	return *p.ForbidPrompt
}
func (p *IsCanKickOutRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *IsCanKickOutRet) IsSetIsCanKickout() bool {
	return p.IsCanKickout != nil
}

func (p *IsCanKickOutRet) IsSetIsNewPipe() bool {
	return p.IsNewPipe != nil
}

func (p *IsCanKickOutRet) IsSetForbidLevel() bool {
	return p.ForbidLevel != nil
}

func (p *IsCanKickOutRet) IsSetForbidPrompt() bool {
	return p.ForbidPrompt != nil
}

func (p *IsCanKickOutRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsCanKickout = &v
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsNewPipe = &v
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ForbidLevel = &v
	}
	return nil
}

func (p *IsCanKickOutRet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ForbidPrompt = &v
	}
	return nil
}

func (p *IsCanKickOutRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsCanKickOutRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IsCanKickOutRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *IsCanKickOutRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *IsCanKickOutRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCanKickout() {
		if err := oprot.WriteFieldBegin("isCanKickout", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isCanKickout: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IsCanKickout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isCanKickout (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isCanKickout: ", p), err)
		}
	}
	return err
}

func (p *IsCanKickOutRet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNewPipe() {
		if err := oprot.WriteFieldBegin("isNewPipe", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isNewPipe: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IsNewPipe)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isNewPipe (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isNewPipe: ", p), err)
		}
	}
	return err
}

func (p *IsCanKickOutRet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidLevel() {
		if err := oprot.WriteFieldBegin("forbidLevel", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:forbidLevel: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ForbidLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.forbidLevel (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:forbidLevel: ", p), err)
		}
	}
	return err
}

func (p *IsCanKickOutRet) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidPrompt() {
		if err := oprot.WriteFieldBegin("forbidPrompt", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:forbidPrompt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ForbidPrompt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.forbidPrompt (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:forbidPrompt: ", p), err)
		}
	}
	return err
}

func (p *IsCanKickOutRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsCanKickOutRet(%+v)", *p)
}

// 用户信息
//
// Attributes:
//  - UserId
//  - Nickname
//  - RcUrl
//  - Sex
//  - Age
//  - NumOfFlower
//  - SmallUrl
type MeetingUser struct {
	UserId      int64   `thrift:"userId,1,required" db:"userId" json:"userId"`
	Nickname    *string `thrift:"nickname,2" db:"nickname" json:"nickname,omitempty"`
	RcUrl       *string `thrift:"rcUrl,3" db:"rcUrl" json:"rcUrl,omitempty"`
	Sex         *int32  `thrift:"sex,4" db:"sex" json:"sex,omitempty"`
	Age         *int32  `thrift:"age,5" db:"age" json:"age,omitempty"`
	NumOfFlower *int64  `thrift:"numOfFlower,6" db:"numOfFlower" json:"numOfFlower,omitempty"`
	SmallUrl    *string `thrift:"smallUrl,7" db:"smallUrl" json:"smallUrl,omitempty"`
}

func NewMeetingUser() *MeetingUser {
	return &MeetingUser{}
}

func (p *MeetingUser) GetUserId() int64 {
	return p.UserId
}

var MeetingUser_Nickname_DEFAULT string

func (p *MeetingUser) GetNickname() string {
	if !p.IsSetNickname() {
		return MeetingUser_Nickname_DEFAULT
	}
	return *p.Nickname
}

var MeetingUser_RcUrl_DEFAULT string

func (p *MeetingUser) GetRcUrl() string {
	if !p.IsSetRcUrl() {
		return MeetingUser_RcUrl_DEFAULT
	}
	return *p.RcUrl
}

var MeetingUser_Sex_DEFAULT int32

func (p *MeetingUser) GetSex() int32 {
	if !p.IsSetSex() {
		return MeetingUser_Sex_DEFAULT
	}
	return *p.Sex
}

var MeetingUser_Age_DEFAULT int32

func (p *MeetingUser) GetAge() int32 {
	if !p.IsSetAge() {
		return MeetingUser_Age_DEFAULT
	}
	return *p.Age
}

var MeetingUser_NumOfFlower_DEFAULT int64

func (p *MeetingUser) GetNumOfFlower() int64 {
	if !p.IsSetNumOfFlower() {
		return MeetingUser_NumOfFlower_DEFAULT
	}
	return *p.NumOfFlower
}

var MeetingUser_SmallUrl_DEFAULT string

func (p *MeetingUser) GetSmallUrl() string {
	if !p.IsSetSmallUrl() {
		return MeetingUser_SmallUrl_DEFAULT
	}
	return *p.SmallUrl
}
func (p *MeetingUser) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *MeetingUser) IsSetRcUrl() bool {
	return p.RcUrl != nil
}

func (p *MeetingUser) IsSetSex() bool {
	return p.Sex != nil
}

func (p *MeetingUser) IsSetAge() bool {
	return p.Age != nil
}

func (p *MeetingUser) IsSetNumOfFlower() bool {
	return p.NumOfFlower != nil
}

func (p *MeetingUser) IsSetSmallUrl() bool {
	return p.SmallUrl != nil
}

func (p *MeetingUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetUserId = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"))
	}
	return nil
}

func (p *MeetingUser) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingUser) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *MeetingUser) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RcUrl = &v
	}
	return nil
}

func (p *MeetingUser) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sex = &v
	}
	return nil
}

func (p *MeetingUser) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Age = &v
	}
	return nil
}

func (p *MeetingUser) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NumOfFlower = &v
	}
	return nil
}

func (p *MeetingUser) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SmallUrl = &v
	}
	return nil
}

func (p *MeetingUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MeetingUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingUser) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRcUrl() {
		if err := oprot.WriteFieldBegin("rcUrl", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rcUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RcUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.rcUrl (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rcUrl: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sex: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sex: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err := oprot.WriteFieldBegin("age", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:age: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Age)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.age (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:age: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumOfFlower() {
		if err := oprot.WriteFieldBegin("numOfFlower", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:numOfFlower: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NumOfFlower)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.numOfFlower (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:numOfFlower: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSmallUrl() {
		if err := oprot.WriteFieldBegin("smallUrl", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:smallUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SmallUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.smallUrl (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:smallUrl: ", p), err)
		}
	}
	return err
}

func (p *MeetingUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingUser(%+v)", *p)
}

// 批量获取会议用户信息调用返回对象
//
// Attributes:
//  - Result_
//  - ErrorMsg
//  - UserList
type QueryUserListByMeetingRet struct {
	Result_  string         `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg *string        `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	UserList []*MeetingUser `thrift:"userList,3" db:"userList" json:"userList,omitempty"`
}

func NewQueryUserListByMeetingRet() *QueryUserListByMeetingRet {
	return &QueryUserListByMeetingRet{}
}

func (p *QueryUserListByMeetingRet) GetResult_() string {
	return p.Result_
}

var QueryUserListByMeetingRet_ErrorMsg_DEFAULT string

func (p *QueryUserListByMeetingRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return QueryUserListByMeetingRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

var QueryUserListByMeetingRet_UserList_DEFAULT []*MeetingUser

func (p *QueryUserListByMeetingRet) GetUserList() []*MeetingUser {
	return p.UserList
}
func (p *QueryUserListByMeetingRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *QueryUserListByMeetingRet) IsSetUserList() bool {
	return p.UserList != nil
}

func (p *QueryUserListByMeetingRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	return nil
}

func (p *QueryUserListByMeetingRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *QueryUserListByMeetingRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *QueryUserListByMeetingRet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MeetingUser, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &MeetingUser{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.UserList = append(p.UserList, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryUserListByMeetingRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserListByMeetingRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryUserListByMeetingRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *QueryUserListByMeetingRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *QueryUserListByMeetingRet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserList() {
		if err := oprot.WriteFieldBegin("userList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userList: ", p), err)
		}
	}
	return err
}

func (p *QueryUserListByMeetingRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserListByMeetingRet(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ErrorMsg
//  - Ret
type IsUserInRandomCallingWhiteListRet struct {
	Result_  string  `thrift:"result,1,required" db:"result" json:"result"`
	ErrorMsg *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
	Ret      int32   `thrift:"ret,3,required" db:"ret" json:"ret"`
}

func NewIsUserInRandomCallingWhiteListRet() *IsUserInRandomCallingWhiteListRet {
	return &IsUserInRandomCallingWhiteListRet{}
}

func (p *IsUserInRandomCallingWhiteListRet) GetResult_() string {
	return p.Result_
}

var IsUserInRandomCallingWhiteListRet_ErrorMsg_DEFAULT string

func (p *IsUserInRandomCallingWhiteListRet) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return IsUserInRandomCallingWhiteListRet_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}

func (p *IsUserInRandomCallingWhiteListRet) GetRet() int32 {
	return p.Ret
}
func (p *IsUserInRandomCallingWhiteListRet) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *IsUserInRandomCallingWhiteListRet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetResult_ bool = false
	var issetRet bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetResult_ = true
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
			issetRet = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetResult_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"))
	}
	if !issetRet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ret is not set"))
	}
	return nil
}

func (p *IsUserInRandomCallingWhiteListRet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *IsUserInRandomCallingWhiteListRet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *IsUserInRandomCallingWhiteListRet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ret = v
	}
	return nil
}

func (p *IsUserInRandomCallingWhiteListRet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsUserInRandomCallingWhiteListRet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IsUserInRandomCallingWhiteListRet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *IsUserInRandomCallingWhiteListRet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err)
		}
	}
	return err
}

func (p *IsUserInRandomCallingWhiteListRet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ret", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ret: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Ret)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ret (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ret: ", p), err)
	}
	return err
}

func (p *IsUserInRandomCallingWhiteListRet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsUserInRandomCallingWhiteListRet(%+v)", *p)
}

// Attributes:
//  - Level
//  - IsCheat
type SpamUserLevel struct {
	Level   int32 `thrift:"level,1" db:"level" json:"level"`
	IsCheat bool  `thrift:"isCheat,2" db:"isCheat" json:"isCheat"`
}

func NewSpamUserLevel() *SpamUserLevel {
	return &SpamUserLevel{}
}

func (p *SpamUserLevel) GetLevel() int32 {
	return p.Level
}

func (p *SpamUserLevel) GetIsCheat() bool {
	return p.IsCheat
}
func (p *SpamUserLevel) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SpamUserLevel) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *SpamUserLevel) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsCheat = v
	}
	return nil
}

func (p *SpamUserLevel) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SpamUserLevel"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SpamUserLevel) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err)
	}
	return err
}

func (p *SpamUserLevel) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isCheat", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isCheat: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsCheat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isCheat (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isCheat: ", p), err)
	}
	return err
}

func (p *SpamUserLevel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpamUserLevel(%+v)", *p)
}

type MeetingService interface {
	common.BaseService
	//会议相关服务接口

	QueryAllMeetingTopicListByCCServer(ctx context.Context) (r *QueryAllMeetingTopicListByCCServerRet, err error)
	QueryAllMeetingNicknameByCCServer(ctx context.Context) (r *QueryAllMeetingNicknameByCCServerRet, err error)
	// Parameters:
	//  - UserId
	//  - CallId
	//  - EnterTime
	//  - QuitTime
	//  - FlowerNum
	AddMeetingCallRecordByCCServer(ctx context.Context, userId int64, callId string, enterTime int64, quitTime int64, flowerNum int32) (r *common.ComRet, err error)
	// Parameters:
	//  - UserIds
	QueryUserDeviceInfoByCCServer(ctx context.Context, userIds string) (r *QueryUserDeviceInfoByCCServerRet, err error)
	// Parameters:
	//  - TopicType
	QueryTopicListByCCServer(ctx context.Context, topicType int32) (r *QueryTopicListByCCServerRet, err error)
	QueryAllSuperPowerTagListByCCServer(ctx context.Context) (r *QueryAllSuperPowerTagListByCCServerRet, err error)
	// Parameters:
	//  - UserId
	IsCanKickOut(ctx context.Context, userId int64) (r *IsCanKickOutRet, err error)
	// Parameters:
	//  - UserId
	//  - FriendUserIds
	QueryUserListByMeeting(ctx context.Context, userId int64, friendUserIds string) (r *QueryUserListByMeetingRet, err error)
	// Parameters:
	//  - UserId
	IsUserInRandomCallingWhiteList(ctx context.Context, userId int64) (r *IsUserInRandomCallingWhiteListRet, err error)
	// Parameters:
	//  - UserId
	QueryUserSpamLevel(ctx context.Context, userId int64) (r *SpamUserLevel, err error)
}

//会议相关服务接口
type MeetingServiceClient struct {
	c thrift.TClient
	*common.BaseServiceClient
}

// Deprecated: Use NewMeetingService instead
func NewMeetingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MeetingServiceClient {
	return &MeetingServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}
}

// Deprecated: Use NewMeetingService instead
func NewMeetingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MeetingServiceClient {
	return &MeetingServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewMeetingServiceClient(c thrift.TClient) *MeetingServiceClient {
	return &MeetingServiceClient{
		c:                 c,
		BaseServiceClient: common.NewBaseServiceClient(c),
	}
}

func (p *MeetingServiceClient) QueryAllMeetingTopicListByCCServer(ctx context.Context) (r *QueryAllMeetingTopicListByCCServerRet, err error) {
	var _args8 MeetingServiceQueryAllMeetingTopicListByCCServerArgs
	var _result9 MeetingServiceQueryAllMeetingTopicListByCCServerResult
	if err = p.c.Call(ctx, "queryAllMeetingTopicListByCCServer", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

func (p *MeetingServiceClient) QueryAllMeetingNicknameByCCServer(ctx context.Context) (r *QueryAllMeetingNicknameByCCServerRet, err error) {
	var _args10 MeetingServiceQueryAllMeetingNicknameByCCServerArgs
	var _result11 MeetingServiceQueryAllMeetingNicknameByCCServerResult
	if err = p.c.Call(ctx, "queryAllMeetingNicknameByCCServer", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - CallId
//  - EnterTime
//  - QuitTime
//  - FlowerNum
func (p *MeetingServiceClient) AddMeetingCallRecordByCCServer(ctx context.Context, userId int64, callId string, enterTime int64, quitTime int64, flowerNum int32) (r *common.ComRet, err error) {
	var _args12 MeetingServiceAddMeetingCallRecordByCCServerArgs
	_args12.UserId = userId
	_args12.CallId = callId
	_args12.EnterTime = enterTime
	_args12.QuitTime = quitTime
	_args12.FlowerNum = flowerNum
	var _result13 MeetingServiceAddMeetingCallRecordByCCServerResult
	if err = p.c.Call(ctx, "addMeetingCallRecordByCCServer", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

// Parameters:
//  - UserIds
func (p *MeetingServiceClient) QueryUserDeviceInfoByCCServer(ctx context.Context, userIds string) (r *QueryUserDeviceInfoByCCServerRet, err error) {
	var _args14 MeetingServiceQueryUserDeviceInfoByCCServerArgs
	_args14.UserIds = userIds
	var _result15 MeetingServiceQueryUserDeviceInfoByCCServerResult
	if err = p.c.Call(ctx, "queryUserDeviceInfoByCCServer", &_args14, &_result15); err != nil {
		return
	}
	return _result15.GetSuccess(), nil
}

// Parameters:
//  - TopicType
func (p *MeetingServiceClient) QueryTopicListByCCServer(ctx context.Context, topicType int32) (r *QueryTopicListByCCServerRet, err error) {
	var _args16 MeetingServiceQueryTopicListByCCServerArgs
	_args16.TopicType = topicType
	var _result17 MeetingServiceQueryTopicListByCCServerResult
	if err = p.c.Call(ctx, "queryTopicListByCCServer", &_args16, &_result17); err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

func (p *MeetingServiceClient) QueryAllSuperPowerTagListByCCServer(ctx context.Context) (r *QueryAllSuperPowerTagListByCCServerRet, err error) {
	var _args18 MeetingServiceQueryAllSuperPowerTagListByCCServerArgs
	var _result19 MeetingServiceQueryAllSuperPowerTagListByCCServerResult
	if err = p.c.Call(ctx, "queryAllSuperPowerTagListByCCServer", &_args18, &_result19); err != nil {
		return
	}
	return _result19.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *MeetingServiceClient) IsCanKickOut(ctx context.Context, userId int64) (r *IsCanKickOutRet, err error) {
	var _args20 MeetingServiceIsCanKickOutArgs
	_args20.UserId = userId
	var _result21 MeetingServiceIsCanKickOutResult
	if err = p.c.Call(ctx, "isCanKickOut", &_args20, &_result21); err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - FriendUserIds
func (p *MeetingServiceClient) QueryUserListByMeeting(ctx context.Context, userId int64, friendUserIds string) (r *QueryUserListByMeetingRet, err error) {
	var _args22 MeetingServiceQueryUserListByMeetingArgs
	_args22.UserId = userId
	_args22.FriendUserIds = friendUserIds
	var _result23 MeetingServiceQueryUserListByMeetingResult
	if err = p.c.Call(ctx, "queryUserListByMeeting", &_args22, &_result23); err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *MeetingServiceClient) IsUserInRandomCallingWhiteList(ctx context.Context, userId int64) (r *IsUserInRandomCallingWhiteListRet, err error) {
	var _args24 MeetingServiceIsUserInRandomCallingWhiteListArgs
	_args24.UserId = userId
	var _result25 MeetingServiceIsUserInRandomCallingWhiteListResult
	if err = p.c.Call(ctx, "isUserInRandomCallingWhiteList", &_args24, &_result25); err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *MeetingServiceClient) QueryUserSpamLevel(ctx context.Context, userId int64) (r *SpamUserLevel, err error) {
	var _args26 MeetingServiceQueryUserSpamLevelArgs
	_args26.UserId = userId
	var _result27 MeetingServiceQueryUserSpamLevelResult
	if err = p.c.Call(ctx, "queryUserSpamLevel", &_args26, &_result27); err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

type MeetingServiceProcessor struct {
	*common.BaseServiceProcessor
}

func NewMeetingServiceProcessor(handler MeetingService) *MeetingServiceProcessor {
	self28 := &MeetingServiceProcessor{common.NewBaseServiceProcessor(handler)}
	self28.AddToProcessorMap("queryAllMeetingTopicListByCCServer", &meetingServiceProcessorQueryAllMeetingTopicListByCCServer{handler: handler})
	self28.AddToProcessorMap("queryAllMeetingNicknameByCCServer", &meetingServiceProcessorQueryAllMeetingNicknameByCCServer{handler: handler})
	self28.AddToProcessorMap("addMeetingCallRecordByCCServer", &meetingServiceProcessorAddMeetingCallRecordByCCServer{handler: handler})
	self28.AddToProcessorMap("queryUserDeviceInfoByCCServer", &meetingServiceProcessorQueryUserDeviceInfoByCCServer{handler: handler})
	self28.AddToProcessorMap("queryTopicListByCCServer", &meetingServiceProcessorQueryTopicListByCCServer{handler: handler})
	self28.AddToProcessorMap("queryAllSuperPowerTagListByCCServer", &meetingServiceProcessorQueryAllSuperPowerTagListByCCServer{handler: handler})
	self28.AddToProcessorMap("isCanKickOut", &meetingServiceProcessorIsCanKickOut{handler: handler})
	self28.AddToProcessorMap("queryUserListByMeeting", &meetingServiceProcessorQueryUserListByMeeting{handler: handler})
	self28.AddToProcessorMap("isUserInRandomCallingWhiteList", &meetingServiceProcessorIsUserInRandomCallingWhiteList{handler: handler})
	self28.AddToProcessorMap("queryUserSpamLevel", &meetingServiceProcessorQueryUserSpamLevel{handler: handler})
	return self28
}

type meetingServiceProcessorQueryAllMeetingTopicListByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryAllMeetingTopicListByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryAllMeetingTopicListByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryAllMeetingTopicListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryAllMeetingTopicListByCCServerResult{}
	var retval *QueryAllMeetingTopicListByCCServerRet
	var err2 error
	if retval, err2 = p.handler.QueryAllMeetingTopicListByCCServer(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryAllMeetingTopicListByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("queryAllMeetingTopicListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryAllMeetingTopicListByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryAllMeetingNicknameByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryAllMeetingNicknameByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryAllMeetingNicknameByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryAllMeetingNicknameByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryAllMeetingNicknameByCCServerResult{}
	var retval *QueryAllMeetingNicknameByCCServerRet
	var err2 error
	if retval, err2 = p.handler.QueryAllMeetingNicknameByCCServer(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryAllMeetingNicknameByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("queryAllMeetingNicknameByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryAllMeetingNicknameByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorAddMeetingCallRecordByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorAddMeetingCallRecordByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceAddMeetingCallRecordByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addMeetingCallRecordByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceAddMeetingCallRecordByCCServerResult{}
	var retval *common.ComRet
	var err2 error
	if retval, err2 = p.handler.AddMeetingCallRecordByCCServer(ctx, args.UserId, args.CallId, args.EnterTime, args.QuitTime, args.FlowerNum); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addMeetingCallRecordByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("addMeetingCallRecordByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addMeetingCallRecordByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryUserDeviceInfoByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryUserDeviceInfoByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryUserDeviceInfoByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserDeviceInfoByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryUserDeviceInfoByCCServerResult{}
	var retval *QueryUserDeviceInfoByCCServerRet
	var err2 error
	if retval, err2 = p.handler.QueryUserDeviceInfoByCCServer(ctx, args.UserIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserDeviceInfoByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("queryUserDeviceInfoByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserDeviceInfoByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryTopicListByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryTopicListByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryTopicListByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryTopicListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryTopicListByCCServerResult{}
	var retval *QueryTopicListByCCServerRet
	var err2 error
	if retval, err2 = p.handler.QueryTopicListByCCServer(ctx, args.TopicType); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryTopicListByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("queryTopicListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryTopicListByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryAllSuperPowerTagListByCCServer struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryAllSuperPowerTagListByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryAllSuperPowerTagListByCCServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryAllSuperPowerTagListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryAllSuperPowerTagListByCCServerResult{}
	var retval *QueryAllSuperPowerTagListByCCServerRet
	var err2 error
	if retval, err2 = p.handler.QueryAllSuperPowerTagListByCCServer(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryAllSuperPowerTagListByCCServer: "+err2.Error())
		oprot.WriteMessageBegin("queryAllSuperPowerTagListByCCServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryAllSuperPowerTagListByCCServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorIsCanKickOut struct {
	handler MeetingService
}

func (p *meetingServiceProcessorIsCanKickOut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceIsCanKickOutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isCanKickOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceIsCanKickOutResult{}
	var retval *IsCanKickOutRet
	var err2 error
	if retval, err2 = p.handler.IsCanKickOut(ctx, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isCanKickOut: "+err2.Error())
		oprot.WriteMessageBegin("isCanKickOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("isCanKickOut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryUserListByMeeting struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryUserListByMeeting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryUserListByMeetingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserListByMeeting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryUserListByMeetingResult{}
	var retval *QueryUserListByMeetingRet
	var err2 error
	if retval, err2 = p.handler.QueryUserListByMeeting(ctx, args.UserId, args.FriendUserIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserListByMeeting: "+err2.Error())
		oprot.WriteMessageBegin("queryUserListByMeeting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserListByMeeting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorIsUserInRandomCallingWhiteList struct {
	handler MeetingService
}

func (p *meetingServiceProcessorIsUserInRandomCallingWhiteList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceIsUserInRandomCallingWhiteListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isUserInRandomCallingWhiteList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceIsUserInRandomCallingWhiteListResult{}
	var retval *IsUserInRandomCallingWhiteListRet
	var err2 error
	if retval, err2 = p.handler.IsUserInRandomCallingWhiteList(ctx, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUserInRandomCallingWhiteList: "+err2.Error())
		oprot.WriteMessageBegin("isUserInRandomCallingWhiteList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("isUserInRandomCallingWhiteList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type meetingServiceProcessorQueryUserSpamLevel struct {
	handler MeetingService
}

func (p *meetingServiceProcessorQueryUserSpamLevel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MeetingServiceQueryUserSpamLevelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserSpamLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MeetingServiceQueryUserSpamLevelResult{}
	var retval *SpamUserLevel
	var err2 error
	if retval, err2 = p.handler.QueryUserSpamLevel(ctx, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserSpamLevel: "+err2.Error())
		oprot.WriteMessageBegin("queryUserSpamLevel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserSpamLevel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type MeetingServiceQueryAllMeetingTopicListByCCServerArgs struct {
}

func NewMeetingServiceQueryAllMeetingTopicListByCCServerArgs() *MeetingServiceQueryAllMeetingTopicListByCCServerArgs {
	return &MeetingServiceQueryAllMeetingTopicListByCCServerArgs{}
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllMeetingTopicListByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllMeetingTopicListByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryAllMeetingTopicListByCCServerResult struct {
	Success *QueryAllMeetingTopicListByCCServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryAllMeetingTopicListByCCServerResult() *MeetingServiceQueryAllMeetingTopicListByCCServerResult {
	return &MeetingServiceQueryAllMeetingTopicListByCCServerResult{}
}

var MeetingServiceQueryAllMeetingTopicListByCCServerResult_Success_DEFAULT *QueryAllMeetingTopicListByCCServerRet

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) GetSuccess() *QueryAllMeetingTopicListByCCServerRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryAllMeetingTopicListByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryAllMeetingTopicListByCCServerRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllMeetingTopicListByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryAllMeetingTopicListByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllMeetingTopicListByCCServerResult(%+v)", *p)
}

type MeetingServiceQueryAllMeetingNicknameByCCServerArgs struct {
}

func NewMeetingServiceQueryAllMeetingNicknameByCCServerArgs() *MeetingServiceQueryAllMeetingNicknameByCCServerArgs {
	return &MeetingServiceQueryAllMeetingNicknameByCCServerArgs{}
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllMeetingNicknameByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllMeetingNicknameByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryAllMeetingNicknameByCCServerResult struct {
	Success *QueryAllMeetingNicknameByCCServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryAllMeetingNicknameByCCServerResult() *MeetingServiceQueryAllMeetingNicknameByCCServerResult {
	return &MeetingServiceQueryAllMeetingNicknameByCCServerResult{}
}

var MeetingServiceQueryAllMeetingNicknameByCCServerResult_Success_DEFAULT *QueryAllMeetingNicknameByCCServerRet

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) GetSuccess() *QueryAllMeetingNicknameByCCServerRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryAllMeetingNicknameByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryAllMeetingNicknameByCCServerRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllMeetingNicknameByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryAllMeetingNicknameByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllMeetingNicknameByCCServerResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - CallId
//  - EnterTime
//  - QuitTime
//  - FlowerNum
type MeetingServiceAddMeetingCallRecordByCCServerArgs struct {
	UserId    int64  `thrift:"userId,1" db:"userId" json:"userId"`
	CallId    string `thrift:"callId,2" db:"callId" json:"callId"`
	EnterTime int64  `thrift:"enterTime,3" db:"enterTime" json:"enterTime"`
	QuitTime  int64  `thrift:"quitTime,4" db:"quitTime" json:"quitTime"`
	FlowerNum int32  `thrift:"flowerNum,5" db:"flowerNum" json:"flowerNum"`
}

func NewMeetingServiceAddMeetingCallRecordByCCServerArgs() *MeetingServiceAddMeetingCallRecordByCCServerArgs {
	return &MeetingServiceAddMeetingCallRecordByCCServerArgs{}
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) GetUserId() int64 {
	return p.UserId
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) GetCallId() string {
	return p.CallId
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) GetEnterTime() int64 {
	return p.EnterTime
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) GetQuitTime() int64 {
	return p.QuitTime
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) GetFlowerNum() int32 {
	return p.FlowerNum
}
func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CallId = v
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EnterTime = v
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.QuitTime = v
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FlowerNum = v
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMeetingCallRecordByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:callId: ", p), err)
	}
	if err := oprot.WriteString(string(p.CallId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.callId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:callId: ", p), err)
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enterTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enterTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EnterTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enterTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enterTime: ", p), err)
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quitTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:quitTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.QuitTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.quitTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:quitTime: ", p), err)
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flowerNum", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flowerNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FlowerNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flowerNum (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flowerNum: ", p), err)
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceAddMeetingCallRecordByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceAddMeetingCallRecordByCCServerResult struct {
	Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceAddMeetingCallRecordByCCServerResult() *MeetingServiceAddMeetingCallRecordByCCServerResult {
	return &MeetingServiceAddMeetingCallRecordByCCServerResult{}
}

var MeetingServiceAddMeetingCallRecordByCCServerResult_Success_DEFAULT *common.ComRet

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) GetSuccess() *common.ComRet {
	if !p.IsSetSuccess() {
		return MeetingServiceAddMeetingCallRecordByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &common.ComRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMeetingCallRecordByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceAddMeetingCallRecordByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceAddMeetingCallRecordByCCServerResult(%+v)", *p)
}

// Attributes:
//  - UserIds
type MeetingServiceQueryUserDeviceInfoByCCServerArgs struct {
	UserIds string `thrift:"userIds,1" db:"userIds" json:"userIds"`
}

func NewMeetingServiceQueryUserDeviceInfoByCCServerArgs() *MeetingServiceQueryUserDeviceInfoByCCServerArgs {
	return &MeetingServiceQueryUserDeviceInfoByCCServerArgs{}
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) GetUserIds() string {
	return p.UserIds
}
func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserIds = v
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserDeviceInfoByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userIds", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userIds: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserIds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userIds (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userIds: ", p), err)
	}
	return err
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserDeviceInfoByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryUserDeviceInfoByCCServerResult struct {
	Success *QueryUserDeviceInfoByCCServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryUserDeviceInfoByCCServerResult() *MeetingServiceQueryUserDeviceInfoByCCServerResult {
	return &MeetingServiceQueryUserDeviceInfoByCCServerResult{}
}

var MeetingServiceQueryUserDeviceInfoByCCServerResult_Success_DEFAULT *QueryUserDeviceInfoByCCServerRet

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) GetSuccess() *QueryUserDeviceInfoByCCServerRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryUserDeviceInfoByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryUserDeviceInfoByCCServerRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserDeviceInfoByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryUserDeviceInfoByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserDeviceInfoByCCServerResult(%+v)", *p)
}

// Attributes:
//  - TopicType
type MeetingServiceQueryTopicListByCCServerArgs struct {
	TopicType int32 `thrift:"topicType,1" db:"topicType" json:"topicType"`
}

func NewMeetingServiceQueryTopicListByCCServerArgs() *MeetingServiceQueryTopicListByCCServerArgs {
	return &MeetingServiceQueryTopicListByCCServerArgs{}
}

func (p *MeetingServiceQueryTopicListByCCServerArgs) GetTopicType() int32 {
	return p.TopicType
}
func (p *MeetingServiceQueryTopicListByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopicType = v
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicListByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topicType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TopicType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topicType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topicType: ", p), err)
	}
	return err
}

func (p *MeetingServiceQueryTopicListByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryTopicListByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryTopicListByCCServerResult struct {
	Success *QueryTopicListByCCServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryTopicListByCCServerResult() *MeetingServiceQueryTopicListByCCServerResult {
	return &MeetingServiceQueryTopicListByCCServerResult{}
}

var MeetingServiceQueryTopicListByCCServerResult_Success_DEFAULT *QueryTopicListByCCServerRet

func (p *MeetingServiceQueryTopicListByCCServerResult) GetSuccess() *QueryTopicListByCCServerRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryTopicListByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryTopicListByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryTopicListByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryTopicListByCCServerRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicListByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryTopicListByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryTopicListByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryTopicListByCCServerResult(%+v)", *p)
}

type MeetingServiceQueryAllSuperPowerTagListByCCServerArgs struct {
}

func NewMeetingServiceQueryAllSuperPowerTagListByCCServerArgs() *MeetingServiceQueryAllSuperPowerTagListByCCServerArgs {
	return &MeetingServiceQueryAllSuperPowerTagListByCCServerArgs{}
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllSuperPowerTagListByCCServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllSuperPowerTagListByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryAllSuperPowerTagListByCCServerResult struct {
	Success *QueryAllSuperPowerTagListByCCServerRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryAllSuperPowerTagListByCCServerResult() *MeetingServiceQueryAllSuperPowerTagListByCCServerResult {
	return &MeetingServiceQueryAllSuperPowerTagListByCCServerResult{}
}

var MeetingServiceQueryAllSuperPowerTagListByCCServerResult_Success_DEFAULT *QueryAllSuperPowerTagListByCCServerRet

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) GetSuccess() *QueryAllSuperPowerTagListByCCServerRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryAllSuperPowerTagListByCCServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryAllSuperPowerTagListByCCServerRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryAllSuperPowerTagListByCCServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryAllSuperPowerTagListByCCServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryAllSuperPowerTagListByCCServerResult(%+v)", *p)
}

// Attributes:
//  - UserId
type MeetingServiceIsCanKickOutArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewMeetingServiceIsCanKickOutArgs() *MeetingServiceIsCanKickOutArgs {
	return &MeetingServiceIsCanKickOutArgs{}
}

func (p *MeetingServiceIsCanKickOutArgs) GetUserId() int64 {
	return p.UserId
}
func (p *MeetingServiceIsCanKickOutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isCanKickOut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingServiceIsCanKickOutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceIsCanKickOutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceIsCanKickOutResult struct {
	Success *IsCanKickOutRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceIsCanKickOutResult() *MeetingServiceIsCanKickOutResult {
	return &MeetingServiceIsCanKickOutResult{}
}

var MeetingServiceIsCanKickOutResult_Success_DEFAULT *IsCanKickOutRet

func (p *MeetingServiceIsCanKickOutResult) GetSuccess() *IsCanKickOutRet {
	if !p.IsSetSuccess() {
		return MeetingServiceIsCanKickOutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceIsCanKickOutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceIsCanKickOutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IsCanKickOutRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isCanKickOut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceIsCanKickOutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceIsCanKickOutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceIsCanKickOutResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - FriendUserIds
type MeetingServiceQueryUserListByMeetingArgs struct {
	UserId        int64  `thrift:"userId,1" db:"userId" json:"userId"`
	FriendUserIds string `thrift:"friendUserIds,2" db:"friendUserIds" json:"friendUserIds"`
}

func NewMeetingServiceQueryUserListByMeetingArgs() *MeetingServiceQueryUserListByMeetingArgs {
	return &MeetingServiceQueryUserListByMeetingArgs{}
}

func (p *MeetingServiceQueryUserListByMeetingArgs) GetUserId() int64 {
	return p.UserId
}

func (p *MeetingServiceQueryUserListByMeetingArgs) GetFriendUserIds() string {
	return p.FriendUserIds
}
func (p *MeetingServiceQueryUserListByMeetingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FriendUserIds = v
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserListByMeeting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingServiceQueryUserListByMeetingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("friendUserIds", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:friendUserIds: ", p), err)
	}
	if err := oprot.WriteString(string(p.FriendUserIds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.friendUserIds (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:friendUserIds: ", p), err)
	}
	return err
}

func (p *MeetingServiceQueryUserListByMeetingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserListByMeetingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryUserListByMeetingResult struct {
	Success *QueryUserListByMeetingRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryUserListByMeetingResult() *MeetingServiceQueryUserListByMeetingResult {
	return &MeetingServiceQueryUserListByMeetingResult{}
}

var MeetingServiceQueryUserListByMeetingResult_Success_DEFAULT *QueryUserListByMeetingRet

func (p *MeetingServiceQueryUserListByMeetingResult) GetSuccess() *QueryUserListByMeetingRet {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryUserListByMeetingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryUserListByMeetingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryUserListByMeetingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryUserListByMeetingRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserListByMeeting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserListByMeetingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryUserListByMeetingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserListByMeetingResult(%+v)", *p)
}

// Attributes:
//  - UserId
type MeetingServiceIsUserInRandomCallingWhiteListArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewMeetingServiceIsUserInRandomCallingWhiteListArgs() *MeetingServiceIsUserInRandomCallingWhiteListArgs {
	return &MeetingServiceIsUserInRandomCallingWhiteListArgs{}
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) GetUserId() int64 {
	return p.UserId
}
func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUserInRandomCallingWhiteList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceIsUserInRandomCallingWhiteListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceIsUserInRandomCallingWhiteListResult struct {
	Success *IsUserInRandomCallingWhiteListRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceIsUserInRandomCallingWhiteListResult() *MeetingServiceIsUserInRandomCallingWhiteListResult {
	return &MeetingServiceIsUserInRandomCallingWhiteListResult{}
}

var MeetingServiceIsUserInRandomCallingWhiteListResult_Success_DEFAULT *IsUserInRandomCallingWhiteListRet

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) GetSuccess() *IsUserInRandomCallingWhiteListRet {
	if !p.IsSetSuccess() {
		return MeetingServiceIsUserInRandomCallingWhiteListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IsUserInRandomCallingWhiteListRet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUserInRandomCallingWhiteList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceIsUserInRandomCallingWhiteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceIsUserInRandomCallingWhiteListResult(%+v)", *p)
}

// Attributes:
//  - UserId
type MeetingServiceQueryUserSpamLevelArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewMeetingServiceQueryUserSpamLevelArgs() *MeetingServiceQueryUserSpamLevelArgs {
	return &MeetingServiceQueryUserSpamLevelArgs{}
}

func (p *MeetingServiceQueryUserSpamLevelArgs) GetUserId() int64 {
	return p.UserId
}
func (p *MeetingServiceQueryUserSpamLevelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserSpamLevel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *MeetingServiceQueryUserSpamLevelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserSpamLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MeetingServiceQueryUserSpamLevelResult struct {
	Success *SpamUserLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMeetingServiceQueryUserSpamLevelResult() *MeetingServiceQueryUserSpamLevelResult {
	return &MeetingServiceQueryUserSpamLevelResult{}
}

var MeetingServiceQueryUserSpamLevelResult_Success_DEFAULT *SpamUserLevel

func (p *MeetingServiceQueryUserSpamLevelResult) GetSuccess() *SpamUserLevel {
	if !p.IsSetSuccess() {
		return MeetingServiceQueryUserSpamLevelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MeetingServiceQueryUserSpamLevelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MeetingServiceQueryUserSpamLevelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SpamUserLevel{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserSpamLevel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MeetingServiceQueryUserSpamLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MeetingServiceQueryUserSpamLevelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MeetingServiceQueryUserSpamLevelResult(%+v)", *p)
}
