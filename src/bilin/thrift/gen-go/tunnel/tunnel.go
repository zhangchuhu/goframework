// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tunnel

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type AppidType int64
const (
  AppidType_REVENUE_SRV AppidType = 1
  AppidType_NEW_BCSERVER AppidType = 11
)

func (p AppidType) String() string {
  switch p {
  case AppidType_REVENUE_SRV: return "REVENUE_SRV"
  case AppidType_NEW_BCSERVER: return "NEW_BCSERVER"
  }
  return "<UNSET>"
}

func AppidTypeFromString(s string) (AppidType, error) {
  switch s {
  case "REVENUE_SRV": return AppidType_REVENUE_SRV, nil 
  case "NEW_BCSERVER": return AppidType_NEW_BCSERVER, nil 
  }
  return AppidType(0), fmt.Errorf("not a valid AppidType string")
}


func AppidTypePtr(v AppidType) *AppidType { return &v }

func (p AppidType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppidType) UnmarshalText(text []byte) error {
q, err := AppidTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppidType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppidType(v)
return nil
}

func (p * AppidType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Tunnel interface {
  // *
  //    功能：对指定用户发送消息
  //    参数：
  //       appid：业务调用方唯一标志，统一分配
  //       uid：单播用户的唯一id
  //       msg：业务方的透传消息
  // **
  // 
  // Parameters:
  //  - Appid
  //  - UID
  //  - Msg
  UnicastByUid(ctx context.Context, appid int64, uid int32, msg string) (r int32, err error)
  // *
  //    功能：对指定用户发送消息
  //    参数：
  //       appid：业务调用方唯一标志，统一分配
  //       uid：单播用户的唯一id
  //       msg：业务方的透传消息
  // **
  // 
  // Parameters:
  //  - Appid
  //  - UID
  //  - Msg
  //  - MsgType
  UnicastByUidEx(ctx context.Context, appid int64, uid int32, msg string, msg_type int32) (r int32, err error)
  // *
  //    功能：对指定房间的用户发送消息
  //    参数：
  //       appid：业务调用方唯一标志，统一分配
  //       sid: 频道id
  //       uid：单播用户的唯一id
  //       msg：业务方的透传消息
  // **
  // 
  // Parameters:
  //  - Appid
  //  - Sid
  //  - UID
  //  - Msg
  //  - MsgType
  UnicastToRoomByUidEx(ctx context.Context, appid int64, sid int32, uid int32, msg string, msg_type int32) (r int32, err error)
  // **
  //    功能：对指定频道发送广播消息
  //    参数：
  //       appid：业务调用方唯一标志，统一分配
  //       sid：广播频道id
  //       msg：业务方的透传消息
  //       msg_type:业务对应的消息类型
  // ***
  // 
  // Parameters:
  //  - Appid
  //  - Sid
  //  - Msg
  BroadcastBySid(ctx context.Context, appid int64, sid int32, msg string) (r int32, err error)
  // **
  //    功能：对指定频道发送广播消息
  //    参数：
  //       appid：业务调用方唯一标志，统一分配
  //       sid：广播频道id
  //       msg：业务方的透传消息
  // ***
  // 
  // Parameters:
  //  - Appid
  //  - Sid
  //  - MsgType
  //  - Msg
  BroadcastBySidEx(ctx context.Context, appid int64, sid int32, msg_type int32, msg string) (r int32, err error)
  // **
  // 功能：官频上麦, 自动把原来在麦上用户切下去
  // 参数：
  // uid：要上麦主播uid
  // sid：广播频道id
  // msg：业务方的透传消息
  // 返回：
  // 异步回调结果
  //   ***
  // 
  // Parameters:
  //  - UID
  //  - Sid
  //  - Msg
  OnOfficialMike(ctx context.Context, uid int64, sid int32, msg string) (r int32, err error)
  // **
  // 功能：官频下麦, 仅仅下麦，后续可能用到
  // 参数：
  // uid：要下麦主播uid
  // sid：广播频道id
  // msg：业务方的透传消息
  // 返回：
  // 异步回调结果
  //   ***
  // 
  // Parameters:
  //  - UID
  //  - Sid
  //  - Msg
  OffOfficialMike(ctx context.Context, uid int64, sid int32, msg string) (r int32, err error)
}

type TunnelClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTunnel instead
func NewTunnelClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TunnelClient {
  return &TunnelClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTunnel instead
func NewTunnelClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TunnelClient {
  return &TunnelClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTunnelClient(c thrift.TClient) *TunnelClient {
  return &TunnelClient{
    c: c,
  }
}

// *
//    功能：对指定用户发送消息
//    参数：
//       appid：业务调用方唯一标志，统一分配
//       uid：单播用户的唯一id
//       msg：业务方的透传消息
// **
// 
// Parameters:
//  - Appid
//  - UID
//  - Msg
func (p *TunnelClient) UnicastByUid(ctx context.Context, appid int64, uid int32, msg string) (r int32, err error) {
  var _args0 TunnelUnicastByUidArgs
  _args0.Appid = appid
  _args0.UID = uid
  _args0.Msg = msg
  var _result1 TunnelUnicastByUidResult
  if err = p.c.Call(ctx, "unicastByUid", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// *
//    功能：对指定用户发送消息
//    参数：
//       appid：业务调用方唯一标志，统一分配
//       uid：单播用户的唯一id
//       msg：业务方的透传消息
// **
// 
// Parameters:
//  - Appid
//  - UID
//  - Msg
//  - MsgType
func (p *TunnelClient) UnicastByUidEx(ctx context.Context, appid int64, uid int32, msg string, msg_type int32) (r int32, err error) {
  var _args2 TunnelUnicastByUidExArgs
  _args2.Appid = appid
  _args2.UID = uid
  _args2.Msg = msg
  _args2.MsgType = msg_type
  var _result3 TunnelUnicastByUidExResult
  if err = p.c.Call(ctx, "unicastByUidEx", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// *
//    功能：对指定房间的用户发送消息
//    参数：
//       appid：业务调用方唯一标志，统一分配
//       sid: 频道id
//       uid：单播用户的唯一id
//       msg：业务方的透传消息
// **
// 
// Parameters:
//  - Appid
//  - Sid
//  - UID
//  - Msg
//  - MsgType
func (p *TunnelClient) UnicastToRoomByUidEx(ctx context.Context, appid int64, sid int32, uid int32, msg string, msg_type int32) (r int32, err error) {
  var _args4 TunnelUnicastToRoomByUidExArgs
  _args4.Appid = appid
  _args4.Sid = sid
  _args4.UID = uid
  _args4.Msg = msg
  _args4.MsgType = msg_type
  var _result5 TunnelUnicastToRoomByUidExResult
  if err = p.c.Call(ctx, "unicastToRoomByUidEx", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// **
//    功能：对指定频道发送广播消息
//    参数：
//       appid：业务调用方唯一标志，统一分配
//       sid：广播频道id
//       msg：业务方的透传消息
//       msg_type:业务对应的消息类型
// ***
// 
// Parameters:
//  - Appid
//  - Sid
//  - Msg
func (p *TunnelClient) BroadcastBySid(ctx context.Context, appid int64, sid int32, msg string) (r int32, err error) {
  var _args6 TunnelBroadcastBySidArgs
  _args6.Appid = appid
  _args6.Sid = sid
  _args6.Msg = msg
  var _result7 TunnelBroadcastBySidResult
  if err = p.c.Call(ctx, "broadcastBySid", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// **
//    功能：对指定频道发送广播消息
//    参数：
//       appid：业务调用方唯一标志，统一分配
//       sid：广播频道id
//       msg：业务方的透传消息
// ***
// 
// Parameters:
//  - Appid
//  - Sid
//  - MsgType
//  - Msg
func (p *TunnelClient) BroadcastBySidEx(ctx context.Context, appid int64, sid int32, msg_type int32, msg string) (r int32, err error) {
  var _args8 TunnelBroadcastBySidExArgs
  _args8.Appid = appid
  _args8.Sid = sid
  _args8.MsgType = msg_type
  _args8.Msg = msg
  var _result9 TunnelBroadcastBySidExResult
  if err = p.c.Call(ctx, "broadcastBySidEx", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// **
// 功能：官频上麦, 自动把原来在麦上用户切下去
// 参数：
// uid：要上麦主播uid
// sid：广播频道id
// msg：业务方的透传消息
// 返回：
// 异步回调结果
//   ***
// 
// Parameters:
//  - UID
//  - Sid
//  - Msg
func (p *TunnelClient) OnOfficialMike(ctx context.Context, uid int64, sid int32, msg string) (r int32, err error) {
  var _args10 TunnelOnOfficialMikeArgs
  _args10.UID = uid
  _args10.Sid = sid
  _args10.Msg = msg
  var _result11 TunnelOnOfficialMikeResult
  if err = p.c.Call(ctx, "onOfficialMike", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// **
// 功能：官频下麦, 仅仅下麦，后续可能用到
// 参数：
// uid：要下麦主播uid
// sid：广播频道id
// msg：业务方的透传消息
// 返回：
// 异步回调结果
//   ***
// 
// Parameters:
//  - UID
//  - Sid
//  - Msg
func (p *TunnelClient) OffOfficialMike(ctx context.Context, uid int64, sid int32, msg string) (r int32, err error) {
  var _args12 TunnelOffOfficialMikeArgs
  _args12.UID = uid
  _args12.Sid = sid
  _args12.Msg = msg
  var _result13 TunnelOffOfficialMikeResult
  if err = p.c.Call(ctx, "offOfficialMike", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

type TunnelProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Tunnel
}

func (p *TunnelProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TunnelProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TunnelProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTunnelProcessor(handler Tunnel) *TunnelProcessor {

  self14 := &TunnelProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["unicastByUid"] = &tunnelProcessorUnicastByUid{handler:handler}
  self14.processorMap["unicastByUidEx"] = &tunnelProcessorUnicastByUidEx{handler:handler}
  self14.processorMap["unicastToRoomByUidEx"] = &tunnelProcessorUnicastToRoomByUidEx{handler:handler}
  self14.processorMap["broadcastBySid"] = &tunnelProcessorBroadcastBySid{handler:handler}
  self14.processorMap["broadcastBySidEx"] = &tunnelProcessorBroadcastBySidEx{handler:handler}
  self14.processorMap["onOfficialMike"] = &tunnelProcessorOnOfficialMike{handler:handler}
  self14.processorMap["offOfficialMike"] = &tunnelProcessorOffOfficialMike{handler:handler}
return self14
}

func (p *TunnelProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x15

}

type tunnelProcessorUnicastByUid struct {
  handler Tunnel
}

func (p *tunnelProcessorUnicastByUid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelUnicastByUidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unicastByUid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelUnicastByUidResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.UnicastByUid(ctx, args.Appid, args.UID, args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unicastByUid: " + err2.Error())
    oprot.WriteMessageBegin("unicastByUid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("unicastByUid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorUnicastByUidEx struct {
  handler Tunnel
}

func (p *tunnelProcessorUnicastByUidEx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelUnicastByUidExArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unicastByUidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelUnicastByUidExResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.UnicastByUidEx(ctx, args.Appid, args.UID, args.Msg, args.MsgType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unicastByUidEx: " + err2.Error())
    oprot.WriteMessageBegin("unicastByUidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("unicastByUidEx", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorUnicastToRoomByUidEx struct {
  handler Tunnel
}

func (p *tunnelProcessorUnicastToRoomByUidEx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelUnicastToRoomByUidExArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unicastToRoomByUidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelUnicastToRoomByUidExResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.UnicastToRoomByUidEx(ctx, args.Appid, args.Sid, args.UID, args.Msg, args.MsgType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unicastToRoomByUidEx: " + err2.Error())
    oprot.WriteMessageBegin("unicastToRoomByUidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("unicastToRoomByUidEx", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorBroadcastBySid struct {
  handler Tunnel
}

func (p *tunnelProcessorBroadcastBySid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelBroadcastBySidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("broadcastBySid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelBroadcastBySidResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.BroadcastBySid(ctx, args.Appid, args.Sid, args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcastBySid: " + err2.Error())
    oprot.WriteMessageBegin("broadcastBySid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("broadcastBySid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorBroadcastBySidEx struct {
  handler Tunnel
}

func (p *tunnelProcessorBroadcastBySidEx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelBroadcastBySidExArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("broadcastBySidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelBroadcastBySidExResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.BroadcastBySidEx(ctx, args.Appid, args.Sid, args.MsgType, args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcastBySidEx: " + err2.Error())
    oprot.WriteMessageBegin("broadcastBySidEx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("broadcastBySidEx", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorOnOfficialMike struct {
  handler Tunnel
}

func (p *tunnelProcessorOnOfficialMike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelOnOfficialMikeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelOnOfficialMikeResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OnOfficialMike(ctx, args.UID, args.Sid, args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onOfficialMike: " + err2.Error())
    oprot.WriteMessageBegin("onOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onOfficialMike", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tunnelProcessorOffOfficialMike struct {
  handler Tunnel
}

func (p *tunnelProcessorOffOfficialMike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TunnelOffOfficialMikeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("offOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TunnelOffOfficialMikeResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OffOfficialMike(ctx, args.UID, args.Sid, args.Msg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing offOfficialMike: " + err2.Error())
    oprot.WriteMessageBegin("offOfficialMike", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("offOfficialMike", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Appid
//  - UID
//  - Msg
type TunnelUnicastByUidArgs struct {
  Appid int64 `thrift:"appid,1" db:"appid" json:"appid"`
  UID int32 `thrift:"uid,2" db:"uid" json:"uid"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewTunnelUnicastByUidArgs() *TunnelUnicastByUidArgs {
  return &TunnelUnicastByUidArgs{}
}


func (p *TunnelUnicastByUidArgs) GetAppid() int64 {
  return p.Appid
}

func (p *TunnelUnicastByUidArgs) GetUID() int32 {
  return p.UID
}

func (p *TunnelUnicastByUidArgs) GetMsg() string {
  return p.Msg
}
func (p *TunnelUnicastByUidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastByUidArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TunnelUnicastByUidArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TunnelUnicastByUidArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelUnicastByUidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastByUid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastByUidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI32(int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastByUidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelUnicastByUidResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelUnicastByUidResult() *TunnelUnicastByUidResult {
  return &TunnelUnicastByUidResult{}
}

var TunnelUnicastByUidResult_Success_DEFAULT int32
func (p *TunnelUnicastByUidResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelUnicastByUidResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelUnicastByUidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelUnicastByUidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastByUidResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelUnicastByUidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastByUid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastByUidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelUnicastByUidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastByUidResult(%+v)", *p)
}

// Attributes:
//  - Appid
//  - UID
//  - Msg
//  - MsgType
type TunnelUnicastByUidExArgs struct {
  Appid int64 `thrift:"appid,1" db:"appid" json:"appid"`
  UID int32 `thrift:"uid,2" db:"uid" json:"uid"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
  MsgType int32 `thrift:"msg_type,4" db:"msg_type" json:"msg_type"`
}

func NewTunnelUnicastByUidExArgs() *TunnelUnicastByUidExArgs {
  return &TunnelUnicastByUidExArgs{}
}


func (p *TunnelUnicastByUidExArgs) GetAppid() int64 {
  return p.Appid
}

func (p *TunnelUnicastByUidExArgs) GetUID() int32 {
  return p.UID
}

func (p *TunnelUnicastByUidExArgs) GetMsg() string {
  return p.Msg
}

func (p *TunnelUnicastByUidExArgs) GetMsgType() int32 {
  return p.MsgType
}
func (p *TunnelUnicastByUidExArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastByUidExArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TunnelUnicastByUidExArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TunnelUnicastByUidExArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelUnicastByUidExArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *TunnelUnicastByUidExArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastByUidEx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastByUidExArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidExArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI32(int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidExArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidExArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg_type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg_type: ", p), err) }
  return err
}

func (p *TunnelUnicastByUidExArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastByUidExArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelUnicastByUidExResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelUnicastByUidExResult() *TunnelUnicastByUidExResult {
  return &TunnelUnicastByUidExResult{}
}

var TunnelUnicastByUidExResult_Success_DEFAULT int32
func (p *TunnelUnicastByUidExResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelUnicastByUidExResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelUnicastByUidExResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelUnicastByUidExResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastByUidExResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelUnicastByUidExResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastByUidEx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastByUidExResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelUnicastByUidExResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastByUidExResult(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Sid
//  - UID
//  - Msg
//  - MsgType
type TunnelUnicastToRoomByUidExArgs struct {
  Appid int64 `thrift:"appid,1" db:"appid" json:"appid"`
  Sid int32 `thrift:"sid,2" db:"sid" json:"sid"`
  UID int32 `thrift:"uid,3" db:"uid" json:"uid"`
  Msg string `thrift:"msg,4" db:"msg" json:"msg"`
  MsgType int32 `thrift:"msg_type,5" db:"msg_type" json:"msg_type"`
}

func NewTunnelUnicastToRoomByUidExArgs() *TunnelUnicastToRoomByUidExArgs {
  return &TunnelUnicastToRoomByUidExArgs{}
}


func (p *TunnelUnicastToRoomByUidExArgs) GetAppid() int64 {
  return p.Appid
}

func (p *TunnelUnicastToRoomByUidExArgs) GetSid() int32 {
  return p.Sid
}

func (p *TunnelUnicastToRoomByUidExArgs) GetUID() int32 {
  return p.UID
}

func (p *TunnelUnicastToRoomByUidExArgs) GetMsg() string {
  return p.Msg
}

func (p *TunnelUnicastToRoomByUidExArgs) GetMsgType() int32 {
  return p.MsgType
}
func (p *TunnelUnicastToRoomByUidExArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastToRoomByUidEx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastToRoomByUidExArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TunnelUnicastToRoomByUidExArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TunnelUnicastToRoomByUidExArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uid: ", p), err) }
  if err := oprot.WriteI32(int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uid: ", p), err) }
  return err
}

func (p *TunnelUnicastToRoomByUidExArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err) }
  return err
}

func (p *TunnelUnicastToRoomByUidExArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg_type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:msg_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg_type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:msg_type: ", p), err) }
  return err
}

func (p *TunnelUnicastToRoomByUidExArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastToRoomByUidExArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelUnicastToRoomByUidExResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelUnicastToRoomByUidExResult() *TunnelUnicastToRoomByUidExResult {
  return &TunnelUnicastToRoomByUidExResult{}
}

var TunnelUnicastToRoomByUidExResult_Success_DEFAULT int32
func (p *TunnelUnicastToRoomByUidExResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelUnicastToRoomByUidExResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelUnicastToRoomByUidExResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelUnicastToRoomByUidExResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelUnicastToRoomByUidExResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelUnicastToRoomByUidExResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unicastToRoomByUidEx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelUnicastToRoomByUidExResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelUnicastToRoomByUidExResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelUnicastToRoomByUidExResult(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Sid
//  - Msg
type TunnelBroadcastBySidArgs struct {
  Appid int64 `thrift:"appid,1" db:"appid" json:"appid"`
  Sid int32 `thrift:"sid,2" db:"sid" json:"sid"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewTunnelBroadcastBySidArgs() *TunnelBroadcastBySidArgs {
  return &TunnelBroadcastBySidArgs{}
}


func (p *TunnelBroadcastBySidArgs) GetAppid() int64 {
  return p.Appid
}

func (p *TunnelBroadcastBySidArgs) GetSid() int32 {
  return p.Sid
}

func (p *TunnelBroadcastBySidArgs) GetMsg() string {
  return p.Msg
}
func (p *TunnelBroadcastBySidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelBroadcastBySidArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TunnelBroadcastBySidArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TunnelBroadcastBySidArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelBroadcastBySidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcastBySid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelBroadcastBySidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelBroadcastBySidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelBroadcastBySidResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelBroadcastBySidResult() *TunnelBroadcastBySidResult {
  return &TunnelBroadcastBySidResult{}
}

var TunnelBroadcastBySidResult_Success_DEFAULT int32
func (p *TunnelBroadcastBySidResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelBroadcastBySidResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelBroadcastBySidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelBroadcastBySidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelBroadcastBySidResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelBroadcastBySidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcastBySid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelBroadcastBySidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelBroadcastBySidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelBroadcastBySidResult(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Sid
//  - MsgType
//  - Msg
type TunnelBroadcastBySidExArgs struct {
  Appid int64 `thrift:"appid,1" db:"appid" json:"appid"`
  Sid int32 `thrift:"sid,2" db:"sid" json:"sid"`
  MsgType int32 `thrift:"msg_type,3" db:"msg_type" json:"msg_type"`
  Msg string `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewTunnelBroadcastBySidExArgs() *TunnelBroadcastBySidExArgs {
  return &TunnelBroadcastBySidExArgs{}
}


func (p *TunnelBroadcastBySidExArgs) GetAppid() int64 {
  return p.Appid
}

func (p *TunnelBroadcastBySidExArgs) GetSid() int32 {
  return p.Sid
}

func (p *TunnelBroadcastBySidExArgs) GetMsgType() int32 {
  return p.MsgType
}

func (p *TunnelBroadcastBySidExArgs) GetMsg() string {
  return p.Msg
}
func (p *TunnelBroadcastBySidExArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelBroadcastBySidExArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *TunnelBroadcastBySidExArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TunnelBroadcastBySidExArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *TunnelBroadcastBySidExArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelBroadcastBySidExArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcastBySidEx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelBroadcastBySidExArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidExArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidExArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg_type: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidExArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err) }
  return err
}

func (p *TunnelBroadcastBySidExArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelBroadcastBySidExArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelBroadcastBySidExResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelBroadcastBySidExResult() *TunnelBroadcastBySidExResult {
  return &TunnelBroadcastBySidExResult{}
}

var TunnelBroadcastBySidExResult_Success_DEFAULT int32
func (p *TunnelBroadcastBySidExResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelBroadcastBySidExResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelBroadcastBySidExResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelBroadcastBySidExResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelBroadcastBySidExResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelBroadcastBySidExResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("broadcastBySidEx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelBroadcastBySidExResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelBroadcastBySidExResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelBroadcastBySidExResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Sid
//  - Msg
type TunnelOnOfficialMikeArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Sid int32 `thrift:"sid,2" db:"sid" json:"sid"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewTunnelOnOfficialMikeArgs() *TunnelOnOfficialMikeArgs {
  return &TunnelOnOfficialMikeArgs{}
}


func (p *TunnelOnOfficialMikeArgs) GetUID() int64 {
  return p.UID
}

func (p *TunnelOnOfficialMikeArgs) GetSid() int32 {
  return p.Sid
}

func (p *TunnelOnOfficialMikeArgs) GetMsg() string {
  return p.Msg
}
func (p *TunnelOnOfficialMikeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelOnOfficialMikeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TunnelOnOfficialMikeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TunnelOnOfficialMikeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelOnOfficialMikeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onOfficialMike_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelOnOfficialMikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TunnelOnOfficialMikeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TunnelOnOfficialMikeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TunnelOnOfficialMikeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelOnOfficialMikeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelOnOfficialMikeResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelOnOfficialMikeResult() *TunnelOnOfficialMikeResult {
  return &TunnelOnOfficialMikeResult{}
}

var TunnelOnOfficialMikeResult_Success_DEFAULT int32
func (p *TunnelOnOfficialMikeResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelOnOfficialMikeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelOnOfficialMikeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelOnOfficialMikeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelOnOfficialMikeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelOnOfficialMikeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onOfficialMike_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelOnOfficialMikeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelOnOfficialMikeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelOnOfficialMikeResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Sid
//  - Msg
type TunnelOffOfficialMikeArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Sid int32 `thrift:"sid,2" db:"sid" json:"sid"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewTunnelOffOfficialMikeArgs() *TunnelOffOfficialMikeArgs {
  return &TunnelOffOfficialMikeArgs{}
}


func (p *TunnelOffOfficialMikeArgs) GetUID() int64 {
  return p.UID
}

func (p *TunnelOffOfficialMikeArgs) GetSid() int32 {
  return p.Sid
}

func (p *TunnelOffOfficialMikeArgs) GetMsg() string {
  return p.Msg
}
func (p *TunnelOffOfficialMikeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelOffOfficialMikeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TunnelOffOfficialMikeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *TunnelOffOfficialMikeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TunnelOffOfficialMikeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("offOfficialMike_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelOffOfficialMikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TunnelOffOfficialMikeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err) }
  return err
}

func (p *TunnelOffOfficialMikeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TunnelOffOfficialMikeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelOffOfficialMikeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TunnelOffOfficialMikeResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTunnelOffOfficialMikeResult() *TunnelOffOfficialMikeResult {
  return &TunnelOffOfficialMikeResult{}
}

var TunnelOffOfficialMikeResult_Success_DEFAULT int32
func (p *TunnelOffOfficialMikeResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TunnelOffOfficialMikeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TunnelOffOfficialMikeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TunnelOffOfficialMikeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TunnelOffOfficialMikeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TunnelOffOfficialMikeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("offOfficialMike_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TunnelOffOfficialMikeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TunnelOffOfficialMikeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TunnelOffOfficialMikeResult(%+v)", *p)
}


