// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package callrecord

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"bilin/thrift/gen-go/common"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
// getUserRoom接口调用返回接口
// 
// Attributes:
//  - Result_
//  - ErrorMsg
//  - Existed
//  - Name
//  - Topic
type GetUserRoomRet struct {
  Result_ string `thrift:"result,1,required" db:"result" json:"result"`
  ErrorMsg *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
  Existed bool `thrift:"existed,3,required" db:"existed" json:"existed"`
  Name *string `thrift:"name,4" db:"name" json:"name,omitempty"`
  Topic *string `thrift:"topic,5" db:"topic" json:"topic,omitempty"`
}

func NewGetUserRoomRet() *GetUserRoomRet {
  return &GetUserRoomRet{}
}


func (p *GetUserRoomRet) GetResult_() string {
  return p.Result_
}
var GetUserRoomRet_ErrorMsg_DEFAULT string
func (p *GetUserRoomRet) GetErrorMsg() string {
  if !p.IsSetErrorMsg() {
    return GetUserRoomRet_ErrorMsg_DEFAULT
  }
return *p.ErrorMsg
}

func (p *GetUserRoomRet) GetExisted() bool {
  return p.Existed
}
var GetUserRoomRet_Name_DEFAULT string
func (p *GetUserRoomRet) GetName() string {
  if !p.IsSetName() {
    return GetUserRoomRet_Name_DEFAULT
  }
return *p.Name
}
var GetUserRoomRet_Topic_DEFAULT string
func (p *GetUserRoomRet) GetTopic() string {
  if !p.IsSetTopic() {
    return GetUserRoomRet_Topic_DEFAULT
  }
return *p.Topic
}
func (p *GetUserRoomRet) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *GetUserRoomRet) IsSetName() bool {
  return p.Name != nil
}

func (p *GetUserRoomRet) IsSetTopic() bool {
  return p.Topic != nil
}

func (p *GetUserRoomRet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetExisted bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExisted = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetExisted{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Existed is not set"));
  }
  return nil
}

func (p *GetUserRoomRet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *GetUserRoomRet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = &v
}
  return nil
}

func (p *GetUserRoomRet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Existed = v
}
  return nil
}

func (p *GetUserRoomRet)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *GetUserRoomRet)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Topic = &v
}
  return nil
}

func (p *GetUserRoomRet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserRoomRet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserRoomRet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetUserRoomRet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err) }
  }
  return err
}

func (p *GetUserRoomRet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existed", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:existed: ", p), err) }
  if err := oprot.WriteBool(bool(p.Existed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existed (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:existed: ", p), err) }
  return err
}

func (p *GetUserRoomRet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  }
  return err
}

func (p *GetUserRoomRet) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTopic() {
    if err := oprot.WriteFieldBegin("topic", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:topic: ", p), err) }
    if err := oprot.WriteString(string(*p.Topic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.topic (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:topic: ", p), err) }
  }
  return err
}

func (p *GetUserRoomRet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserRoomRet(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ErrorMsg
//  - WhiteList
type QueryMyRoomWhiteListRet struct {
  Result_ string `thrift:"result,1,required" db:"result" json:"result"`
  ErrorMsg *string `thrift:"errorMsg,2" db:"errorMsg" json:"errorMsg,omitempty"`
  WhiteList []int32 `thrift:"whiteList,3" db:"whiteList" json:"whiteList,omitempty"`
}

func NewQueryMyRoomWhiteListRet() *QueryMyRoomWhiteListRet {
  return &QueryMyRoomWhiteListRet{}
}


func (p *QueryMyRoomWhiteListRet) GetResult_() string {
  return p.Result_
}
var QueryMyRoomWhiteListRet_ErrorMsg_DEFAULT string
func (p *QueryMyRoomWhiteListRet) GetErrorMsg() string {
  if !p.IsSetErrorMsg() {
    return QueryMyRoomWhiteListRet_ErrorMsg_DEFAULT
  }
return *p.ErrorMsg
}
var QueryMyRoomWhiteListRet_WhiteList_DEFAULT []int32

func (p *QueryMyRoomWhiteListRet) GetWhiteList() []int32 {
  return p.WhiteList
}
func (p *QueryMyRoomWhiteListRet) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *QueryMyRoomWhiteListRet) IsSetWhiteList() bool {
  return p.WhiteList != nil
}

func (p *QueryMyRoomWhiteListRet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *QueryMyRoomWhiteListRet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *QueryMyRoomWhiteListRet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = &v
}
  return nil
}

func (p *QueryMyRoomWhiteListRet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.WhiteList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.WhiteList = append(p.WhiteList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryMyRoomWhiteListRet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryMyRoomWhiteListRet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryMyRoomWhiteListRet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *QueryMyRoomWhiteListRet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMsg: ", p), err) }
  }
  return err
}

func (p *QueryMyRoomWhiteListRet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetWhiteList() {
    if err := oprot.WriteFieldBegin("whiteList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:whiteList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.WhiteList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.WhiteList {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:whiteList: ", p), err) }
  }
  return err
}

func (p *QueryMyRoomWhiteListRet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryMyRoomWhiteListRet(%+v)", *p)
}

type CallRecordService interface {
  common.BaseService
  //呼叫记录相关服务接口

  // Parameters:
  //  - ToUserId
  //  - IsFinish
  //  - FlowerNum
  FinishNewUserRandomCallTask(ctx context.Context, toUserId int64, isFinish bool, flowerNum int32) (r *common.ComRet, err error)
  // Parameters:
  //  - FromUserId
  //  - ToUserId
  //  - IsFriendCall
  //  - ApplyId
  AddMissedCall(ctx context.Context, fromUserId int64, toUserId int64, isFriendCall int32, applyId string) (r *common.ComRet, err error)
  // Parameters:
  //  - BeginTime
  //  - CallId
  //  - EndTime
  //  - FlowerCounts
  //  - ToUserId
  //  - CallType
  //  - FromUserId
  //  - NetType
  AddCallRecordByCCServer(ctx context.Context, beginTime int64, callId string, endTime int64, flowerCounts string, toUserId int64, callType int32, fromUserId int64, netType string) (r *common.ComRet, err error)
  // Parameters:
  //  - CallId
  //  - FromUserId
  //  - ToUserId
  //  - Type
  AddUserFlowerByCall(ctx context.Context, callId string, fromUserId int64, toUserId int64, type_a1 int32) (r *common.ComRet, err error)
  // Parameters:
  //  - UserId
  //  - RoomId
  //  - RoomType
  GetUserRoom(ctx context.Context, userId int64, roomId int64, roomType int32) (r *GetUserRoomRet, err error)
  // Parameters:
  //  - UserId
  //  - RoomId
  //  - RoomType
  //  - NewTopic_
  UpdateRoomTopic(ctx context.Context, userId int64, roomId int64, roomType int32, newTopic string) (r *common.ComRet, err error)
  QueryMyRoomWhiteList(ctx context.Context) (r *QueryMyRoomWhiteListRet, err error)
}

//呼叫记录相关服务接口
type CallRecordServiceClient struct {
  c thrift.TClient
  *common.BaseServiceClient
}

// Deprecated: Use NewCallRecordService instead
func NewCallRecordServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CallRecordServiceClient {
  return &CallRecordServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}}

// Deprecated: Use NewCallRecordService instead
func NewCallRecordServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CallRecordServiceClient {
  return &CallRecordServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

func NewCallRecordServiceClient(c thrift.TClient) *CallRecordServiceClient {
  return &CallRecordServiceClient{
    c: c,
    BaseServiceClient: common.NewBaseServiceClient(c),
  }
}

// Parameters:
//  - ToUserId
//  - IsFinish
//  - FlowerNum
func (p *CallRecordServiceClient) FinishNewUserRandomCallTask(ctx context.Context, toUserId int64, isFinish bool, flowerNum int32) (r *common.ComRet, err error) {
  var _args1 CallRecordServiceFinishNewUserRandomCallTaskArgs
  _args1.ToUserId = toUserId
  _args1.IsFinish = isFinish
  _args1.FlowerNum = flowerNum
  var _result2 CallRecordServiceFinishNewUserRandomCallTaskResult
  if err = p.c.Call(ctx, "finishNewUserRandomCallTask", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - FromUserId
//  - ToUserId
//  - IsFriendCall
//  - ApplyId
func (p *CallRecordServiceClient) AddMissedCall(ctx context.Context, fromUserId int64, toUserId int64, isFriendCall int32, applyId string) (r *common.ComRet, err error) {
  var _args3 CallRecordServiceAddMissedCallArgs
  _args3.FromUserId = fromUserId
  _args3.ToUserId = toUserId
  _args3.IsFriendCall = isFriendCall
  _args3.ApplyId = applyId
  var _result4 CallRecordServiceAddMissedCallResult
  if err = p.c.Call(ctx, "addMissedCall", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - BeginTime
//  - CallId
//  - EndTime
//  - FlowerCounts
//  - ToUserId
//  - CallType
//  - FromUserId
//  - NetType
func (p *CallRecordServiceClient) AddCallRecordByCCServer(ctx context.Context, beginTime int64, callId string, endTime int64, flowerCounts string, toUserId int64, callType int32, fromUserId int64, netType string) (r *common.ComRet, err error) {
  var _args5 CallRecordServiceAddCallRecordByCCServerArgs
  _args5.BeginTime = beginTime
  _args5.CallId = callId
  _args5.EndTime = endTime
  _args5.FlowerCounts = flowerCounts
  _args5.ToUserId = toUserId
  _args5.CallType = callType
  _args5.FromUserId = fromUserId
  _args5.NetType = netType
  var _result6 CallRecordServiceAddCallRecordByCCServerResult
  if err = p.c.Call(ctx, "addCallRecordByCCServer", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - CallId
//  - FromUserId
//  - ToUserId
//  - Type
func (p *CallRecordServiceClient) AddUserFlowerByCall(ctx context.Context, callId string, fromUserId int64, toUserId int64, type_a1 int32) (r *common.ComRet, err error) {
  var _args7 CallRecordServiceAddUserFlowerByCallArgs
  _args7.CallId = callId
  _args7.FromUserId = fromUserId
  _args7.ToUserId = toUserId
  _args7.Type = type_a1
  var _result8 CallRecordServiceAddUserFlowerByCallResult
  if err = p.c.Call(ctx, "addUserFlowerByCall", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - RoomId
//  - RoomType
func (p *CallRecordServiceClient) GetUserRoom(ctx context.Context, userId int64, roomId int64, roomType int32) (r *GetUserRoomRet, err error) {
  var _args9 CallRecordServiceGetUserRoomArgs
  _args9.UserId = userId
  _args9.RoomId = roomId
  _args9.RoomType = roomType
  var _result10 CallRecordServiceGetUserRoomResult
  if err = p.c.Call(ctx, "getUserRoom", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - RoomId
//  - RoomType
//  - NewTopic_
func (p *CallRecordServiceClient) UpdateRoomTopic(ctx context.Context, userId int64, roomId int64, roomType int32, newTopic string) (r *common.ComRet, err error) {
  var _args11 CallRecordServiceUpdateRoomTopicArgs
  _args11.UserId = userId
  _args11.RoomId = roomId
  _args11.RoomType = roomType
  _args11.NewTopic_ = newTopic
  var _result12 CallRecordServiceUpdateRoomTopicResult
  if err = p.c.Call(ctx, "updateRoomTopic", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

func (p *CallRecordServiceClient) QueryMyRoomWhiteList(ctx context.Context) (r *QueryMyRoomWhiteListRet, err error) {
  var _args13 CallRecordServiceQueryMyRoomWhiteListArgs
  var _result14 CallRecordServiceQueryMyRoomWhiteListResult
  if err = p.c.Call(ctx, "queryMyRoomWhiteList", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

type CallRecordServiceProcessor struct {
  *common.BaseServiceProcessor
}

func NewCallRecordServiceProcessor(handler CallRecordService) *CallRecordServiceProcessor {
  self15 := &CallRecordServiceProcessor{common.NewBaseServiceProcessor(handler)}
  self15.AddToProcessorMap("finishNewUserRandomCallTask", &callRecordServiceProcessorFinishNewUserRandomCallTask{handler:handler})
  self15.AddToProcessorMap("addMissedCall", &callRecordServiceProcessorAddMissedCall{handler:handler})
  self15.AddToProcessorMap("addCallRecordByCCServer", &callRecordServiceProcessorAddCallRecordByCCServer{handler:handler})
  self15.AddToProcessorMap("addUserFlowerByCall", &callRecordServiceProcessorAddUserFlowerByCall{handler:handler})
  self15.AddToProcessorMap("getUserRoom", &callRecordServiceProcessorGetUserRoom{handler:handler})
  self15.AddToProcessorMap("updateRoomTopic", &callRecordServiceProcessorUpdateRoomTopic{handler:handler})
  self15.AddToProcessorMap("queryMyRoomWhiteList", &callRecordServiceProcessorQueryMyRoomWhiteList{handler:handler})
  return self15
}

type callRecordServiceProcessorFinishNewUserRandomCallTask struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorFinishNewUserRandomCallTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceFinishNewUserRandomCallTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("finishNewUserRandomCallTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceFinishNewUserRandomCallTaskResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.FinishNewUserRandomCallTask(ctx, args.ToUserId, args.IsFinish, args.FlowerNum); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishNewUserRandomCallTask: " + err2.Error())
    oprot.WriteMessageBegin("finishNewUserRandomCallTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("finishNewUserRandomCallTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorAddMissedCall struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorAddMissedCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceAddMissedCallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addMissedCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceAddMissedCallResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.AddMissedCall(ctx, args.FromUserId, args.ToUserId, args.IsFriendCall, args.ApplyId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addMissedCall: " + err2.Error())
    oprot.WriteMessageBegin("addMissedCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addMissedCall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorAddCallRecordByCCServer struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorAddCallRecordByCCServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceAddCallRecordByCCServerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addCallRecordByCCServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceAddCallRecordByCCServerResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.AddCallRecordByCCServer(ctx, args.BeginTime, args.CallId, args.EndTime, args.FlowerCounts, args.ToUserId, args.CallType, args.FromUserId, args.NetType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addCallRecordByCCServer: " + err2.Error())
    oprot.WriteMessageBegin("addCallRecordByCCServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addCallRecordByCCServer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorAddUserFlowerByCall struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorAddUserFlowerByCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceAddUserFlowerByCallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addUserFlowerByCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceAddUserFlowerByCallResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.AddUserFlowerByCall(ctx, args.CallId, args.FromUserId, args.ToUserId, args.Type); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUserFlowerByCall: " + err2.Error())
    oprot.WriteMessageBegin("addUserFlowerByCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addUserFlowerByCall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorGetUserRoom struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorGetUserRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceGetUserRoomArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceGetUserRoomResult{}
var retval *GetUserRoomRet
  var err2 error
  if retval, err2 = p.handler.GetUserRoom(ctx, args.UserId, args.RoomId, args.RoomType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRoom: " + err2.Error())
    oprot.WriteMessageBegin("getUserRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserRoom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorUpdateRoomTopic struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorUpdateRoomTopic) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceUpdateRoomTopicArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateRoomTopic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceUpdateRoomTopicResult{}
var retval *common.ComRet
  var err2 error
  if retval, err2 = p.handler.UpdateRoomTopic(ctx, args.UserId, args.RoomId, args.RoomType, args.NewTopic_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRoomTopic: " + err2.Error())
    oprot.WriteMessageBegin("updateRoomTopic", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateRoomTopic", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type callRecordServiceProcessorQueryMyRoomWhiteList struct {
  handler CallRecordService
}

func (p *callRecordServiceProcessorQueryMyRoomWhiteList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallRecordServiceQueryMyRoomWhiteListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryMyRoomWhiteList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CallRecordServiceQueryMyRoomWhiteListResult{}
var retval *QueryMyRoomWhiteListRet
  var err2 error
  if retval, err2 = p.handler.QueryMyRoomWhiteList(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMyRoomWhiteList: " + err2.Error())
    oprot.WriteMessageBegin("queryMyRoomWhiteList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryMyRoomWhiteList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ToUserId
//  - IsFinish
//  - FlowerNum
type CallRecordServiceFinishNewUserRandomCallTaskArgs struct {
  ToUserId int64 `thrift:"toUserId,1" db:"toUserId" json:"toUserId"`
  IsFinish bool `thrift:"isFinish,2" db:"isFinish" json:"isFinish"`
  FlowerNum int32 `thrift:"flowerNum,3" db:"flowerNum" json:"flowerNum"`
}

func NewCallRecordServiceFinishNewUserRandomCallTaskArgs() *CallRecordServiceFinishNewUserRandomCallTaskArgs {
  return &CallRecordServiceFinishNewUserRandomCallTaskArgs{}
}


func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) GetToUserId() int64 {
  return p.ToUserId
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) GetIsFinish() bool {
  return p.IsFinish
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) GetFlowerNum() int32 {
  return p.FlowerNum
}
func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ToUserId = v
}
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsFinish = v
}
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FlowerNum = v
}
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishNewUserRandomCallTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:toUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ToUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:toUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isFinish", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isFinish: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsFinish)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isFinish (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isFinish: ", p), err) }
  return err
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flowerNum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flowerNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.FlowerNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flowerNum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flowerNum: ", p), err) }
  return err
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceFinishNewUserRandomCallTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceFinishNewUserRandomCallTaskResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceFinishNewUserRandomCallTaskResult() *CallRecordServiceFinishNewUserRandomCallTaskResult {
  return &CallRecordServiceFinishNewUserRandomCallTaskResult{}
}

var CallRecordServiceFinishNewUserRandomCallTaskResult_Success_DEFAULT *common.ComRet
func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceFinishNewUserRandomCallTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishNewUserRandomCallTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceFinishNewUserRandomCallTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceFinishNewUserRandomCallTaskResult(%+v)", *p)
}

// Attributes:
//  - FromUserId
//  - ToUserId
//  - IsFriendCall
//  - ApplyId
type CallRecordServiceAddMissedCallArgs struct {
  FromUserId int64 `thrift:"fromUserId,1" db:"fromUserId" json:"fromUserId"`
  ToUserId int64 `thrift:"toUserId,2" db:"toUserId" json:"toUserId"`
  IsFriendCall int32 `thrift:"isFriendCall,3" db:"isFriendCall" json:"isFriendCall"`
  ApplyId string `thrift:"applyId,4" db:"applyId" json:"applyId"`
}

func NewCallRecordServiceAddMissedCallArgs() *CallRecordServiceAddMissedCallArgs {
  return &CallRecordServiceAddMissedCallArgs{}
}


func (p *CallRecordServiceAddMissedCallArgs) GetFromUserId() int64 {
  return p.FromUserId
}

func (p *CallRecordServiceAddMissedCallArgs) GetToUserId() int64 {
  return p.ToUserId
}

func (p *CallRecordServiceAddMissedCallArgs) GetIsFriendCall() int32 {
  return p.IsFriendCall
}

func (p *CallRecordServiceAddMissedCallArgs) GetApplyId() string {
  return p.ApplyId
}
func (p *CallRecordServiceAddMissedCallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromUserId = v
}
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ToUserId = v
}
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsFriendCall = v
}
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplyId = v
}
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addMissedCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddMissedCallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddMissedCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ToUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddMissedCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isFriendCall", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isFriendCall: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsFriendCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isFriendCall (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isFriendCall: ", p), err) }
  return err
}

func (p *CallRecordServiceAddMissedCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applyId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applyId: ", p), err) }
  if err := oprot.WriteString(string(p.ApplyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applyId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddMissedCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddMissedCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceAddMissedCallResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceAddMissedCallResult() *CallRecordServiceAddMissedCallResult {
  return &CallRecordServiceAddMissedCallResult{}
}

var CallRecordServiceAddMissedCallResult_Success_DEFAULT *common.ComRet
func (p *CallRecordServiceAddMissedCallResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceAddMissedCallResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceAddMissedCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceAddMissedCallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddMissedCallResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceAddMissedCallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addMissedCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddMissedCallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceAddMissedCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddMissedCallResult(%+v)", *p)
}

// Attributes:
//  - BeginTime
//  - CallId
//  - EndTime
//  - FlowerCounts
//  - ToUserId
//  - CallType
//  - FromUserId
//  - NetType
type CallRecordServiceAddCallRecordByCCServerArgs struct {
  BeginTime int64 `thrift:"beginTime,1" db:"beginTime" json:"beginTime"`
  CallId string `thrift:"callId,2" db:"callId" json:"callId"`
  EndTime int64 `thrift:"endTime,3" db:"endTime" json:"endTime"`
  FlowerCounts string `thrift:"flowerCounts,4" db:"flowerCounts" json:"flowerCounts"`
  ToUserId int64 `thrift:"toUserId,5" db:"toUserId" json:"toUserId"`
  CallType int32 `thrift:"callType,6" db:"callType" json:"callType"`
  FromUserId int64 `thrift:"fromUserId,7" db:"fromUserId" json:"fromUserId"`
  NetType string `thrift:"netType,8" db:"netType" json:"netType"`
}

func NewCallRecordServiceAddCallRecordByCCServerArgs() *CallRecordServiceAddCallRecordByCCServerArgs {
  return &CallRecordServiceAddCallRecordByCCServerArgs{}
}


func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetBeginTime() int64 {
  return p.BeginTime
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetCallId() string {
  return p.CallId
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetFlowerCounts() string {
  return p.FlowerCounts
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetToUserId() int64 {
  return p.ToUserId
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetCallType() int32 {
  return p.CallType
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetFromUserId() int64 {
  return p.FromUserId
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) GetNetType() string {
  return p.NetType
}
func (p *CallRecordServiceAddCallRecordByCCServerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BeginTime = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CallId = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FlowerCounts = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ToUserId = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CallType = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FromUserId = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NetType = v
}
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCallRecordByCCServer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("beginTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beginTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.BeginTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.beginTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beginTime: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:callId: ", p), err) }
  if err := oprot.WriteString(string(p.CallId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:callId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endTime: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flowerCounts", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flowerCounts: ", p), err) }
  if err := oprot.WriteString(string(p.FlowerCounts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flowerCounts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flowerCounts: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ToUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:callType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CallType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:callType: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fromUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fromUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("netType", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:netType: ", p), err) }
  if err := oprot.WriteString(string(p.NetType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.netType (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:netType: ", p), err) }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddCallRecordByCCServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceAddCallRecordByCCServerResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceAddCallRecordByCCServerResult() *CallRecordServiceAddCallRecordByCCServerResult {
  return &CallRecordServiceAddCallRecordByCCServerResult{}
}

var CallRecordServiceAddCallRecordByCCServerResult_Success_DEFAULT *common.ComRet
func (p *CallRecordServiceAddCallRecordByCCServerResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceAddCallRecordByCCServerResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceAddCallRecordByCCServerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceAddCallRecordByCCServerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCallRecordByCCServer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddCallRecordByCCServerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceAddCallRecordByCCServerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddCallRecordByCCServerResult(%+v)", *p)
}

// Attributes:
//  - CallId
//  - FromUserId
//  - ToUserId
//  - Type
type CallRecordServiceAddUserFlowerByCallArgs struct {
  CallId string `thrift:"callId,1" db:"callId" json:"callId"`
  FromUserId int64 `thrift:"fromUserId,2" db:"fromUserId" json:"fromUserId"`
  ToUserId int64 `thrift:"toUserId,3" db:"toUserId" json:"toUserId"`
  Type int32 `thrift:"type,4" db:"type" json:"type"`
}

func NewCallRecordServiceAddUserFlowerByCallArgs() *CallRecordServiceAddUserFlowerByCallArgs {
  return &CallRecordServiceAddUserFlowerByCallArgs{}
}


func (p *CallRecordServiceAddUserFlowerByCallArgs) GetCallId() string {
  return p.CallId
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) GetFromUserId() int64 {
  return p.FromUserId
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) GetToUserId() int64 {
  return p.ToUserId
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) GetType() int32 {
  return p.Type
}
func (p *CallRecordServiceAddUserFlowerByCallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallId = v
}
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromUserId = v
}
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ToUserId = v
}
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserFlowerByCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callId: ", p), err) }
  if err := oprot.WriteString(string(p.CallId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ToUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toUserId: ", p), err) }
  return err
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *CallRecordServiceAddUserFlowerByCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddUserFlowerByCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceAddUserFlowerByCallResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceAddUserFlowerByCallResult() *CallRecordServiceAddUserFlowerByCallResult {
  return &CallRecordServiceAddUserFlowerByCallResult{}
}

var CallRecordServiceAddUserFlowerByCallResult_Success_DEFAULT *common.ComRet
func (p *CallRecordServiceAddUserFlowerByCallResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceAddUserFlowerByCallResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceAddUserFlowerByCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceAddUserFlowerByCallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserFlowerByCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceAddUserFlowerByCallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceAddUserFlowerByCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceAddUserFlowerByCallResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - RoomId
//  - RoomType
type CallRecordServiceGetUserRoomArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  RoomId int64 `thrift:"roomId,2" db:"roomId" json:"roomId"`
  RoomType int32 `thrift:"roomType,3" db:"roomType" json:"roomType"`
}

func NewCallRecordServiceGetUserRoomArgs() *CallRecordServiceGetUserRoomArgs {
  return &CallRecordServiceGetUserRoomArgs{}
}


func (p *CallRecordServiceGetUserRoomArgs) GetUserId() int64 {
  return p.UserId
}

func (p *CallRecordServiceGetUserRoomArgs) GetRoomId() int64 {
  return p.RoomId
}

func (p *CallRecordServiceGetUserRoomArgs) GetRoomType() int32 {
  return p.RoomType
}
func (p *CallRecordServiceGetUserRoomArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceGetUserRoomArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *CallRecordServiceGetUserRoomArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *CallRecordServiceGetUserRoomArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoomType = v
}
  return nil
}

func (p *CallRecordServiceGetUserRoomArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceGetUserRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *CallRecordServiceGetUserRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteI64(int64(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *CallRecordServiceGetUserRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoomType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomType: ", p), err) }
  return err
}

func (p *CallRecordServiceGetUserRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceGetUserRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceGetUserRoomResult struct {
  Success *GetUserRoomRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceGetUserRoomResult() *CallRecordServiceGetUserRoomResult {
  return &CallRecordServiceGetUserRoomResult{}
}

var CallRecordServiceGetUserRoomResult_Success_DEFAULT *GetUserRoomRet
func (p *CallRecordServiceGetUserRoomResult) GetSuccess() *GetUserRoomRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceGetUserRoomResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceGetUserRoomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceGetUserRoomResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceGetUserRoomResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserRoomRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceGetUserRoomResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceGetUserRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceGetUserRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceGetUserRoomResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - RoomId
//  - RoomType
//  - NewTopic_
type CallRecordServiceUpdateRoomTopicArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  RoomId int64 `thrift:"roomId,2" db:"roomId" json:"roomId"`
  RoomType int32 `thrift:"roomType,3" db:"roomType" json:"roomType"`
  NewTopic_ string `thrift:"newTopic,4" db:"newTopic" json:"newTopic"`
}

func NewCallRecordServiceUpdateRoomTopicArgs() *CallRecordServiceUpdateRoomTopicArgs {
  return &CallRecordServiceUpdateRoomTopicArgs{}
}


func (p *CallRecordServiceUpdateRoomTopicArgs) GetUserId() int64 {
  return p.UserId
}

func (p *CallRecordServiceUpdateRoomTopicArgs) GetRoomId() int64 {
  return p.RoomId
}

func (p *CallRecordServiceUpdateRoomTopicArgs) GetRoomType() int32 {
  return p.RoomType
}

func (p *CallRecordServiceUpdateRoomTopicArgs) GetNewTopic_() string {
  return p.NewTopic_
}
func (p *CallRecordServiceUpdateRoomTopicArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoomType = v
}
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NewTopic_ = v
}
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRoomTopic_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *CallRecordServiceUpdateRoomTopicArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteI64(int64(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *CallRecordServiceUpdateRoomTopicArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomType: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoomType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomType: ", p), err) }
  return err
}

func (p *CallRecordServiceUpdateRoomTopicArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newTopic", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newTopic: ", p), err) }
  if err := oprot.WriteString(string(p.NewTopic_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newTopic (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newTopic: ", p), err) }
  return err
}

func (p *CallRecordServiceUpdateRoomTopicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceUpdateRoomTopicArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceUpdateRoomTopicResult struct {
  Success *common.ComRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceUpdateRoomTopicResult() *CallRecordServiceUpdateRoomTopicResult {
  return &CallRecordServiceUpdateRoomTopicResult{}
}

var CallRecordServiceUpdateRoomTopicResult_Success_DEFAULT *common.ComRet
func (p *CallRecordServiceUpdateRoomTopicResult) GetSuccess() *common.ComRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceUpdateRoomTopicResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceUpdateRoomTopicResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceUpdateRoomTopicResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &common.ComRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRoomTopic_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceUpdateRoomTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceUpdateRoomTopicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceUpdateRoomTopicResult(%+v)", *p)
}

type CallRecordServiceQueryMyRoomWhiteListArgs struct {
}

func NewCallRecordServiceQueryMyRoomWhiteListArgs() *CallRecordServiceQueryMyRoomWhiteListArgs {
  return &CallRecordServiceQueryMyRoomWhiteListArgs{}
}

func (p *CallRecordServiceQueryMyRoomWhiteListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMyRoomWhiteList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceQueryMyRoomWhiteListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CallRecordServiceQueryMyRoomWhiteListResult struct {
  Success *QueryMyRoomWhiteListRet `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCallRecordServiceQueryMyRoomWhiteListResult() *CallRecordServiceQueryMyRoomWhiteListResult {
  return &CallRecordServiceQueryMyRoomWhiteListResult{}
}

var CallRecordServiceQueryMyRoomWhiteListResult_Success_DEFAULT *QueryMyRoomWhiteListRet
func (p *CallRecordServiceQueryMyRoomWhiteListResult) GetSuccess() *QueryMyRoomWhiteListRet {
  if !p.IsSetSuccess() {
    return CallRecordServiceQueryMyRoomWhiteListResult_Success_DEFAULT
  }
return p.Success
}
func (p *CallRecordServiceQueryMyRoomWhiteListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &QueryMyRoomWhiteListRet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryMyRoomWhiteList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRecordServiceQueryMyRoomWhiteListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallRecordServiceQueryMyRoomWhiteListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRecordServiceQueryMyRoomWhiteListResult(%+v)", *p)
}


