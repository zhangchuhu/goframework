// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.6.0 by WSRD Tencent.
// Generated from `Config.jce'
// **********************************************************************

package taf
import (
    "code.yy.com/yytars/goframework/jce/taf"
    "code.yy.com/yytars/goframework/jce_parser/gojce"
    "reflect"
    m "code.yy.com/yytars/goframework/tars/servant/model"
    "errors"
    context "context"
    )
type Config struct {
    s m.Servant
}
func (_obj *Config) ListAllConfigByInfo(configInfo GetConfigListInfo,vf *[]string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&configInfo), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"ListAllConfigByInfo", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_2, err := _is.Read(reflect.TypeOf(*vf),2,true)
    if err!=nil {
        return _ret,err
    }
    tmp_2:=r_2.([]string)
    *vf=tmp_2
    return r0.(int32),nil
}
func (_obj *Config) ListConfig(app string,server string,vf *[]string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&app), 1)
    _oe.Write(reflect.ValueOf(&server), 2)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"ListConfig", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_3, err := _is.Read(reflect.TypeOf(*vf),3,true)
    if err!=nil {
        return _ret,err
    }
    tmp_3:=r_3.([]string)
    *vf=tmp_3
    return r0.(int32),nil
}
func (_obj *Config) ListConfigByInfo(configInfo ConfigInfo,vf *[]string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&configInfo), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"ListConfigByInfo", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_2, err := _is.Read(reflect.TypeOf(*vf),2,true)
    if err!=nil {
        return _ret,err
    }
    tmp_2:=r_2.([]string)
    *vf=tmp_2
    return r0.(int32),nil
}
func (_obj *Config) CheckConfig(appServerName string,filename string,host string,result *string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&appServerName), 1)
    _oe.Write(reflect.ValueOf(&filename), 2)
    _oe.Write(reflect.ValueOf(&host), 3)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"checkConfig", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_4, err := _is.Read(reflect.TypeOf(*result),4,true)
    if err!=nil {
        return _ret,err
    }
    tmp_4:=r_4.(string)
    *result=tmp_4
    return r0.(int32),nil
}
func (_obj *Config) CheckConfigByInfo(configInfo ConfigInfo,result *string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&configInfo), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"checkConfigByInfo", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_2, err := _is.Read(reflect.TypeOf(*result),2,true)
    if err!=nil {
        return _ret,err
    }
    tmp_2:=r_2.(string)
    *result=tmp_2
    return r0.(int32),nil
}
func (_obj *Config) LoadConfig(app string,server string,filename string,config *string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&app), 1)
    _oe.Write(reflect.ValueOf(&server), 2)
    _oe.Write(reflect.ValueOf(&filename), 3)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"loadConfig", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_4, err := _is.Read(reflect.TypeOf(*config),4,true)
    if err!=nil {
        return _ret,err
    }
    tmp_4:=r_4.(string)
    *config=tmp_4
    return r0.(int32),nil
}
func (_obj *Config) LoadConfigByHost(appServerName string,filename string,host string,config *string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&appServerName), 1)
    _oe.Write(reflect.ValueOf(&filename), 2)
    _oe.Write(reflect.ValueOf(&host), 3)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"loadConfigByHost", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_4, err := _is.Read(reflect.TypeOf(*config),4,true)
    if err!=nil {
        return _ret,err
    }
    tmp_4:=r_4.(string)
    *config=tmp_4
    return r0.(int32),nil
}
func (_obj *Config) LoadConfigByInfo(configInfo ConfigInfo,config *string,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&configInfo), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"loadConfigByInfo", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_2, err := _is.Read(reflect.TypeOf(*config),2,true)
    if err!=nil {
        return _ret,err
    }
    tmp_2:=r_2.(string)
    *config=tmp_2
    return r0.(int32),nil
}
func(_obj *Config) SetServant(s m.Servant){
    _obj.s = s
}
type _impConfig interface {
    ListAllConfigByInfo(configInfo GetConfigListInfo,vf *[]string) (int32,error)
    ListConfig(app string,server string,vf *[]string) (int32,error)
    ListConfigByInfo(configInfo ConfigInfo,vf *[]string) (int32,error)
    CheckConfig(appServerName string,filename string,host string,result *string) (int32,error)
    CheckConfigByInfo(configInfo ConfigInfo,result *string) (int32,error)
    LoadConfig(app string,server string,filename string,config *string) (int32,error)
    LoadConfigByHost(appServerName string,filename string,host string,config *string) (int32,error)
    LoadConfigByInfo(configInfo ConfigInfo,config *string) (int32,error)
}
func(_obj *Config) Dispatch(ctx context.Context,_val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket,error){
    parms := gojce.NewInputStream(req.SBuffer)
    oe := gojce.NewOutputStream()
    _imp := _val.(_impConfig)
    switch req.SFuncName {
        case "ListAllConfigByInfo":
            var p_0 GetConfigListInfo
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var o_1 []string
            _ret,err := _imp.ListAllConfigByInfo(t_0.(GetConfigListInfo),&o_1)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_1),2)
        case "ListConfig":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 string
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var o_2 []string
            _ret,err := _imp.ListConfig(t_0.(string),t_1.(string),&o_2)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_2),3)
        case "ListConfigByInfo":
            var p_0 ConfigInfo
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var o_1 []string
            _ret,err := _imp.ListConfigByInfo(t_0.(ConfigInfo),&o_1)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_1),2)
        case "checkConfig":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 string
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var p_2 string
            t_2,err := parms.Read(reflect.TypeOf(p_2),3,true)
            if err != nil{
                return nil,err
            }
            var o_3 string
            _ret,err := _imp.CheckConfig(t_0.(string),t_1.(string),t_2.(string),&o_3)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_3),4)
        case "checkConfigByInfo":
            var p_0 ConfigInfo
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var o_1 string
            _ret,err := _imp.CheckConfigByInfo(t_0.(ConfigInfo),&o_1)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_1),2)
        case "loadConfig":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 string
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var p_2 string
            t_2,err := parms.Read(reflect.TypeOf(p_2),3,true)
            if err != nil{
                return nil,err
            }
            var o_3 string
            _ret,err := _imp.LoadConfig(t_0.(string),t_1.(string),t_2.(string),&o_3)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_3),4)
        case "loadConfigByHost":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 string
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var p_2 string
            t_2,err := parms.Read(reflect.TypeOf(p_2),3,true)
            if err != nil{
                return nil,err
            }
            var o_3 string
            _ret,err := _imp.LoadConfigByHost(t_0.(string),t_1.(string),t_2.(string),&o_3)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_3),4)
        case "loadConfigByInfo":
            var p_0 ConfigInfo
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var o_1 string
            _ret,err := _imp.LoadConfigByInfo(t_0.(ConfigInfo),&o_1)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_1),2)
        default:
            return nil,errors.New("func mismatch")
    }
    var status map[string]string
    return &taf.ResponsePacket{
        IVersion:     1,
        CPacketType:  0,
        IRequestId:   req.IRequestId,
        IMessageType: 0,
        IRet:         0,
        SBuffer:      oe.ToBytes(),
        Status:       status,
        SResultDesc:  "",
        Context:      req.Context,
    },nil
}
