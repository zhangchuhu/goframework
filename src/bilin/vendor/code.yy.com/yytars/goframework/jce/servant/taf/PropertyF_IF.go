// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.6.0 by WSRD Tencent.
// Generated from `PropertyF.jce'
// **********************************************************************

package taf
import (
    "code.yy.com/yytars/goframework/jce/taf"
    "code.yy.com/yytars/goframework/jce_parser/gojce"
    "reflect"
    m "code.yy.com/yytars/goframework/tars/servant/model"
    "errors"
    context "context"
    )
type PropertyF struct {
    s m.Servant
}
func (_obj *PropertyF) ReportPropMsg(statmsg map[StatPropMsgHead]StatPropMsgBody,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&statmsg), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"reportPropMsg", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    return r0.(int32),nil
}
func (_obj *PropertyF) ReportTranPropMsg(statmsg map[StatPropMsgHead]StatPropMsgBody,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&statmsg), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"reportTranPropMsg", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    return r0.(int32),nil
}
func(_obj *PropertyF) SetServant(s m.Servant){
    _obj.s = s
}
type _impPropertyF interface {
    ReportPropMsg(statmsg map[StatPropMsgHead]StatPropMsgBody) (int32,error)
    ReportTranPropMsg(statmsg map[StatPropMsgHead]StatPropMsgBody) (int32,error)
}
func(_obj *PropertyF) Dispatch(ctx context.Context,_val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket,error){
    parms := gojce.NewInputStream(req.SBuffer)
    oe := gojce.NewOutputStream()
    _imp := _val.(_impPropertyF)
    switch req.SFuncName {
        case "reportPropMsg":
            var p_0 map[StatPropMsgHead]StatPropMsgBody
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            _ret,err := _imp.ReportPropMsg(t_0.(map[StatPropMsgHead]StatPropMsgBody))
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
        case "reportTranPropMsg":
            var p_0 map[StatPropMsgHead]StatPropMsgBody
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            _ret,err := _imp.ReportTranPropMsg(t_0.(map[StatPropMsgHead]StatPropMsgBody))
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
        default:
            return nil,errors.New("func mismatch")
    }
    var status map[string]string
    return &taf.ResponsePacket{
        IVersion:     1,
        CPacketType:  0,
        IRequestId:   req.IRequestId,
        IMessageType: 0,
        IRet:         0,
        SBuffer:      oe.ToBytes(),
        Status:       status,
        SResultDesc:  "",
        Context:      req.Context,
    },nil
}
