// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.6.0 by WSRD Tencent.
// Generated from `Notify.jce'
// **********************************************************************

package taf
import "reflect"
import "code.yy.com/yytars/goframework/jce_parser/gojce"

type NotifyItem struct {
    STimeStamp string
    SServerId string
    ILevel int32
    SMessage string
}

func (_obj *NotifyItem) resetDefault() {
    _obj.STimeStamp = ""
    _obj.SServerId = ""
    _obj.ILevel = 0
    _obj.SMessage = ""
}

func (_obj *NotifyItem) WriteTo(_os gojce.JceOutputStream) error {
    var _err error
    if _err = _os.Write(reflect.ValueOf(&_obj.STimeStamp), 1); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.SServerId), 2); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.ILevel), 3); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.SMessage), 4); _err != nil {
        return _err
    }
    return nil
}

func (_obj *NotifyItem) ReadFrom(_is gojce.JceInputStream) error {
    var _err error
    var _i interface{}
    _obj.resetDefault()
    _i, _err = _is.Read(reflect.TypeOf(_obj.STimeStamp), 1, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.STimeStamp = _i.(string)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.SServerId), 2, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.SServerId = _i.(string)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.ILevel), 3, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.ILevel = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.SMessage), 4, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.SMessage = _i.(string)
    }
    return nil
}

func (_obj *NotifyItem) Display(_ds gojce.JceDisplayer) {
    _ds.Display(reflect.ValueOf(&_obj.STimeStamp), "sTimeStamp")
    _ds.Display(reflect.ValueOf(&_obj.SServerId), "sServerId")
    _ds.Display(reflect.ValueOf(&_obj.ILevel), "iLevel")
    _ds.Display(reflect.ValueOf(&_obj.SMessage), "sMessage")
}

func (_obj *NotifyItem) WriteJson(_en gojce.JceJsonEncoder) ([]byte, error) {
    var _err error
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.STimeStamp), "sTimeStamp")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.SServerId), "sServerId")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.ILevel), "iLevel")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.SMessage), "sMessage")
    if _err != nil {
        return nil, _err
    }
    return _en.ToBytes(), nil
}

func (_obj *NotifyItem) ReadJson(_de gojce.JceJsonDecoder) error {
    return _de.DecodeJSON(reflect.ValueOf(_obj))
}

