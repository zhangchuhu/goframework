// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.6.0 by WSRD Tencent.
// Generated from `Notify.jce'
// **********************************************************************

package taf
import (
    "code.yy.com/yytars/goframework/jce/taf"
    "code.yy.com/yytars/goframework/jce_parser/gojce"
    "reflect"
    m "code.yy.com/yytars/goframework/tars/servant/model"
    "errors"
    context "context"
    )
type Notify struct {
    s m.Servant
}
func (_obj *Notify) GetNotifyInfo(stKey NotifyKey,stInfo *NotifyInfo,_opt ...map[string]string )(_ret int32,_err error){
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&stKey), 1)
    var (
        _resp *taf.ResponsePacket
        err error
    )
    _resp,err = _obj.s.Taf_invoke(context.TODO(),0,"getNotifyInfo", _oe.ToBytes())
    if err != nil {
        return _ret,err
    }
    _is := gojce.NewInputStream(_resp.SBuffer)
    r0, err := _is.Read(reflect.TypeOf(_ret), 0 ,true)
    if err!=nil {
        return _ret,err
    }
    r_2, err := _is.Read(reflect.TypeOf(*stInfo),2,true)
    if err!=nil {
        return _ret,err
    }
    tmp_2:=r_2.(NotifyInfo)
    *stInfo=tmp_2
    return r0.(int32),nil
}
func (_obj *Notify) NotifyServer(sServerName string,level int,sMessage string,_opt ...map[string]string )error{
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&sServerName), 1)
    _oe.Write(reflect.ValueOf(&level), 2)
    _oe.Write(reflect.ValueOf(&sMessage), 3)
    var (
        err error
    )
    _,err = _obj.s.Taf_invoke(context.TODO(),0,"notifyServer", _oe.ToBytes())
    if err != nil {
        return err
    }
    return nil
}
func (_obj *Notify) ReportNotifyInfo(info ReportInfo,_opt ...map[string]string )error{
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&info), 1)
    var (
        err error
    )
    _,err = _obj.s.Taf_invoke(context.TODO(),0,"reportNotifyInfo", _oe.ToBytes())
    if err != nil {
        return err
    }
    return nil
}
func (_obj *Notify) ReportServer(sServerName string,sThreadId string,sMessage string,_opt ...map[string]string )error{
    _oe := gojce.NewOutputStream()
    _oe.Write(reflect.ValueOf(&sServerName), 1)
    _oe.Write(reflect.ValueOf(&sThreadId), 2)
    _oe.Write(reflect.ValueOf(&sMessage), 3)
    var (
        err error
    )
    _,err = _obj.s.Taf_invoke(context.TODO(),0,"reportServer", _oe.ToBytes())
    if err != nil {
        return err
    }
    return nil
}
func(_obj *Notify) SetServant(s m.Servant){
    _obj.s = s
}
type _impNotify interface {
    GetNotifyInfo(stKey NotifyKey,stInfo *NotifyInfo) (int32,error)
    NotifyServer(sServerName string,level int,sMessage string) (error)
    ReportNotifyInfo(info ReportInfo) (error)
    ReportServer(sServerName string,sThreadId string,sMessage string) (error)
}
func(_obj *Notify) Dispatch(ctx context.Context,_val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket,error){
    parms := gojce.NewInputStream(req.SBuffer)
    oe := gojce.NewOutputStream()
    _imp := _val.(_impNotify)
    switch req.SFuncName {
        case "getNotifyInfo":
            var p_0 NotifyKey
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var o_1 NotifyInfo
            _ret,err := _imp.GetNotifyInfo(t_0.(NotifyKey),&o_1)
            if err != nil{
                return nil,err
            }
            oe.Write(reflect.ValueOf(&_ret), 0)
            oe.Write(reflect.ValueOf(&o_1),2)
        case "notifyServer":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 int
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var p_2 string
            t_2,err := parms.Read(reflect.TypeOf(p_2),3,true)
            if err != nil{
                return nil,err
            }
            err = _imp.NotifyServer(t_0.(string),t_1.(int),t_2.(string))
            if err != nil{
                return nil,err
            }
        case "reportNotifyInfo":
            var p_0 ReportInfo
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            err = _imp.ReportNotifyInfo(t_0.(ReportInfo))
            if err != nil{
                return nil,err
            }
        case "reportServer":
            var p_0 string
            t_0,err := parms.Read(reflect.TypeOf(p_0),1,true)
            if err != nil{
                return nil,err
            }
            var p_1 string
            t_1,err := parms.Read(reflect.TypeOf(p_1),2,true)
            if err != nil{
                return nil,err
            }
            var p_2 string
            t_2,err := parms.Read(reflect.TypeOf(p_2),3,true)
            if err != nil{
                return nil,err
            }
            err = _imp.ReportServer(t_0.(string),t_1.(string),t_2.(string))
            if err != nil{
                return nil,err
            }
        default:
            return nil,errors.New("func mismatch")
    }
    var status map[string]string
    return &taf.ResponsePacket{
        IVersion:     1,
        CPacketType:  0,
        IRequestId:   req.IRequestId,
        IMessageType: 0,
        IRet:         0,
        SBuffer:      oe.ToBytes(),
        Status:       status,
        SResultDesc:  "",
        Context:      req.Context,
    },nil
}
