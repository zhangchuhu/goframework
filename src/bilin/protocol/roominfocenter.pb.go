// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: roominfocenter.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomInfo struct {
	Roomid         uint64 `protobuf:"varint,1,opt,name=roomid" json:"roomid,omitempty"`
	Starttime      uint64 `protobuf:"varint,2,opt,name=starttime" json:"starttime,omitempty"`
	Usernumber     uint64 `protobuf:"varint,3,opt,name=usernumber" json:"usernumber,omitempty"`
	RoomcategoryID int32  `protobuf:"varint,4,opt,name=roomcategoryID" json:"roomcategoryID,omitempty"`
	Owner          uint64 `protobuf:"varint,5,opt,name=owner" json:"owner,omitempty"`
	Title          string `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	RoomType2      int32  `protobuf:"varint,7,opt,name=roomType2" json:"roomType2,omitempty"`
	OwnerBilinID   uint64 `protobuf:"varint,8,opt,name=ownerBilinID" json:"ownerBilinID,omitempty"`
	LockStatus     int32  `protobuf:"varint,9,opt,name=LockStatus" json:"LockStatus,omitempty"`
}

func (m *RoomInfo) Reset()                    { *m = RoomInfo{} }
func (m *RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()               {}
func (*RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *RoomInfo) GetRoomid() uint64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomInfo) GetStarttime() uint64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *RoomInfo) GetUsernumber() uint64 {
	if m != nil {
		return m.Usernumber
	}
	return 0
}

func (m *RoomInfo) GetRoomcategoryID() int32 {
	if m != nil {
		return m.RoomcategoryID
	}
	return 0
}

func (m *RoomInfo) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomInfo) GetRoomType2() int32 {
	if m != nil {
		return m.RoomType2
	}
	return 0
}

func (m *RoomInfo) GetOwnerBilinID() uint64 {
	if m != nil {
		return m.OwnerBilinID
	}
	return 0
}

func (m *RoomInfo) GetLockStatus() int32 {
	if m != nil {
		return m.LockStatus
	}
	return 0
}

type LivingRoomsInfoReq struct {
}

func (m *LivingRoomsInfoReq) Reset()                    { *m = LivingRoomsInfoReq{} }
func (m *LivingRoomsInfoReq) String() string            { return proto.CompactTextString(m) }
func (*LivingRoomsInfoReq) ProtoMessage()               {}
func (*LivingRoomsInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

type LivingRoomsInfoResp struct {
	Livingrooms map[uint64]*RoomInfo `protobuf:"bytes,1,rep,name=livingrooms" json:"livingrooms,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LivingRoomsInfoResp) Reset()                    { *m = LivingRoomsInfoResp{} }
func (m *LivingRoomsInfoResp) String() string            { return proto.CompactTextString(m) }
func (*LivingRoomsInfoResp) ProtoMessage()               {}
func (*LivingRoomsInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *LivingRoomsInfoResp) GetLivingrooms() map[uint64]*RoomInfo {
	if m != nil {
		return m.Livingrooms
	}
	return nil
}

type BatchLivingRoomsInfoByHostsReq struct {
	Hosts []uint64 `protobuf:"varint,1,rep,packed,name=hosts" json:"hosts,omitempty"`
}

func (m *BatchLivingRoomsInfoByHostsReq) Reset()                    { *m = BatchLivingRoomsInfoByHostsReq{} }
func (m *BatchLivingRoomsInfoByHostsReq) String() string            { return proto.CompactTextString(m) }
func (*BatchLivingRoomsInfoByHostsReq) ProtoMessage()               {}
func (*BatchLivingRoomsInfoByHostsReq) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *BatchLivingRoomsInfoByHostsReq) GetHosts() []uint64 {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type BatchLivingRoomsInfoByHostsResp struct {
	Livingrooms map[uint64]*RoomInfo `protobuf:"bytes,1,rep,name=livingrooms" json:"livingrooms,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BatchLivingRoomsInfoByHostsResp) Reset()         { *m = BatchLivingRoomsInfoByHostsResp{} }
func (m *BatchLivingRoomsInfoByHostsResp) String() string { return proto.CompactTextString(m) }
func (*BatchLivingRoomsInfoByHostsResp) ProtoMessage()    {}
func (*BatchLivingRoomsInfoByHostsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{4}
}

func (m *BatchLivingRoomsInfoByHostsResp) GetLivingrooms() map[uint64]*RoomInfo {
	if m != nil {
		return m.Livingrooms
	}
	return nil
}

type IsLivingReq struct {
	Roomid int64 `protobuf:"varint,1,opt,name=roomid" json:"roomid,omitempty"`
}

func (m *IsLivingReq) Reset()                    { *m = IsLivingReq{} }
func (m *IsLivingReq) String() string            { return proto.CompactTextString(m) }
func (*IsLivingReq) ProtoMessage()               {}
func (*IsLivingReq) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *IsLivingReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type IsLivingResp struct {
	Isliving bool `protobuf:"varint,1,opt,name=isliving" json:"isliving,omitempty"`
}

func (m *IsLivingResp) Reset()                    { *m = IsLivingResp{} }
func (m *IsLivingResp) String() string            { return proto.CompactTextString(m) }
func (*IsLivingResp) ProtoMessage()               {}
func (*IsLivingResp) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *IsLivingResp) GetIsliving() bool {
	if m != nil {
		return m.Isliving
	}
	return false
}

func init() {
	proto.RegisterType((*RoomInfo)(nil), "bilin.roominfocenter.RoomInfo")
	proto.RegisterType((*LivingRoomsInfoReq)(nil), "bilin.roominfocenter.LivingRoomsInfoReq")
	proto.RegisterType((*LivingRoomsInfoResp)(nil), "bilin.roominfocenter.LivingRoomsInfoResp")
	proto.RegisterType((*BatchLivingRoomsInfoByHostsReq)(nil), "bilin.roominfocenter.BatchLivingRoomsInfoByHostsReq")
	proto.RegisterType((*BatchLivingRoomsInfoByHostsResp)(nil), "bilin.roominfocenter.BatchLivingRoomsInfoByHostsResp")
	proto.RegisterType((*IsLivingReq)(nil), "bilin.roominfocenter.IsLivingReq")
	proto.RegisterType((*IsLivingResp)(nil), "bilin.roominfocenter.IsLivingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for RoomInfoServant service

type RoomInfoServantClient interface {
	//
	// 所有正在开播的直播间信息
	LivingRoomsInfo(ctx context.Context, in *LivingRoomsInfoReq, opts ...map[string]string) (*LivingRoomsInfoResp, error)
	//
	// 根据发送的主播信息，返回开播的房间信息
	BatchLivingRoomsInfoByHosts(ctx context.Context, in *BatchLivingRoomsInfoByHostsReq, opts ...map[string]string) (*BatchLivingRoomsInfoByHostsResp, error)
	//
	// 查询指定房间是否在开播
	IsLiving(ctx context.Context, in *IsLivingReq, opts ...map[string]string) (*IsLivingResp, error)
}

type roomInfoServantClient struct {
	s model.Servant
}

func NewRoomInfoServantClient(objname string, comm servant.ICommunicator) RoomInfoServantClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &roomInfoServantClient{s: comm.GetServantProxy(objname)}
}

func (c *roomInfoServantClient) LivingRoomsInfo(ctx context.Context, in *LivingRoomsInfoReq, opts ...map[string]string) (*LivingRoomsInfoResp, error) {
	var (
		reply LivingRoomsInfoResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "LivingRoomsInfo", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *roomInfoServantClient) BatchLivingRoomsInfoByHosts(ctx context.Context, in *BatchLivingRoomsInfoByHostsReq, opts ...map[string]string) (*BatchLivingRoomsInfoByHostsResp, error) {
	var (
		reply BatchLivingRoomsInfoByHostsResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "BatchLivingRoomsInfoByHosts", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *roomInfoServantClient) IsLiving(ctx context.Context, in *IsLivingReq, opts ...map[string]string) (*IsLivingResp, error) {
	var (
		reply IsLivingResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "IsLiving", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for RoomInfoServant service

type RoomInfoServantServer interface {
	//
	// 所有正在开播的直播间信息
	LivingRoomsInfo(context.Context, *LivingRoomsInfoReq) (*LivingRoomsInfoResp, error)
	//
	// 根据发送的主播信息，返回开播的房间信息
	BatchLivingRoomsInfoByHosts(context.Context, *BatchLivingRoomsInfoByHostsReq) (*BatchLivingRoomsInfoByHostsResp, error)
	//
	// 查询指定房间是否在开播
	IsLiving(context.Context, *IsLivingReq) (*IsLivingResp, error)
}

type roomInfoServantDispatcher struct {
}

func NewRoomInfoServantDispatcher() servant.Dispatcher {
	return &roomInfoServantDispatcher{}
}

func (_obj *roomInfoServantDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(RoomInfoServantServer)
	switch req.SFuncName {
	case "LivingRoomsInfo":
		var req_ LivingRoomsInfoReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.LivingRoomsInfo(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "BatchLivingRoomsInfoByHosts":
		var req_ BatchLivingRoomsInfoByHostsReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.BatchLivingRoomsInfoByHosts(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "IsLiving":
		var req_ IsLivingReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.IsLiving(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("roominfocenter.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x95, 0x93, 0x6c, 0xba, 0x99, 0x54, 0xb4, 0x1a, 0x22, 0x64, 0x2d, 0x28, 0x84, 0x95, 0x40,
	0x0b, 0x87, 0x1c, 0x42, 0x41, 0xa8, 0xc7, 0xa8, 0x20, 0x22, 0xf5, 0x82, 0xcb, 0x09, 0x21, 0xa4,
	0x4d, 0x70, 0x9a, 0x55, 0x13, 0x7b, 0xd7, 0x76, 0x82, 0xf6, 0x17, 0xf8, 0x00, 0x7e, 0x8c, 0x13,
	0xdf, 0xc0, 0x4f, 0x20, 0x7b, 0x13, 0x92, 0x2e, 0xab, 0xb6, 0xca, 0x85, 0x9b, 0xe7, 0xcd, 0xcc,
	0xf3, 0xf3, 0x1b, 0xdb, 0xd0, 0x51, 0x52, 0x2e, 0x12, 0x31, 0x95, 0x13, 0x2e, 0x0c, 0x57, 0xfd,
	0x54, 0x49, 0x23, 0xb1, 0x33, 0x4e, 0xe6, 0x89, 0xe8, 0x5f, 0xcf, 0x85, 0x3f, 0x6a, 0xe0, 0x33,
	0x29, 0x17, 0x23, 0x31, 0x95, 0xf8, 0x00, 0x9a, 0x2e, 0xfd, 0x95, 0x92, 0x1e, 0x89, 0x1a, 0x6c,
	0x1d, 0xe1, 0x23, 0x68, 0x69, 0x13, 0x2b, 0x63, 0x92, 0x05, 0xa7, 0x35, 0x97, 0xda, 0x02, 0xd8,
	0x05, 0x58, 0x6a, 0xae, 0xc4, 0x72, 0x31, 0xe6, 0x8a, 0xd6, 0x5d, 0x7a, 0x07, 0xc1, 0x67, 0x70,
	0xcf, 0xf2, 0x4c, 0x62, 0xc3, 0x2f, 0xa5, 0xca, 0x47, 0x67, 0xb4, 0xd1, 0x23, 0x91, 0xc7, 0x4a,
	0x28, 0x76, 0xc0, 0x93, 0xdf, 0x04, 0x57, 0xd4, 0x73, 0x14, 0x45, 0x60, 0x51, 0x93, 0x98, 0x39,
	0xa7, 0xcd, 0x1e, 0x89, 0x5a, 0xac, 0x08, 0xac, 0x22, 0xdb, 0xfd, 0x31, 0x4f, 0xf9, 0x80, 0x1e,
	0x38, 0xba, 0x2d, 0x80, 0x21, 0x1c, 0xba, 0xe6, 0xa1, 0x3d, 0xf1, 0xe8, 0x8c, 0xfa, 0x8e, 0xf0,
	0x1a, 0x66, 0x55, 0x9f, 0xcb, 0xc9, 0xd5, 0x85, 0x89, 0xcd, 0x52, 0xd3, 0x96, 0xa3, 0xd8, 0x41,
	0xc2, 0x0e, 0xe0, 0x79, 0xb2, 0x4a, 0xc4, 0xa5, 0x75, 0x47, 0x5b, 0x7b, 0x18, 0xcf, 0xc2, 0x9f,
	0x04, 0xee, 0xff, 0x03, 0xeb, 0x14, 0x3f, 0x43, 0x7b, 0xee, 0x60, 0x2b, 0x42, 0x53, 0xd2, 0xab,
	0x47, 0xed, 0xc1, 0x69, 0xbf, 0xca, 0xf2, 0x7e, 0x45, 0xff, 0x1a, 0x73, 0xcd, 0x6f, 0x85, 0x51,
	0x39, 0xdb, 0xa5, 0x0b, 0xbe, 0xc0, 0x71, 0xb9, 0x00, 0x8f, 0xa1, 0x7e, 0xc5, 0xf3, 0xf5, 0xa0,
	0xec, 0x12, 0x4f, 0xc0, 0x5b, 0xc5, 0xf3, 0x65, 0x31, 0xa1, 0xf6, 0xa0, 0x5b, 0xbd, 0xfb, 0x66,
	0xd8, 0xac, 0x28, 0x3e, 0xad, 0xbd, 0x21, 0xe1, 0x6b, 0xe8, 0x0e, 0x63, 0x33, 0x99, 0x95, 0x94,
	0x0d, 0xf3, 0xf7, 0x52, 0x1b, 0xcd, 0x78, 0x66, 0xa7, 0x30, 0xb3, 0x6b, 0x77, 0xb2, 0x06, 0x2b,
	0x82, 0xf0, 0x37, 0x81, 0xc7, 0x37, 0x36, 0xea, 0x14, 0x67, 0x55, 0xce, 0xbc, 0xab, 0xd6, 0x76,
	0x0b, 0xd7, 0x7f, 0x76, 0xe9, 0x29, 0xb4, 0x47, 0x7a, 0xad, 0x8e, 0x67, 0xa5, 0xc7, 0x52, 0xdf,
	0x3c, 0x96, 0xf0, 0x05, 0x1c, 0x6e, 0xcb, 0x74, 0x8a, 0x01, 0xf8, 0x89, 0x2e, 0x74, 0xba, 0x4a,
	0x9f, 0xfd, 0x8d, 0x07, 0xbf, 0x6a, 0x70, 0xb4, 0xd9, 0xea, 0x82, 0xab, 0x55, 0x2c, 0x0c, 0x4e,
	0xe1, 0xa8, 0x64, 0x01, 0x46, 0x77, 0xbc, 0x48, 0x59, 0xf0, 0xfc, 0xce, 0x57, 0x0e, 0xbf, 0x13,
	0x78, 0x78, 0x83, 0xe1, 0x78, 0xb2, 0xc7, 0x8c, 0xb2, 0xe0, 0xd5, 0x5e, 0x93, 0xc5, 0x0f, 0xe0,
	0x6f, 0x4c, 0xc3, 0x27, 0xd5, 0x14, 0x3b, 0xde, 0x07, 0xe1, 0x6d, 0x25, 0x3a, 0x1d, 0x1e, 0x7c,
	0xf2, 0x5c, 0xd1, 0xb8, 0xe9, 0xfe, 0xbf, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x93, 0x1a,
	0x46, 0xd7, 0x17, 0x05, 0x00, 0x00,
}
