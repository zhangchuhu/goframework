// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: chattagtars.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PageInfo struct {
	Pagenum  int64 `protobuf:"varint,1,opt,name=pagenum" json:"pagenum,omitempty"`
	Pagesize int64 `protobuf:"varint,2,opt,name=pagesize" json:"pagesize,omitempty"`
}

func (m *PageInfo) Reset()                    { *m = PageInfo{} }
func (m *PageInfo) String() string            { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()               {}
func (*PageInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PageInfo) GetPagenum() int64 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

func (m *PageInfo) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

type ChatTag struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TagName  string `protobuf:"bytes,2,opt,name=TagName" json:"TagName,omitempty"`
	TagColor string `protobuf:"bytes,3,opt,name=TagColor" json:"TagColor,omitempty"`
}

func (m *ChatTag) Reset()                    { *m = ChatTag{} }
func (m *ChatTag) String() string            { return proto.CompactTextString(m) }
func (*ChatTag) ProtoMessage()               {}
func (*ChatTag) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ChatTag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChatTag) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *ChatTag) GetTagColor() string {
	if m != nil {
		return m.TagColor
	}
	return ""
}

type CChatTagReq struct {
	Chattag *ChatTag `protobuf:"bytes,1,opt,name=chattag" json:"chattag,omitempty"`
}

func (m *CChatTagReq) Reset()                    { *m = CChatTagReq{} }
func (m *CChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*CChatTagReq) ProtoMessage()               {}
func (*CChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *CChatTagReq) GetChattag() *ChatTag {
	if m != nil {
		return m.Chattag
	}
	return nil
}

type CChatTagResp struct {
}

func (m *CChatTagResp) Reset()                    { *m = CChatTagResp{} }
func (m *CChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*CChatTagResp) ProtoMessage()               {}
func (*CChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type RChatTagReq struct {
}

func (m *RChatTagReq) Reset()                    { *m = RChatTagReq{} }
func (m *RChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*RChatTagReq) ProtoMessage()               {}
func (*RChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

type RChatTagResp struct {
	Chattag []*ChatTag `protobuf:"bytes,1,rep,name=chattag" json:"chattag,omitempty"`
}

func (m *RChatTagResp) Reset()                    { *m = RChatTagResp{} }
func (m *RChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*RChatTagResp) ProtoMessage()               {}
func (*RChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *RChatTagResp) GetChattag() []*ChatTag {
	if m != nil {
		return m.Chattag
	}
	return nil
}

type UChatTagReq struct {
	Chattag *ChatTag `protobuf:"bytes,1,opt,name=chattag" json:"chattag,omitempty"`
}

func (m *UChatTagReq) Reset()                    { *m = UChatTagReq{} }
func (m *UChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*UChatTagReq) ProtoMessage()               {}
func (*UChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *UChatTagReq) GetChattag() *ChatTag {
	if m != nil {
		return m.Chattag
	}
	return nil
}

type UChatTagResp struct {
}

func (m *UChatTagResp) Reset()                    { *m = UChatTagResp{} }
func (m *UChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*UChatTagResp) ProtoMessage()               {}
func (*UChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

type DChatTagReq struct {
	Chattag *ChatTag `protobuf:"bytes,1,opt,name=chattag" json:"chattag,omitempty"`
}

func (m *DChatTagReq) Reset()                    { *m = DChatTagReq{} }
func (m *DChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*DChatTagReq) ProtoMessage()               {}
func (*DChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *DChatTagReq) GetChattag() *ChatTag {
	if m != nil {
		return m.Chattag
	}
	return nil
}

type DChatTagResp struct {
}

func (m *DChatTagResp) Reset()                    { *m = DChatTagResp{} }
func (m *DChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*DChatTagResp) ProtoMessage()               {}
func (*DChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

// PUA聊妹套话CRUD
type PUATopic struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *PUATopic) Reset()                    { *m = PUATopic{} }
func (m *PUATopic) String() string            { return proto.CompactTextString(m) }
func (*PUATopic) ProtoMessage()               {}
func (*PUATopic) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *PUATopic) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PUATopic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type CPUATopicReq struct {
	Info *PUATopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *CPUATopicReq) Reset()                    { *m = CPUATopicReq{} }
func (m *CPUATopicReq) String() string            { return proto.CompactTextString(m) }
func (*CPUATopicReq) ProtoMessage()               {}
func (*CPUATopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *CPUATopicReq) GetInfo() *PUATopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type CPUATopicResp struct {
}

func (m *CPUATopicResp) Reset()                    { *m = CPUATopicResp{} }
func (m *CPUATopicResp) String() string            { return proto.CompactTextString(m) }
func (*CPUATopicResp) ProtoMessage()               {}
func (*CPUATopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

type RPUATopicReq struct {
	Page *PageInfo `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (m *RPUATopicReq) Reset()                    { *m = RPUATopicReq{} }
func (m *RPUATopicReq) String() string            { return proto.CompactTextString(m) }
func (*RPUATopicReq) ProtoMessage()               {}
func (*RPUATopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *RPUATopicReq) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type RPUATopicResp struct {
	Info         []*PUATopic `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	Totalpagenum int64       `protobuf:"varint,2,opt,name=totalpagenum" json:"totalpagenum,omitempty"`
}

func (m *RPUATopicResp) Reset()                    { *m = RPUATopicResp{} }
func (m *RPUATopicResp) String() string            { return proto.CompactTextString(m) }
func (*RPUATopicResp) ProtoMessage()               {}
func (*RPUATopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *RPUATopicResp) GetInfo() []*PUATopic {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RPUATopicResp) GetTotalpagenum() int64 {
	if m != nil {
		return m.Totalpagenum
	}
	return 0
}

type UPUATopicReq struct {
	Info *PUATopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *UPUATopicReq) Reset()                    { *m = UPUATopicReq{} }
func (m *UPUATopicReq) String() string            { return proto.CompactTextString(m) }
func (*UPUATopicReq) ProtoMessage()               {}
func (*UPUATopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *UPUATopicReq) GetInfo() *PUATopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type UPUATopicResp struct {
}

func (m *UPUATopicResp) Reset()                    { *m = UPUATopicResp{} }
func (m *UPUATopicResp) String() string            { return proto.CompactTextString(m) }
func (*UPUATopicResp) ProtoMessage()               {}
func (*UPUATopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

type DPUATopicReq struct {
	Info *PUATopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *DPUATopicReq) Reset()                    { *m = DPUATopicReq{} }
func (m *DPUATopicReq) String() string            { return proto.CompactTextString(m) }
func (*DPUATopicReq) ProtoMessage()               {}
func (*DPUATopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *DPUATopicReq) GetInfo() *PUATopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type DPUATopicResp struct {
}

func (m *DPUATopicResp) Reset()                    { *m = DPUATopicResp{} }
func (m *DPUATopicResp) String() string            { return proto.CompactTextString(m) }
func (*DPUATopicResp) ProtoMessage()               {}
func (*DPUATopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

// 真心话
type TruthTopic struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *TruthTopic) Reset()                    { *m = TruthTopic{} }
func (m *TruthTopic) String() string            { return proto.CompactTextString(m) }
func (*TruthTopic) ProtoMessage()               {}
func (*TruthTopic) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *TruthTopic) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TruthTopic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type CTruthTopicReq struct {
	Info *TruthTopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *CTruthTopicReq) Reset()                    { *m = CTruthTopicReq{} }
func (m *CTruthTopicReq) String() string            { return proto.CompactTextString(m) }
func (*CTruthTopicReq) ProtoMessage()               {}
func (*CTruthTopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *CTruthTopicReq) GetInfo() *TruthTopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type CTruthTopicResp struct {
}

func (m *CTruthTopicResp) Reset()                    { *m = CTruthTopicResp{} }
func (m *CTruthTopicResp) String() string            { return proto.CompactTextString(m) }
func (*CTruthTopicResp) ProtoMessage()               {}
func (*CTruthTopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

type RTruthTopicReq struct {
	Page *PageInfo `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (m *RTruthTopicReq) Reset()                    { *m = RTruthTopicReq{} }
func (m *RTruthTopicReq) String() string            { return proto.CompactTextString(m) }
func (*RTruthTopicReq) ProtoMessage()               {}
func (*RTruthTopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *RTruthTopicReq) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type RTruthTopicResp struct {
	Info         []*TruthTopic `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	Totalpagenum int64         `protobuf:"varint,2,opt,name=totalpagenum" json:"totalpagenum,omitempty"`
}

func (m *RTruthTopicResp) Reset()                    { *m = RTruthTopicResp{} }
func (m *RTruthTopicResp) String() string            { return proto.CompactTextString(m) }
func (*RTruthTopicResp) ProtoMessage()               {}
func (*RTruthTopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *RTruthTopicResp) GetInfo() []*TruthTopic {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RTruthTopicResp) GetTotalpagenum() int64 {
	if m != nil {
		return m.Totalpagenum
	}
	return 0
}

type UTruthTopicReq struct {
	Info *TruthTopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *UTruthTopicReq) Reset()                    { *m = UTruthTopicReq{} }
func (m *UTruthTopicReq) String() string            { return proto.CompactTextString(m) }
func (*UTruthTopicReq) ProtoMessage()               {}
func (*UTruthTopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *UTruthTopicReq) GetInfo() *TruthTopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type UTruthTopicResp struct {
}

func (m *UTruthTopicResp) Reset()                    { *m = UTruthTopicResp{} }
func (m *UTruthTopicResp) String() string            { return proto.CompactTextString(m) }
func (*UTruthTopicResp) ProtoMessage()               {}
func (*UTruthTopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

type DTruthTopicReq struct {
	Info *TruthTopic `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *DTruthTopicReq) Reset()                    { *m = DTruthTopicReq{} }
func (m *DTruthTopicReq) String() string            { return proto.CompactTextString(m) }
func (*DTruthTopicReq) ProtoMessage()               {}
func (*DTruthTopicReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{26} }

func (m *DTruthTopicReq) GetInfo() *TruthTopic {
	if m != nil {
		return m.Info
	}
	return nil
}

type DTruthTopicResp struct {
}

func (m *DTruthTopicResp) Reset()                    { *m = DTruthTopicResp{} }
func (m *DTruthTopicResp) String() string            { return proto.CompactTextString(m) }
func (*DTruthTopicResp) ProtoMessage()               {}
func (*DTruthTopicResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{27} }

// 用户聊天标签
type UserChatTag struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Fromuserid  int64  `protobuf:"varint,2,opt,name=fromuserid" json:"fromuserid,omitempty"`
	Touserid    int64  `protobuf:"varint,3,opt,name=touserid" json:"touserid,omitempty"`
	Chattags    string `protobuf:"bytes,4,opt,name=chattags" json:"chattags,omitempty"`
	Updatetimes int64  `protobuf:"varint,5,opt,name=updatetimes" json:"updatetimes,omitempty"`
	Talksecond  int64  `protobuf:"varint,6,opt,name=talksecond" json:"talksecond,omitempty"`
	Tagstatus   int64  `protobuf:"varint,7,opt,name=tagstatus" json:"tagstatus,omitempty"`
}

func (m *UserChatTag) Reset()                    { *m = UserChatTag{} }
func (m *UserChatTag) String() string            { return proto.CompactTextString(m) }
func (*UserChatTag) ProtoMessage()               {}
func (*UserChatTag) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{28} }

func (m *UserChatTag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserChatTag) GetFromuserid() int64 {
	if m != nil {
		return m.Fromuserid
	}
	return 0
}

func (m *UserChatTag) GetTouserid() int64 {
	if m != nil {
		return m.Touserid
	}
	return 0
}

func (m *UserChatTag) GetChattags() string {
	if m != nil {
		return m.Chattags
	}
	return ""
}

func (m *UserChatTag) GetUpdatetimes() int64 {
	if m != nil {
		return m.Updatetimes
	}
	return 0
}

func (m *UserChatTag) GetTalksecond() int64 {
	if m != nil {
		return m.Talksecond
	}
	return 0
}

func (m *UserChatTag) GetTagstatus() int64 {
	if m != nil {
		return m.Tagstatus
	}
	return 0
}

type CUserChatTagReq struct {
	Info *UserChatTag `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *CUserChatTagReq) Reset()                    { *m = CUserChatTagReq{} }
func (m *CUserChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*CUserChatTagReq) ProtoMessage()               {}
func (*CUserChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{29} }

func (m *CUserChatTagReq) GetInfo() *UserChatTag {
	if m != nil {
		return m.Info
	}
	return nil
}

type CUserChatTagResp struct {
}

func (m *CUserChatTagResp) Reset()                    { *m = CUserChatTagResp{} }
func (m *CUserChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*CUserChatTagResp) ProtoMessage()               {}
func (*CUserChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{30} }

type RUserChatTagReq struct {
	Info *UserChatTag `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *RUserChatTagReq) Reset()                    { *m = RUserChatTagReq{} }
func (m *RUserChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*RUserChatTagReq) ProtoMessage()               {}
func (*RUserChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{31} }

func (m *RUserChatTagReq) GetInfo() *UserChatTag {
	if m != nil {
		return m.Info
	}
	return nil
}

type RUserChatTagResp struct {
	Info []*UserChatTag `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *RUserChatTagResp) Reset()                    { *m = RUserChatTagResp{} }
func (m *RUserChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*RUserChatTagResp) ProtoMessage()               {}
func (*RUserChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{32} }

func (m *RUserChatTagResp) GetInfo() []*UserChatTag {
	if m != nil {
		return m.Info
	}
	return nil
}

type TopNUser struct {
	Touserid int64 `protobuf:"varint,1,opt,name=touserid" json:"touserid,omitempty"`
	Topn     int64 `protobuf:"varint,2,opt,name=topn" json:"topn,omitempty"`
}

func (m *TopNUser) Reset()                    { *m = TopNUser{} }
func (m *TopNUser) String() string            { return proto.CompactTextString(m) }
func (*TopNUser) ProtoMessage()               {}
func (*TopNUser) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{33} }

func (m *TopNUser) GetTouserid() int64 {
	if m != nil {
		return m.Touserid
	}
	return 0
}

func (m *TopNUser) GetTopn() int64 {
	if m != nil {
		return m.Topn
	}
	return 0
}

type RTopNUserChatTagSummaryReq struct {
	Topuser *TopNUser `protobuf:"bytes,1,opt,name=topuser" json:"topuser,omitempty"`
}

func (m *RTopNUserChatTagSummaryReq) Reset()                    { *m = RTopNUserChatTagSummaryReq{} }
func (m *RTopNUserChatTagSummaryReq) String() string            { return proto.CompactTextString(m) }
func (*RTopNUserChatTagSummaryReq) ProtoMessage()               {}
func (*RTopNUserChatTagSummaryReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{34} }

func (m *RTopNUserChatTagSummaryReq) GetTopuser() *TopNUser {
	if m != nil {
		return m.Topuser
	}
	return nil
}

type RTopNUserChatTagSummaryResp struct {
	Summary *UserChatTagSummaryS `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (m *RTopNUserChatTagSummaryResp) Reset()                    { *m = RTopNUserChatTagSummaryResp{} }
func (m *RTopNUserChatTagSummaryResp) String() string            { return proto.CompactTextString(m) }
func (*RTopNUserChatTagSummaryResp) ProtoMessage()               {}
func (*RTopNUserChatTagSummaryResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{35} }

func (m *RTopNUserChatTagSummaryResp) GetSummary() *UserChatTagSummaryS {
	if m != nil {
		return m.Summary
	}
	return nil
}

type BatchRTopNUserChatTagSummaryReq struct {
	Topnuser []*TopNUser `protobuf:"bytes,1,rep,name=topnuser" json:"topnuser,omitempty"`
}

func (m *BatchRTopNUserChatTagSummaryReq) Reset()         { *m = BatchRTopNUserChatTagSummaryReq{} }
func (m *BatchRTopNUserChatTagSummaryReq) String() string { return proto.CompactTextString(m) }
func (*BatchRTopNUserChatTagSummaryReq) ProtoMessage()    {}
func (*BatchRTopNUserChatTagSummaryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{36}
}

func (m *BatchRTopNUserChatTagSummaryReq) GetTopnuser() []*TopNUser {
	if m != nil {
		return m.Topnuser
	}
	return nil
}

type BatchRTopNUserChatTagSummaryResp struct {
	Summary map[int64]*UserChatTagSummaryS `protobuf:"bytes,1,rep,name=summary" json:"summary,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BatchRTopNUserChatTagSummaryResp) Reset()         { *m = BatchRTopNUserChatTagSummaryResp{} }
func (m *BatchRTopNUserChatTagSummaryResp) String() string { return proto.CompactTextString(m) }
func (*BatchRTopNUserChatTagSummaryResp) ProtoMessage()    {}
func (*BatchRTopNUserChatTagSummaryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{37}
}

func (m *BatchRTopNUserChatTagSummaryResp) GetSummary() map[int64]*UserChatTagSummaryS {
	if m != nil {
		return m.Summary
	}
	return nil
}

type UUserChatTagReq struct {
	Info *UserChatTag `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *UUserChatTagReq) Reset()                    { *m = UUserChatTagReq{} }
func (m *UUserChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*UUserChatTagReq) ProtoMessage()               {}
func (*UUserChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{38} }

func (m *UUserChatTagReq) GetInfo() *UserChatTag {
	if m != nil {
		return m.Info
	}
	return nil
}

type UUserChatTagResp struct {
}

func (m *UUserChatTagResp) Reset()                    { *m = UUserChatTagResp{} }
func (m *UUserChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*UUserChatTagResp) ProtoMessage()               {}
func (*UUserChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{39} }

type DUserChatTagReq struct {
	Info *UserChatTag `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *DUserChatTagReq) Reset()                    { *m = DUserChatTagReq{} }
func (m *DUserChatTagReq) String() string            { return proto.CompactTextString(m) }
func (*DUserChatTagReq) ProtoMessage()               {}
func (*DUserChatTagReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{40} }

func (m *DUserChatTagReq) GetInfo() *UserChatTag {
	if m != nil {
		return m.Info
	}
	return nil
}

type DUserChatTagResp struct {
}

func (m *DUserChatTagResp) Reset()                    { *m = DUserChatTagResp{} }
func (m *DUserChatTagResp) String() string            { return proto.CompactTextString(m) }
func (*DUserChatTagResp) ProtoMessage()               {}
func (*DUserChatTagResp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{41} }

func init() {
	proto.RegisterType((*PageInfo)(nil), "bilin.chattagtars.PageInfo")
	proto.RegisterType((*ChatTag)(nil), "bilin.chattagtars.ChatTag")
	proto.RegisterType((*CChatTagReq)(nil), "bilin.chattagtars.CChatTagReq")
	proto.RegisterType((*CChatTagResp)(nil), "bilin.chattagtars.CChatTagResp")
	proto.RegisterType((*RChatTagReq)(nil), "bilin.chattagtars.RChatTagReq")
	proto.RegisterType((*RChatTagResp)(nil), "bilin.chattagtars.RChatTagResp")
	proto.RegisterType((*UChatTagReq)(nil), "bilin.chattagtars.UChatTagReq")
	proto.RegisterType((*UChatTagResp)(nil), "bilin.chattagtars.UChatTagResp")
	proto.RegisterType((*DChatTagReq)(nil), "bilin.chattagtars.DChatTagReq")
	proto.RegisterType((*DChatTagResp)(nil), "bilin.chattagtars.DChatTagResp")
	proto.RegisterType((*PUATopic)(nil), "bilin.chattagtars.PUATopic")
	proto.RegisterType((*CPUATopicReq)(nil), "bilin.chattagtars.CPUATopicReq")
	proto.RegisterType((*CPUATopicResp)(nil), "bilin.chattagtars.CPUATopicResp")
	proto.RegisterType((*RPUATopicReq)(nil), "bilin.chattagtars.RPUATopicReq")
	proto.RegisterType((*RPUATopicResp)(nil), "bilin.chattagtars.RPUATopicResp")
	proto.RegisterType((*UPUATopicReq)(nil), "bilin.chattagtars.UPUATopicReq")
	proto.RegisterType((*UPUATopicResp)(nil), "bilin.chattagtars.UPUATopicResp")
	proto.RegisterType((*DPUATopicReq)(nil), "bilin.chattagtars.DPUATopicReq")
	proto.RegisterType((*DPUATopicResp)(nil), "bilin.chattagtars.DPUATopicResp")
	proto.RegisterType((*TruthTopic)(nil), "bilin.chattagtars.TruthTopic")
	proto.RegisterType((*CTruthTopicReq)(nil), "bilin.chattagtars.CTruthTopicReq")
	proto.RegisterType((*CTruthTopicResp)(nil), "bilin.chattagtars.CTruthTopicResp")
	proto.RegisterType((*RTruthTopicReq)(nil), "bilin.chattagtars.RTruthTopicReq")
	proto.RegisterType((*RTruthTopicResp)(nil), "bilin.chattagtars.RTruthTopicResp")
	proto.RegisterType((*UTruthTopicReq)(nil), "bilin.chattagtars.UTruthTopicReq")
	proto.RegisterType((*UTruthTopicResp)(nil), "bilin.chattagtars.UTruthTopicResp")
	proto.RegisterType((*DTruthTopicReq)(nil), "bilin.chattagtars.DTruthTopicReq")
	proto.RegisterType((*DTruthTopicResp)(nil), "bilin.chattagtars.DTruthTopicResp")
	proto.RegisterType((*UserChatTag)(nil), "bilin.chattagtars.UserChatTag")
	proto.RegisterType((*CUserChatTagReq)(nil), "bilin.chattagtars.CUserChatTagReq")
	proto.RegisterType((*CUserChatTagResp)(nil), "bilin.chattagtars.CUserChatTagResp")
	proto.RegisterType((*RUserChatTagReq)(nil), "bilin.chattagtars.RUserChatTagReq")
	proto.RegisterType((*RUserChatTagResp)(nil), "bilin.chattagtars.RUserChatTagResp")
	proto.RegisterType((*TopNUser)(nil), "bilin.chattagtars.TopNUser")
	proto.RegisterType((*RTopNUserChatTagSummaryReq)(nil), "bilin.chattagtars.RTopNUserChatTagSummaryReq")
	proto.RegisterType((*RTopNUserChatTagSummaryResp)(nil), "bilin.chattagtars.RTopNUserChatTagSummaryResp")
	proto.RegisterType((*BatchRTopNUserChatTagSummaryReq)(nil), "bilin.chattagtars.BatchRTopNUserChatTagSummaryReq")
	proto.RegisterType((*BatchRTopNUserChatTagSummaryResp)(nil), "bilin.chattagtars.BatchRTopNUserChatTagSummaryResp")
	proto.RegisterType((*UUserChatTagReq)(nil), "bilin.chattagtars.UUserChatTagReq")
	proto.RegisterType((*UUserChatTagResp)(nil), "bilin.chattagtars.UUserChatTagResp")
	proto.RegisterType((*DUserChatTagReq)(nil), "bilin.chattagtars.DUserChatTagReq")
	proto.RegisterType((*DUserChatTagResp)(nil), "bilin.chattagtars.DUserChatTagResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for ChatTagTars service

type ChatTagTarsClient interface {
	//
	// 聊天标签CRUD
	CChatTag(ctx context.Context, in *CChatTagReq, opts ...map[string]string) (*CChatTagResp, error)
	RChatTag(ctx context.Context, in *RChatTagReq, opts ...map[string]string) (*RChatTagResp, error)
	UChatTag(ctx context.Context, in *UChatTagReq, opts ...map[string]string) (*UChatTagResp, error)
	DChatTag(ctx context.Context, in *DChatTagReq, opts ...map[string]string) (*DChatTagResp, error)
	//
	// PUA聊妹套话CRUD
	CPUATopic(ctx context.Context, in *CPUATopicReq, opts ...map[string]string) (*CPUATopicResp, error)
	RPUATopic(ctx context.Context, in *RPUATopicReq, opts ...map[string]string) (*RPUATopicResp, error)
	UPUATopic(ctx context.Context, in *UPUATopicReq, opts ...map[string]string) (*UPUATopicResp, error)
	DPUATopic(ctx context.Context, in *DPUATopicReq, opts ...map[string]string) (*DPUATopicResp, error)
	//
	// 真心话CRUD
	CTruthTopic(ctx context.Context, in *CTruthTopicReq, opts ...map[string]string) (*CTruthTopicResp, error)
	RTruthTopic(ctx context.Context, in *RTruthTopicReq, opts ...map[string]string) (*RTruthTopicResp, error)
	UTruthTopic(ctx context.Context, in *UTruthTopicReq, opts ...map[string]string) (*UTruthTopicResp, error)
	DTruthTopic(ctx context.Context, in *DTruthTopicReq, opts ...map[string]string) (*DTruthTopicResp, error)
	//
	// 用户聊天标签CRUD
	CUserChatTag(ctx context.Context, in *CUserChatTagReq, opts ...map[string]string) (*CUserChatTagResp, error)
	RUserChatTag(ctx context.Context, in *RUserChatTagReq, opts ...map[string]string) (*RUserChatTagResp, error)
	// 根据标签个数排序的前N个标签信息
	RTopNUserChatTagSummary(ctx context.Context, in *RTopNUserChatTagSummaryReq, opts ...map[string]string) (*RTopNUserChatTagSummaryResp, error)
	BatchRTopNUserChatTagSummary(ctx context.Context, in *BatchRTopNUserChatTagSummaryReq, opts ...map[string]string) (*BatchRTopNUserChatTagSummaryResp, error)
	UUserChatTag(ctx context.Context, in *UUserChatTagReq, opts ...map[string]string) (*UUserChatTagResp, error)
	DUserChatTag(ctx context.Context, in *DUserChatTagReq, opts ...map[string]string) (*DUserChatTagResp, error)
}

type chatTagTarsClient struct {
	s model.Servant
}

func NewChatTagTarsClient(objname string, comm servant.ICommunicator) ChatTagTarsClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &chatTagTarsClient{s: comm.GetServantProxy(objname)}
}

func (c *chatTagTarsClient) CChatTag(ctx context.Context, in *CChatTagReq, opts ...map[string]string) (*CChatTagResp, error) {
	var (
		reply CChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "CChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) RChatTag(ctx context.Context, in *RChatTagReq, opts ...map[string]string) (*RChatTagResp, error) {
	var (
		reply RChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "RChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) UChatTag(ctx context.Context, in *UChatTagReq, opts ...map[string]string) (*UChatTagResp, error) {
	var (
		reply UChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "UChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) DChatTag(ctx context.Context, in *DChatTagReq, opts ...map[string]string) (*DChatTagResp, error) {
	var (
		reply DChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "DChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) CPUATopic(ctx context.Context, in *CPUATopicReq, opts ...map[string]string) (*CPUATopicResp, error) {
	var (
		reply CPUATopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "CPUATopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) RPUATopic(ctx context.Context, in *RPUATopicReq, opts ...map[string]string) (*RPUATopicResp, error) {
	var (
		reply RPUATopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "RPUATopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) UPUATopic(ctx context.Context, in *UPUATopicReq, opts ...map[string]string) (*UPUATopicResp, error) {
	var (
		reply UPUATopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "UPUATopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) DPUATopic(ctx context.Context, in *DPUATopicReq, opts ...map[string]string) (*DPUATopicResp, error) {
	var (
		reply DPUATopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "DPUATopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) CTruthTopic(ctx context.Context, in *CTruthTopicReq, opts ...map[string]string) (*CTruthTopicResp, error) {
	var (
		reply CTruthTopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "CTruthTopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) RTruthTopic(ctx context.Context, in *RTruthTopicReq, opts ...map[string]string) (*RTruthTopicResp, error) {
	var (
		reply RTruthTopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "RTruthTopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) UTruthTopic(ctx context.Context, in *UTruthTopicReq, opts ...map[string]string) (*UTruthTopicResp, error) {
	var (
		reply UTruthTopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "UTruthTopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) DTruthTopic(ctx context.Context, in *DTruthTopicReq, opts ...map[string]string) (*DTruthTopicResp, error) {
	var (
		reply DTruthTopicResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "DTruthTopic", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) CUserChatTag(ctx context.Context, in *CUserChatTagReq, opts ...map[string]string) (*CUserChatTagResp, error) {
	var (
		reply CUserChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "CUserChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) RUserChatTag(ctx context.Context, in *RUserChatTagReq, opts ...map[string]string) (*RUserChatTagResp, error) {
	var (
		reply RUserChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "RUserChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) RTopNUserChatTagSummary(ctx context.Context, in *RTopNUserChatTagSummaryReq, opts ...map[string]string) (*RTopNUserChatTagSummaryResp, error) {
	var (
		reply RTopNUserChatTagSummaryResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "RTopNUserChatTagSummary", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) BatchRTopNUserChatTagSummary(ctx context.Context, in *BatchRTopNUserChatTagSummaryReq, opts ...map[string]string) (*BatchRTopNUserChatTagSummaryResp, error) {
	var (
		reply BatchRTopNUserChatTagSummaryResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "BatchRTopNUserChatTagSummary", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) UUserChatTag(ctx context.Context, in *UUserChatTagReq, opts ...map[string]string) (*UUserChatTagResp, error) {
	var (
		reply UUserChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "UUserChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *chatTagTarsClient) DUserChatTag(ctx context.Context, in *DUserChatTagReq, opts ...map[string]string) (*DUserChatTagResp, error) {
	var (
		reply DUserChatTagResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "DUserChatTag", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for ChatTagTars service

type ChatTagTarsServer interface {
	//
	// 聊天标签CRUD
	CChatTag(context.Context, *CChatTagReq) (*CChatTagResp, error)
	RChatTag(context.Context, *RChatTagReq) (*RChatTagResp, error)
	UChatTag(context.Context, *UChatTagReq) (*UChatTagResp, error)
	DChatTag(context.Context, *DChatTagReq) (*DChatTagResp, error)
	//
	// PUA聊妹套话CRUD
	CPUATopic(context.Context, *CPUATopicReq) (*CPUATopicResp, error)
	RPUATopic(context.Context, *RPUATopicReq) (*RPUATopicResp, error)
	UPUATopic(context.Context, *UPUATopicReq) (*UPUATopicResp, error)
	DPUATopic(context.Context, *DPUATopicReq) (*DPUATopicResp, error)
	//
	// 真心话CRUD
	CTruthTopic(context.Context, *CTruthTopicReq) (*CTruthTopicResp, error)
	RTruthTopic(context.Context, *RTruthTopicReq) (*RTruthTopicResp, error)
	UTruthTopic(context.Context, *UTruthTopicReq) (*UTruthTopicResp, error)
	DTruthTopic(context.Context, *DTruthTopicReq) (*DTruthTopicResp, error)
	//
	// 用户聊天标签CRUD
	CUserChatTag(context.Context, *CUserChatTagReq) (*CUserChatTagResp, error)
	RUserChatTag(context.Context, *RUserChatTagReq) (*RUserChatTagResp, error)
	// 根据标签个数排序的前N个标签信息
	RTopNUserChatTagSummary(context.Context, *RTopNUserChatTagSummaryReq) (*RTopNUserChatTagSummaryResp, error)
	BatchRTopNUserChatTagSummary(context.Context, *BatchRTopNUserChatTagSummaryReq) (*BatchRTopNUserChatTagSummaryResp, error)
	UUserChatTag(context.Context, *UUserChatTagReq) (*UUserChatTagResp, error)
	DUserChatTag(context.Context, *DUserChatTagReq) (*DUserChatTagResp, error)
}

type chatTagTarsDispatcher struct {
}

func NewChatTagTarsDispatcher() servant.Dispatcher {
	return &chatTagTarsDispatcher{}
}

func (_obj *chatTagTarsDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(ChatTagTarsServer)
	switch req.SFuncName {
	case "CChatTag":
		var req_ CChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.CChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "RChatTag":
		var req_ RChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.RChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "UChatTag":
		var req_ UChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.UChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "DChatTag":
		var req_ DChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.DChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "CPUATopic":
		var req_ CPUATopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.CPUATopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "RPUATopic":
		var req_ RPUATopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.RPUATopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "UPUATopic":
		var req_ UPUATopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.UPUATopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "DPUATopic":
		var req_ DPUATopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.DPUATopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "CTruthTopic":
		var req_ CTruthTopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.CTruthTopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "RTruthTopic":
		var req_ RTruthTopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.RTruthTopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "UTruthTopic":
		var req_ UTruthTopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.UTruthTopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "DTruthTopic":
		var req_ DTruthTopicReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.DTruthTopic(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "CUserChatTag":
		var req_ CUserChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.CUserChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "RUserChatTag":
		var req_ RUserChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.RUserChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "RTopNUserChatTagSummary":
		var req_ RTopNUserChatTagSummaryReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.RTopNUserChatTagSummary(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "BatchRTopNUserChatTagSummary":
		var req_ BatchRTopNUserChatTagSummaryReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.BatchRTopNUserChatTagSummary(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "UUserChatTag":
		var req_ UUserChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.UUserChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "DUserChatTag":
		var req_ DUserChatTagReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.DUserChatTag(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("chattagtars.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 941 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe1, 0x28, 0xa9, 0x9d, 0x93, 0xe3, 0x24, 0xc4, 0x80, 0x19, 0x6a, 0xd7, 0x66, 0xdc,
	0xcb, 0x5e, 0xe6, 0x75, 0xee, 0x86, 0x0d, 0x7d, 0x59, 0x5b, 0xb1, 0x03, 0x86, 0x01, 0x59, 0xc1,
	0x98, 0x1b, 0x90, 0x37, 0x36, 0x56, 0x6c, 0xa1, 0xb6, 0xc5, 0x8a, 0xf4, 0xb0, 0xec, 0x0b, 0xec,
	0x73, 0xed, 0x43, 0x6c, 0x9f, 0x67, 0xa0, 0x28, 0xd9, 0x94, 0xac, 0x88, 0x76, 0xeb, 0x37, 0x51,
	0x77, 0xf7, 0xd3, 0x9f, 0x77, 0x34, 0xef, 0x60, 0x38, 0xbf, 0x99, 0x72, 0xa5, 0xf8, 0x44, 0xf1,
	0x54, 0x0e, 0x44, 0x9a, 0xa8, 0x04, 0x9d, 0xbf, 0x8d, 0x67, 0xf1, 0x62, 0x60, 0x19, 0x02, 0x10,
	0x4b, 0x39, 0x35, 0x66, 0xfc, 0x02, 0x3a, 0x6f, 0xf8, 0x24, 0xfa, 0x79, 0x71, 0x9b, 0xa0, 0x3e,
	0xb4, 0x05, 0x9f, 0x44, 0x8b, 0xe5, 0xbc, 0xdf, 0xba, 0x68, 0x7d, 0xe9, 0xd1, 0x62, 0x89, 0x02,
	0xe8, 0xe8, 0x47, 0x19, 0xff, 0x15, 0xf5, 0x0f, 0x32, 0xd3, 0x6a, 0x8d, 0x7f, 0x85, 0x76, 0x38,
	0xe5, 0x6a, 0xc4, 0x27, 0xa8, 0x07, 0x07, 0xf1, 0x38, 0x8f, 0x3d, 0x88, 0xc7, 0x1a, 0x38, 0xe2,
	0x93, 0x4b, 0x3e, 0x37, 0x51, 0xc7, 0xb4, 0x58, 0x6a, 0xe0, 0x88, 0x4f, 0xc2, 0x64, 0x96, 0xa4,
	0x7d, 0x2f, 0x33, 0xad, 0xd6, 0x38, 0x04, 0x3f, 0xcc, 0x89, 0x34, 0x7a, 0x8f, 0xbe, 0x85, 0x76,
	0x2e, 0x3e, 0x23, 0xfb, 0xc3, 0x60, 0xb0, 0xb1, 0xa5, 0x41, 0xe1, 0x5f, 0xb8, 0xe2, 0x1e, 0x74,
	0xd7, 0x10, 0x29, 0xf0, 0x09, 0xf8, 0x74, 0x0d, 0xc5, 0x04, 0xba, 0xd4, 0x32, 0x97, 0x3f, 0xe2,
	0x6d, 0xfb, 0x91, 0x10, 0x7c, 0xb6, 0x0f, 0xa5, 0xcc, 0x56, 0x1a, 0x82, 0x4f, 0xf6, 0x01, 0x25,
	0x36, 0xf4, 0x29, 0x74, 0xde, 0xb0, 0x97, 0xa3, 0x44, 0xc4, 0x37, 0x1b, 0x55, 0xfa, 0x04, 0x8e,
	0x94, 0x36, 0xe4, 0x35, 0x32, 0x0b, 0xfc, 0x23, 0x74, 0xc3, 0x22, 0x44, 0xeb, 0xf8, 0x1a, 0x0e,
	0xe3, 0xc5, 0x6d, 0x92, 0x8b, 0x78, 0x58, 0x23, 0x62, 0xe5, 0x9d, 0x39, 0xe2, 0x53, 0x38, 0xb1,
	0x00, 0x52, 0x68, 0x22, 0xad, 0x10, 0xf5, 0x21, 0x6a, 0x22, 0xe6, 0x27, 0x93, 0x66, 0x8e, 0x78,
	0x0c, 0x27, 0xd4, 0x26, 0x5a, 0x9a, 0xbc, 0xad, 0x34, 0x21, 0x0c, 0x5d, 0x95, 0x28, 0x3e, 0x2b,
	0x8e, 0xb9, 0x39, 0xcb, 0xa5, 0x77, 0x5a, 0x26, 0xfb, 0xd8, 0x8d, 0xb3, 0xea, 0xc6, 0xc9, 0xc7,
	0x12, 0x49, 0x89, 0x38, 0x04, 0x18, 0xa5, 0x4b, 0x35, 0xdd, 0xa5, 0xa0, 0x21, 0xf4, 0xc2, 0x75,
	0x90, 0xd6, 0xf1, 0x4d, 0x49, 0xc7, 0x67, 0x35, 0x3a, 0x2c, 0x7f, 0xa3, 0xe4, 0x1c, 0x4e, 0x4b,
	0x10, 0x29, 0xf0, 0x4b, 0xe8, 0xd1, 0x32, 0x77, 0xe7, 0xc2, 0x4e, 0xe1, 0x94, 0x96, 0xa9, 0x96,
	0x36, 0x6f, 0x4b, 0x6d, 0x5b, 0x15, 0x37, 0x84, 0x1e, 0xdb, 0x47, 0x12, 0x58, 0x25, 0x09, 0x21,
	0xf4, 0xc8, 0x3e, 0xb8, 0xa4, 0xc2, 0xfd, 0xb7, 0x05, 0x3e, 0x93, 0x51, 0x7a, 0xdf, 0x0d, 0xfb,
	0x18, 0xe0, 0x36, 0x4d, 0xe6, 0x4b, 0x19, 0xa5, 0xf1, 0x38, 0xdf, 0xb1, 0xf5, 0x46, 0xdf, 0xb3,
	0x2a, 0xc9, 0xad, 0x9e, 0xb9, 0xb8, 0x8b, 0xb5, 0xb6, 0xe5, 0x72, 0x64, 0xff, 0xd0, 0xdc, 0xc1,
	0xc5, 0x1a, 0x5d, 0x80, 0xbf, 0x14, 0x63, 0xae, 0x22, 0x15, 0xcf, 0x23, 0xd9, 0x3f, 0xca, 0x42,
	0xed, 0x57, 0xfa, 0xcb, 0x8a, 0xcf, 0xde, 0xc9, 0xe8, 0x26, 0x59, 0x8c, 0xfb, 0x0f, 0xcc, 0x97,
	0xd7, 0x6f, 0xd0, 0x23, 0x38, 0xd6, 0x24, 0xc5, 0xd5, 0x52, 0xf6, 0xdb, 0x99, 0x79, 0xfd, 0x02,
	0xbf, 0x86, 0xd3, 0xd0, 0xda, 0x97, 0x4e, 0xd8, 0xb0, 0x94, 0xb0, 0xc7, 0x35, 0x09, 0xb3, 0x03,
	0x4c, 0xc6, 0x10, 0x9c, 0x95, 0x31, 0x52, 0x68, 0x34, 0xdd, 0x03, 0xfa, 0x27, 0x38, 0xa3, 0x15,
	0xb4, 0xc5, 0xf1, 0xb6, 0xe6, 0x3c, 0x87, 0xce, 0x28, 0x11, 0x97, 0xda, 0x50, 0xaa, 0x46, 0xab,
	0x52, 0x0d, 0x04, 0x87, 0x2a, 0x11, 0x8b, 0xbc, 0x86, 0xd9, 0x33, 0xbe, 0x82, 0x80, 0x16, 0xc1,
	0x39, 0xf5, 0x6a, 0x39, 0x9f, 0xf3, 0xf4, 0x4e, 0xef, 0xea, 0x3b, 0x68, 0xab, 0x44, 0xe8, 0xf0,
	0x86, 0x5f, 0x5a, 0x11, 0x4e, 0x0b, 0x5f, 0x7c, 0x05, 0x0f, 0xef, 0x85, 0x9a, 0x4e, 0x28, 0xcd,
	0xb2, 0xd2, 0x6f, 0x36, 0xfd, 0xaf, 0x68, 0xe1, 0x8a, 0xaf, 0xe1, 0xc9, 0x2b, 0xae, 0x6e, 0xa6,
	0x0d, 0x72, 0xbf, 0xd7, 0x9b, 0x17, 0x8b, 0x5c, 0xaf, 0xe7, 0xd2, 0xbb, 0x72, 0xc6, 0xff, 0xb5,
	0xe0, 0xa2, 0x19, 0x2e, 0x05, 0xba, 0xb6, 0x65, 0x6b, 0xf8, 0x8b, 0x1a, 0xb8, 0x8b, 0x32, 0xc8,
	0x9f, 0x5f, 0x2f, 0x54, 0x7a, 0xb7, 0xda, 0x5c, 0xf0, 0x1b, 0x74, 0x6d, 0x03, 0x3a, 0x03, 0xef,
	0x5d, 0x74, 0x97, 0x57, 0x50, 0x3f, 0xa2, 0xa7, 0x70, 0xf4, 0x07, 0x9f, 0x2d, 0xcd, 0x98, 0xd3,
	0x9c, 0x32, 0xe3, 0xf8, 0xfc, 0xe0, 0x87, 0x96, 0x3e, 0xa9, 0x6c, 0x3f, 0x3f, 0x02, 0x56, 0xf3,
	0x23, 0x20, 0xfb, 0x41, 0x93, 0x0a, 0x7a, 0xf8, 0x4f, 0x17, 0xfc, 0x7c, 0x3d, 0xe2, 0xa9, 0x44,
	0xbf, 0x40, 0xa7, 0x98, 0xb4, 0x50, 0x1d, 0xd5, 0x9a, 0xe5, 0x82, 0x27, 0x8d, 0x76, 0x29, 0x34,
	0x8c, 0x36, 0xc1, 0xa8, 0x03, 0x46, 0x2b, 0x30, 0xd6, 0x04, 0x63, 0x0e, 0x18, 0xab, 0xc0, 0x48,
	0x13, 0x8c, 0x38, 0x60, 0xf6, 0x38, 0x86, 0x2e, 0xe1, 0x78, 0x35, 0x1b, 0xa1, 0xda, 0xa4, 0x58,
	0xf3, 0x42, 0x70, 0xd1, 0xec, 0x60, 0x78, 0xb4, 0x91, 0x47, 0x5d, 0x3c, 0x5a, 0xe5, 0xb1, 0x46,
	0x1e, 0x73, 0xf1, 0x58, 0x95, 0x47, 0x1a, 0x79, 0xc4, 0xc5, 0x2b, 0xcd, 0x3f, 0x68, 0x04, 0xbe,
	0x35, 0x86, 0xa0, 0xcf, 0xeb, 0x12, 0x54, 0x6a, 0xc7, 0x01, 0x76, 0xb9, 0x18, 0x2a, 0x75, 0x50,
	0xa9, 0x9b, 0x4a, 0x37, 0xa9, 0xcc, 0x41, 0x65, 0x6e, 0x2a, 0xdb, 0xa4, 0x12, 0x07, 0x95, 0xb8,
	0xa9, 0x95, 0x71, 0x03, 0xfd, 0x0e, 0x5d, 0xbb, 0x9f, 0xa2, 0xda, 0xac, 0x95, 0xef, 0x95, 0xe0,
	0x0b, 0xa7, 0x8f, 0x01, 0x53, 0x17, 0x98, 0x6e, 0x01, 0xde, 0x68, 0xc9, 0x7f, 0xc2, 0xa7, 0xf7,
	0x5c, 0xe8, 0xe8, 0xab, 0xda, 0xe2, 0xdc, 0xd7, 0x9f, 0x82, 0xc1, 0x2e, 0xee, 0x52, 0xa0, 0xbf,
	0x5b, 0xf0, 0xa8, 0xa9, 0xa1, 0xa0, 0xe1, 0xce, 0x1d, 0xe8, 0x7d, 0xf0, 0xec, 0x03, 0xba, 0x96,
	0x4e, 0x2e, 0x73, 0x25, 0x97, 0x6d, 0x91, 0x5c, 0x56, 0x53, 0x35, 0xe2, 0x02, 0x93, 0x2d, 0xc0,
	0xd5, 0x1e, 0xf2, 0xaa, 0x7d, 0x7d, 0x94, 0x79, 0xbd, 0x7d, 0x90, 0xfd, 0x0b, 0xf1, 0xec, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x95, 0xe2, 0x06, 0xb9, 0x10, 0x00, 0x00,
}
