// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: ccserver.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 请求随机电话同时在线数
type GetRandomCallNumberClientReq struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GetRandomCallNumberClientReq) Reset()                    { *m = GetRandomCallNumberClientReq{} }
func (m *GetRandomCallNumberClientReq) String() string            { return proto.CompactTextString(m) }
func (*GetRandomCallNumberClientReq) ProtoMessage()               {}
func (*GetRandomCallNumberClientReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *GetRandomCallNumberClientReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetRandomCallNumberClientResp struct {
	Cret           *CommonRetInfo `protobuf:"bytes,1,opt,name=cret" json:"cret,omitempty"`
	NumberOfClient int64          `protobuf:"varint,2,opt,name=numberOfClient" json:"numberOfClient,omitempty"`
}

func (m *GetRandomCallNumberClientResp) Reset()                    { *m = GetRandomCallNumberClientResp{} }
func (m *GetRandomCallNumberClientResp) String() string            { return proto.CompactTextString(m) }
func (*GetRandomCallNumberClientResp) ProtoMessage()               {}
func (*GetRandomCallNumberClientResp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *GetRandomCallNumberClientResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

func (m *GetRandomCallNumberClientResp) GetNumberOfClient() int64 {
	if m != nil {
		return m.NumberOfClient
	}
	return 0
}

// 生成唯一房间号
type GenerateRoomReq struct {
}

func (m *GenerateRoomReq) Reset()                    { *m = GenerateRoomReq{} }
func (m *GenerateRoomReq) String() string            { return proto.CompactTextString(m) }
func (*GenerateRoomReq) ProtoMessage()               {}
func (*GenerateRoomReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type GenerateRoomResp struct {
	Cret   *CommonRetInfo `protobuf:"bytes,1,opt,name=cret" json:"cret,omitempty"`
	RoomID int64          `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *GenerateRoomResp) Reset()                    { *m = GenerateRoomResp{} }
func (m *GenerateRoomResp) String() string            { return proto.CompactTextString(m) }
func (*GenerateRoomResp) ProtoMessage()               {}
func (*GenerateRoomResp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *GenerateRoomResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

func (m *GenerateRoomResp) GetRoomID() int64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

// 客户端发送点对点消息
// 对应的通知类型(MaxType)为602(@see push.proto)
type SendMessageToUserReq struct {
	Header   *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ToUserID []int64 `protobuf:"varint,2,rep,packed,name=toUserID" json:"toUserID,omitempty"`
	Data     []byte  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendMessageToUserReq) Reset()                    { *m = SendMessageToUserReq{} }
func (m *SendMessageToUserReq) String() string            { return proto.CompactTextString(m) }
func (*SendMessageToUserReq) ProtoMessage()               {}
func (*SendMessageToUserReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SendMessageToUserReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SendMessageToUserReq) GetToUserID() []int64 {
	if m != nil {
		return m.ToUserID
	}
	return nil
}

func (m *SendMessageToUserReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SendMessageToUserResp struct {
	Cret *CommonRetInfo `protobuf:"bytes,1,opt,name=cret" json:"cret,omitempty"`
}

func (m *SendMessageToUserResp) Reset()                    { *m = SendMessageToUserResp{} }
func (m *SendMessageToUserResp) String() string            { return proto.CompactTextString(m) }
func (*SendMessageToUserResp) ProtoMessage()               {}
func (*SendMessageToUserResp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *SendMessageToUserResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 查询客户端在哪个房间
type GetUserCurrentRoomReq struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GetUserCurrentRoomReq) Reset()                    { *m = GetUserCurrentRoomReq{} }
func (m *GetUserCurrentRoomReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserCurrentRoomReq) ProtoMessage()               {}
func (*GetUserCurrentRoomReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *GetUserCurrentRoomReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetUserCurrentRoomResp struct {
	Cret   *CommonRetInfo `protobuf:"bytes,1,opt,name=cret" json:"cret,omitempty"`
	RoomID int64          `protobuf:"varint,2,opt,name=roomID" json:"roomID,omitempty"`
}

func (m *GetUserCurrentRoomResp) Reset()                    { *m = GetUserCurrentRoomResp{} }
func (m *GetUserCurrentRoomResp) String() string            { return proto.CompactTextString(m) }
func (*GetUserCurrentRoomResp) ProtoMessage()               {}
func (*GetUserCurrentRoomResp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *GetUserCurrentRoomResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

func (m *GetUserCurrentRoomResp) GetRoomID() int64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRandomCallNumberClientReq)(nil), "bilin.ccserver.GetRandomCallNumberClientReq")
	proto.RegisterType((*GetRandomCallNumberClientResp)(nil), "bilin.ccserver.GetRandomCallNumberClientResp")
	proto.RegisterType((*GenerateRoomReq)(nil), "bilin.ccserver.GenerateRoomReq")
	proto.RegisterType((*GenerateRoomResp)(nil), "bilin.ccserver.GenerateRoomResp")
	proto.RegisterType((*SendMessageToUserReq)(nil), "bilin.ccserver.SendMessageToUserReq")
	proto.RegisterType((*SendMessageToUserResp)(nil), "bilin.ccserver.SendMessageToUserResp")
	proto.RegisterType((*GetUserCurrentRoomReq)(nil), "bilin.ccserver.GetUserCurrentRoomReq")
	proto.RegisterType((*GetUserCurrentRoomResp)(nil), "bilin.ccserver.GetUserCurrentRoomResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for CCServant service

type CCServantClient interface {
	// 客户端首页拉取 called by app
	GetRandomCallNumberClient(ctx context.Context, in *GetRandomCallNumberClientReq, opts ...map[string]string) (*GetRandomCallNumberClientResp, error)
	// 生成唯一房间号（每次通话都使用一个由服务器生成的临时房间号）called by matchserver
	GenerateRoom(ctx context.Context, in *GenerateRoomReq, opts ...map[string]string) (*GenerateRoomResp, error)
	// 客户端发送点对点消息 uid1 -> uid2（服务端确保uid1和uid2必须在同一个房间内，才发送成功）called by app
	SendMessageToUser(ctx context.Context, in *SendMessageToUserReq, opts ...map[string]string) (*SendMessageToUserResp, error)
	// 查询客户端在哪个房间 called by java
	GetUserCurrentRoom(ctx context.Context, in *GetUserCurrentRoomReq, opts ...map[string]string) (*GetUserCurrentRoomResp, error)
}

type cCServantClient struct {
	s model.Servant
}

func NewCCServantClient(objname string, comm servant.ICommunicator) CCServantClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &cCServantClient{s: comm.GetServantProxy(objname)}
}

func (c *cCServantClient) GetRandomCallNumberClient(ctx context.Context, in *GetRandomCallNumberClientReq, opts ...map[string]string) (*GetRandomCallNumberClientResp, error) {
	var (
		reply GetRandomCallNumberClientResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GetRandomCallNumberClient", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *cCServantClient) GenerateRoom(ctx context.Context, in *GenerateRoomReq, opts ...map[string]string) (*GenerateRoomResp, error) {
	var (
		reply GenerateRoomResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GenerateRoom", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *cCServantClient) SendMessageToUser(ctx context.Context, in *SendMessageToUserReq, opts ...map[string]string) (*SendMessageToUserResp, error) {
	var (
		reply SendMessageToUserResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "SendMessageToUser", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *cCServantClient) GetUserCurrentRoom(ctx context.Context, in *GetUserCurrentRoomReq, opts ...map[string]string) (*GetUserCurrentRoomResp, error) {
	var (
		reply GetUserCurrentRoomResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GetUserCurrentRoom", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for CCServant service

type CCServantServer interface {
	// 客户端首页拉取 called by app
	GetRandomCallNumberClient(context.Context, *GetRandomCallNumberClientReq) (*GetRandomCallNumberClientResp, error)
	// 生成唯一房间号（每次通话都使用一个由服务器生成的临时房间号）called by matchserver
	GenerateRoom(context.Context, *GenerateRoomReq) (*GenerateRoomResp, error)
	// 客户端发送点对点消息 uid1 -> uid2（服务端确保uid1和uid2必须在同一个房间内，才发送成功）called by app
	SendMessageToUser(context.Context, *SendMessageToUserReq) (*SendMessageToUserResp, error)
	// 查询客户端在哪个房间 called by java
	GetUserCurrentRoom(context.Context, *GetUserCurrentRoomReq) (*GetUserCurrentRoomResp, error)
}

type cCServantDispatcher struct {
}

func NewCCServantDispatcher() servant.Dispatcher {
	return &cCServantDispatcher{}
}

func (_obj *cCServantDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(CCServantServer)
	switch req.SFuncName {
	case "GetRandomCallNumberClient":
		var req_ GetRandomCallNumberClientReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GetRandomCallNumberClient(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "GenerateRoom":
		var req_ GenerateRoomReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GenerateRoom(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "SendMessageToUser":
		var req_ SendMessageToUserReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.SendMessageToUser(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "GetUserCurrentRoom":
		var req_ GetUserCurrentRoomReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GetUserCurrentRoom(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("ccserver.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x4d, 0xed, 0x13, 0xf5, 0x8a, 0xe8, 0xbb, 0x79, 0xef, 0x05, 0x1b, 0x8d, 0x4d, 0x23, 0xa4,
	0x0b, 0xed, 0x02, 0xf7, 0x26, 0x5a, 0x0d, 0xb2, 0x50, 0xe3, 0x80, 0x1b, 0x56, 0x0e, 0xed, 0x45,
	0x49, 0xda, 0x99, 0x32, 0x33, 0x10, 0xff, 0xc6, 0x5f, 0x35, 0x4c, 0x8b, 0x11, 0x5a, 0x49, 0x49,
	0xdc, 0x75, 0xce, 0x9c, 0x73, 0x6e, 0xe6, 0x9e, 0x93, 0x42, 0x2f, 0x49, 0x34, 0xa9, 0x2d, 0xa9,
	0xa8, 0x50, 0xd2, 0x48, 0xec, 0x2d, 0x56, 0xd9, 0x4a, 0x44, 0x7b, 0xd4, 0xeb, 0xfe, 0x20, 0x9e,
	0xee, 0x6f, 0x83, 0xf7, 0xf0, 0x64, 0x4c, 0x86, 0x71, 0x91, 0xca, 0x3c, 0xe6, 0x59, 0xf6, 0x69,
	0x93, 0x2f, 0x48, 0xc5, 0xd9, 0x8a, 0x84, 0x61, 0xb4, 0xc6, 0x01, 0x74, 0x4a, 0x7e, 0xdf, 0xf1,
	0x9d, 0xf0, 0xfe, 0xe8, 0x41, 0x54, 0xda, 0x7d, 0xb0, 0x20, 0xab, 0x2e, 0x83, 0x35, 0x3c, 0x3d,
	0x61, 0xa3, 0x0b, 0x0c, 0xe1, 0x22, 0x51, 0x64, 0x2a, 0x97, 0xab, 0xca, 0x25, 0x96, 0x79, 0x2e,
	0x05, 0x23, 0x33, 0x11, 0x4b, 0xc9, 0x2c, 0x03, 0x87, 0xd0, 0x13, 0x56, 0xfd, 0x79, 0x59, 0xea,
	0xfb, 0xb7, 0x7c, 0x27, 0x74, 0xd9, 0x11, 0x1a, 0x5c, 0xc2, 0xc3, 0x31, 0x09, 0x52, 0xdc, 0x10,
	0x93, 0x32, 0x67, 0xb4, 0x0e, 0x66, 0xf0, 0xe8, 0x10, 0x3a, 0x6b, 0xf0, 0x0d, 0x74, 0x94, 0x94,
	0xf9, 0xe4, 0x5d, 0x35, 0xb0, 0x3a, 0x05, 0x39, 0x5c, 0x4d, 0x49, 0xa4, 0x1f, 0x49, 0x6b, 0xfe,
	0x9d, 0x66, 0xf2, 0xab, 0x26, 0xd5, 0x7e, 0x35, 0xe8, 0xc1, 0x5d, 0x63, 0x35, 0xd6, 0xd8, 0x0d,
	0x5d, 0xf6, 0xe7, 0x8c, 0x08, 0x17, 0x29, 0x37, 0xbc, 0xef, 0xfa, 0x4e, 0xd8, 0x65, 0xf6, 0x3b,
	0x78, 0x03, 0xd7, 0x0d, 0xe3, 0xce, 0x79, 0x49, 0xf0, 0x1a, 0xae, 0xc7, 0x64, 0x76, 0xc2, 0x78,
	0xa3, 0xd4, 0x2e, 0x82, 0x72, 0x41, 0x6d, 0xd3, 0x9c, 0xc3, 0x4d, 0x93, 0xfe, 0x7f, 0x6c, 0x73,
	0xf4, 0xcb, 0x85, 0x7b, 0x71, 0x3c, 0x25, 0xb5, 0xe5, 0xc2, 0xe0, 0x4f, 0x78, 0xfc, 0xcf, 0xde,
	0xe0, 0x8b, 0xe8, 0xb0, 0xba, 0xd1, 0xa9, 0xa6, 0x7a, 0x2f, 0xcf, 0x60, 0xeb, 0x02, 0xbf, 0x40,
	0xf7, 0xef, 0xae, 0xe0, 0xb3, 0xba, 0xfc, 0xa0, 0x5c, 0x9e, 0x7f, 0x9a, 0xa0, 0x0b, 0xfc, 0x06,
	0x97, 0xb5, 0xe4, 0xf0, 0xf9, 0xb1, 0xac, 0xa9, 0x4b, 0xde, 0xa0, 0x05, 0x4b, 0x17, 0x98, 0x00,
	0xd6, 0x83, 0xc1, 0x41, 0xc3, 0xcb, 0xeb, 0xe1, 0x7b, 0xc3, 0x36, 0x34, 0x5d, 0xbc, 0xbd, 0x33,
	0xbf, 0x6d, 0x89, 0x8b, 0x8e, 0xfd, 0x45, 0xbc, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xa0,
	0xe4, 0x78, 0x52, 0x04, 0x00, 0x00,
}
