// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: matchserver.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 匹配请求
type MatchRandomCallReq struct {
	Sex       int32             `protobuf:"varint,1,opt,name=sex" json:"sex,omitempty"`
	MatchType int32             `protobuf:"varint,2,opt,name=matchType" json:"matchType,omitempty"`
	Province  string            `protobuf:"bytes,3,opt,name=province" json:"province,omitempty"`
	UserTag   map[string]string `protobuf:"bytes,4,rep,name=userTag" json:"userTag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MatchRandomCallReq) Reset()                    { *m = MatchRandomCallReq{} }
func (m *MatchRandomCallReq) String() string            { return proto.CompactTextString(m) }
func (*MatchRandomCallReq) ProtoMessage()               {}
func (*MatchRandomCallReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *MatchRandomCallReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *MatchRandomCallReq) GetMatchType() int32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *MatchRandomCallReq) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *MatchRandomCallReq) GetUserTag() map[string]string {
	if m != nil {
		return m.UserTag
	}
	return nil
}

type MatchRandomCallResp struct {
	Result          int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc       string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	OnlineUserCount uint32         `protobuf:"varint,3,opt,name=onlineUserCount" json:"onlineUserCount,omitempty"`
	MaleCount       uint32         `protobuf:"varint,4,opt,name=maleCount" json:"maleCount,omitempty"`
	FemaleCount     uint32         `protobuf:"varint,5,opt,name=femaleCount" json:"femaleCount,omitempty"`
	Cret            *CommonRetInfo `protobuf:"bytes,6,opt,name=cret" json:"cret,omitempty"`
}

func (m *MatchRandomCallResp) Reset()                    { *m = MatchRandomCallResp{} }
func (m *MatchRandomCallResp) String() string            { return proto.CompactTextString(m) }
func (*MatchRandomCallResp) ProtoMessage()               {}
func (*MatchRandomCallResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *MatchRandomCallResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *MatchRandomCallResp) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *MatchRandomCallResp) GetOnlineUserCount() uint32 {
	if m != nil {
		return m.OnlineUserCount
	}
	return 0
}

func (m *MatchRandomCallResp) GetMaleCount() uint32 {
	if m != nil {
		return m.MaleCount
	}
	return 0
}

func (m *MatchRandomCallResp) GetFemaleCount() uint32 {
	if m != nil {
		return m.FemaleCount
	}
	return 0
}

func (m *MatchRandomCallResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 退出随机匹配
type CancleMatchRandomReq struct {
	Sex       int32  `protobuf:"varint,1,opt,name=sex" json:"sex,omitempty"`
	MatchType int32  `protobuf:"varint,2,opt,name=matchType" json:"matchType,omitempty"`
	Province  string `protobuf:"bytes,3,opt,name=province" json:"province,omitempty"`
	Matchid   string `protobuf:"bytes,4,opt,name=matchid" json:"matchid,omitempty"`
}

func (m *CancleMatchRandomReq) Reset()                    { *m = CancleMatchRandomReq{} }
func (m *CancleMatchRandomReq) String() string            { return proto.CompactTextString(m) }
func (*CancleMatchRandomReq) ProtoMessage()               {}
func (*CancleMatchRandomReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *CancleMatchRandomReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *CancleMatchRandomReq) GetMatchType() int32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *CancleMatchRandomReq) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *CancleMatchRandomReq) GetMatchid() string {
	if m != nil {
		return m.Matchid
	}
	return ""
}

type CancleMatchRandomResp struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *CancleMatchRandomResp) Reset()                    { *m = CancleMatchRandomResp{} }
func (m *CancleMatchRandomResp) String() string            { return proto.CompactTextString(m) }
func (*CancleMatchRandomResp) ProtoMessage()               {}
func (*CancleMatchRandomResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *CancleMatchRandomResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CancleMatchRandomResp) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *CancleMatchRandomResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 选择结果，
type SelectMatchingResultReq struct {
	Matchid string `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Uid     uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *SelectMatchingResultReq) Reset()                    { *m = SelectMatchingResultReq{} }
func (m *SelectMatchingResultReq) String() string            { return proto.CompactTextString(m) }
func (*SelectMatchingResultReq) ProtoMessage()               {}
func (*SelectMatchingResultReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *SelectMatchingResultReq) GetMatchid() string {
	if m != nil {
		return m.Matchid
	}
	return ""
}

func (m *SelectMatchingResultReq) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type SelectMatchingResultResp struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *SelectMatchingResultResp) Reset()                    { *m = SelectMatchingResultResp{} }
func (m *SelectMatchingResultResp) String() string            { return proto.CompactTextString(m) }
func (*SelectMatchingResultResp) ProtoMessage()               {}
func (*SelectMatchingResultResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *SelectMatchingResultResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SelectMatchingResultResp) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *SelectMatchingResultResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 请求、取消通话
type ApplyTalkingRequest struct {
	RequestUid uint32 `protobuf:"varint,1,opt,name=requestUid" json:"requestUid,omitempty"`
	UnicastUid uint32 `protobuf:"varint,2,opt,name=unicastUid" json:"unicastUid,omitempty"`
	Operation  uint32 `protobuf:"varint,3,opt,name=operation" json:"operation,omitempty"`
	Applyid    uint64 `protobuf:"varint,4,opt,name=applyid" json:"applyid,omitempty"`
}

func (m *ApplyTalkingRequest) Reset()                    { *m = ApplyTalkingRequest{} }
func (m *ApplyTalkingRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyTalkingRequest) ProtoMessage()               {}
func (*ApplyTalkingRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *ApplyTalkingRequest) GetRequestUid() uint32 {
	if m != nil {
		return m.RequestUid
	}
	return 0
}

func (m *ApplyTalkingRequest) GetUnicastUid() uint32 {
	if m != nil {
		return m.UnicastUid
	}
	return 0
}

func (m *ApplyTalkingRequest) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *ApplyTalkingRequest) GetApplyid() uint64 {
	if m != nil {
		return m.Applyid
	}
	return 0
}

type ApplyTalkingRespone struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *ApplyTalkingRespone) Reset()                    { *m = ApplyTalkingRespone{} }
func (m *ApplyTalkingRespone) String() string            { return proto.CompactTextString(m) }
func (*ApplyTalkingRespone) ProtoMessage()               {}
func (*ApplyTalkingRespone) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *ApplyTalkingRespone) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *ApplyTalkingRespone) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *ApplyTalkingRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

type ReportTalkingRequest struct {
	RequestUid uint32 `protobuf:"varint,1,opt,name=requestUid" json:"requestUid,omitempty"`
	UnicastUid uint32 `protobuf:"varint,2,opt,name=unicastUid" json:"unicastUid,omitempty"`
	Status     uint32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Reportid   uint64 `protobuf:"varint,4,opt,name=reportid" json:"reportid,omitempty"`
}

func (m *ReportTalkingRequest) Reset()                    { *m = ReportTalkingRequest{} }
func (m *ReportTalkingRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportTalkingRequest) ProtoMessage()               {}
func (*ReportTalkingRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *ReportTalkingRequest) GetRequestUid() uint32 {
	if m != nil {
		return m.RequestUid
	}
	return 0
}

func (m *ReportTalkingRequest) GetUnicastUid() uint32 {
	if m != nil {
		return m.UnicastUid
	}
	return 0
}

func (m *ReportTalkingRequest) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReportTalkingRequest) GetReportid() uint64 {
	if m != nil {
		return m.Reportid
	}
	return 0
}

type ReportTalkingResponse struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *ReportTalkingResponse) Reset()                    { *m = ReportTalkingResponse{} }
func (m *ReportTalkingResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportTalkingResponse) ProtoMessage()               {}
func (*ReportTalkingResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *ReportTalkingResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *ReportTalkingResponse) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *ReportTalkingResponse) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 开始通话
type TalkingRequest struct {
	RequestUid uint32 `protobuf:"varint,1,opt,name=requestUid" json:"requestUid,omitempty"`
	UnicastUid uint32 `protobuf:"varint,2,opt,name=unicastUid" json:"unicastUid,omitempty"`
	Operation  uint32 `protobuf:"varint,3,opt,name=operation" json:"operation,omitempty"`
	Type       uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
}

func (m *TalkingRequest) Reset()                    { *m = TalkingRequest{} }
func (m *TalkingRequest) String() string            { return proto.CompactTextString(m) }
func (*TalkingRequest) ProtoMessage()               {}
func (*TalkingRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *TalkingRequest) GetRequestUid() uint32 {
	if m != nil {
		return m.RequestUid
	}
	return 0
}

func (m *TalkingRequest) GetUnicastUid() uint32 {
	if m != nil {
		return m.UnicastUid
	}
	return 0
}

func (m *TalkingRequest) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *TalkingRequest) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type TalkingRespone struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *TalkingRespone) Reset()                    { *m = TalkingRespone{} }
func (m *TalkingRespone) String() string            { return proto.CompactTextString(m) }
func (*TalkingRespone) ProtoMessage()               {}
func (*TalkingRespone) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *TalkingRespone) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *TalkingRespone) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *TalkingRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 心跳
type TalkingHeartbeatRequest struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *TalkingHeartbeatRequest) Reset()                    { *m = TalkingHeartbeatRequest{} }
func (m *TalkingHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*TalkingHeartbeatRequest) ProtoMessage()               {}
func (*TalkingHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *TalkingHeartbeatRequest) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type TalkingHeartbeatRespone struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *TalkingHeartbeatRespone) Reset()                    { *m = TalkingHeartbeatRespone{} }
func (m *TalkingHeartbeatRespone) String() string            { return proto.CompactTextString(m) }
func (*TalkingHeartbeatRespone) ProtoMessage()               {}
func (*TalkingHeartbeatRespone) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

func (m *TalkingHeartbeatRespone) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *TalkingHeartbeatRespone) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *TalkingHeartbeatRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 获取安慰语
type GetComfortWordRequest struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *GetComfortWordRequest) Reset()                    { *m = GetComfortWordRequest{} }
func (m *GetComfortWordRequest) String() string            { return proto.CompactTextString(m) }
func (*GetComfortWordRequest) ProtoMessage()               {}
func (*GetComfortWordRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

func (m *GetComfortWordRequest) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetComfortWordRespone struct {
	Result     int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc  string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	ComforWord string         `protobuf:"bytes,3,opt,name=comforWord" json:"comforWord,omitempty"`
	Cret       *CommonRetInfo `protobuf:"bytes,4,opt,name=cret" json:"cret,omitempty"`
}

func (m *GetComfortWordRespone) Reset()                    { *m = GetComfortWordRespone{} }
func (m *GetComfortWordRespone) String() string            { return proto.CompactTextString(m) }
func (*GetComfortWordRespone) ProtoMessage()               {}
func (*GetComfortWordRespone) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{15} }

func (m *GetComfortWordRespone) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *GetComfortWordRespone) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *GetComfortWordRespone) GetComforWord() string {
	if m != nil {
		return m.ComforWord
	}
	return ""
}

func (m *GetComfortWordRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

// 获取随机头像请求
type GetRandomAvatarReq struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Sex int32  `protobuf:"varint,2,opt,name=sex" json:"sex,omitempty"`
}

func (m *GetRandomAvatarReq) Reset()                    { *m = GetRandomAvatarReq{} }
func (m *GetRandomAvatarReq) String() string            { return proto.CompactTextString(m) }
func (*GetRandomAvatarReq) ProtoMessage()               {}
func (*GetRandomAvatarReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{16} }

func (m *GetRandomAvatarReq) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetRandomAvatarReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type GetRandomAvatarResp struct {
	Result    int32          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrorDesc string         `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc" json:"error_desc,omitempty"`
	Avatars   []string       `protobuf:"bytes,3,rep,name=avatars" json:"avatars,omitempty"`
	Cret      *CommonRetInfo `protobuf:"bytes,4,opt,name=cret" json:"cret,omitempty"`
}

func (m *GetRandomAvatarResp) Reset()                    { *m = GetRandomAvatarResp{} }
func (m *GetRandomAvatarResp) String() string            { return proto.CompactTextString(m) }
func (*GetRandomAvatarResp) ProtoMessage()               {}
func (*GetRandomAvatarResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{17} }

func (m *GetRandomAvatarResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *GetRandomAvatarResp) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *GetRandomAvatarResp) GetAvatars() []string {
	if m != nil {
		return m.Avatars
	}
	return nil
}

func (m *GetRandomAvatarResp) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

func init() {
	proto.RegisterType((*MatchRandomCallReq)(nil), "bilin.matchserver.MatchRandomCallReq")
	proto.RegisterType((*MatchRandomCallResp)(nil), "bilin.matchserver.MatchRandomCallResp")
	proto.RegisterType((*CancleMatchRandomReq)(nil), "bilin.matchserver.CancleMatchRandomReq")
	proto.RegisterType((*CancleMatchRandomResp)(nil), "bilin.matchserver.CancleMatchRandomResp")
	proto.RegisterType((*SelectMatchingResultReq)(nil), "bilin.matchserver.SelectMatchingResultReq")
	proto.RegisterType((*SelectMatchingResultResp)(nil), "bilin.matchserver.SelectMatchingResultResp")
	proto.RegisterType((*ApplyTalkingRequest)(nil), "bilin.matchserver.ApplyTalkingRequest")
	proto.RegisterType((*ApplyTalkingRespone)(nil), "bilin.matchserver.ApplyTalkingRespone")
	proto.RegisterType((*ReportTalkingRequest)(nil), "bilin.matchserver.ReportTalkingRequest")
	proto.RegisterType((*ReportTalkingResponse)(nil), "bilin.matchserver.ReportTalkingResponse")
	proto.RegisterType((*TalkingRequest)(nil), "bilin.matchserver.TalkingRequest")
	proto.RegisterType((*TalkingRespone)(nil), "bilin.matchserver.TalkingRespone")
	proto.RegisterType((*TalkingHeartbeatRequest)(nil), "bilin.matchserver.TalkingHeartbeatRequest")
	proto.RegisterType((*TalkingHeartbeatRespone)(nil), "bilin.matchserver.TalkingHeartbeatRespone")
	proto.RegisterType((*GetComfortWordRequest)(nil), "bilin.matchserver.GetComfortWordRequest")
	proto.RegisterType((*GetComfortWordRespone)(nil), "bilin.matchserver.GetComfortWordRespone")
	proto.RegisterType((*GetRandomAvatarReq)(nil), "bilin.matchserver.GetRandomAvatarReq")
	proto.RegisterType((*GetRandomAvatarResp)(nil), "bilin.matchserver.GetRandomAvatarResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for MatchServant service

type MatchServantClient interface {
	MatchRandomCall(ctx context.Context, in *MatchRandomCallReq, opts ...map[string]string) (*MatchRandomCallResp, error)
	CancleMatchRandom(ctx context.Context, in *CancleMatchRandomReq, opts ...map[string]string) (*CancleMatchRandomResp, error)
	SelectMatchingResult(ctx context.Context, in *SelectMatchingResultReq, opts ...map[string]string) (*SelectMatchingResultResp, error)
	ApplyTalking(ctx context.Context, in *ApplyTalkingRequest, opts ...map[string]string) (*ApplyTalkingRespone, error)
	ReportTalking(ctx context.Context, in *ReportTalkingRequest, opts ...map[string]string) (*ReportTalkingResponse, error)
	Talking(ctx context.Context, in *TalkingRequest, opts ...map[string]string) (*TalkingRespone, error)
	TalkingHeartbeat(ctx context.Context, in *TalkingHeartbeatRequest, opts ...map[string]string) (*TalkingHeartbeatRespone, error)
	GetComfortWord(ctx context.Context, in *GetComfortWordRequest, opts ...map[string]string) (*GetComfortWordRespone, error)
	GetRandomAvatar(ctx context.Context, in *GetRandomAvatarReq, opts ...map[string]string) (*GetRandomAvatarResp, error)
}

type matchServantClient struct {
	s model.Servant
}

func NewMatchServantClient(objname string, comm servant.ICommunicator) MatchServantClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &matchServantClient{s: comm.GetServantProxy(objname)}
}

func (c *matchServantClient) MatchRandomCall(ctx context.Context, in *MatchRandomCallReq, opts ...map[string]string) (*MatchRandomCallResp, error) {
	var (
		reply MatchRandomCallResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "MatchRandomCall", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) CancleMatchRandom(ctx context.Context, in *CancleMatchRandomReq, opts ...map[string]string) (*CancleMatchRandomResp, error) {
	var (
		reply CancleMatchRandomResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "CancleMatchRandom", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) SelectMatchingResult(ctx context.Context, in *SelectMatchingResultReq, opts ...map[string]string) (*SelectMatchingResultResp, error) {
	var (
		reply SelectMatchingResultResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "SelectMatchingResult", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) ApplyTalking(ctx context.Context, in *ApplyTalkingRequest, opts ...map[string]string) (*ApplyTalkingRespone, error) {
	var (
		reply ApplyTalkingRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "ApplyTalking", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) ReportTalking(ctx context.Context, in *ReportTalkingRequest, opts ...map[string]string) (*ReportTalkingResponse, error) {
	var (
		reply ReportTalkingResponse
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "ReportTalking", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) Talking(ctx context.Context, in *TalkingRequest, opts ...map[string]string) (*TalkingRespone, error) {
	var (
		reply TalkingRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "Talking", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) TalkingHeartbeat(ctx context.Context, in *TalkingHeartbeatRequest, opts ...map[string]string) (*TalkingHeartbeatRespone, error) {
	var (
		reply TalkingHeartbeatRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "TalkingHeartbeat", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) GetComfortWord(ctx context.Context, in *GetComfortWordRequest, opts ...map[string]string) (*GetComfortWordRespone, error) {
	var (
		reply GetComfortWordRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GetComfortWord", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *matchServantClient) GetRandomAvatar(ctx context.Context, in *GetRandomAvatarReq, opts ...map[string]string) (*GetRandomAvatarResp, error) {
	var (
		reply GetRandomAvatarResp
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GetRandomAvatar", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for MatchServant service

type MatchServantServer interface {
	MatchRandomCall(context.Context, *MatchRandomCallReq) (*MatchRandomCallResp, error)
	CancleMatchRandom(context.Context, *CancleMatchRandomReq) (*CancleMatchRandomResp, error)
	SelectMatchingResult(context.Context, *SelectMatchingResultReq) (*SelectMatchingResultResp, error)
	ApplyTalking(context.Context, *ApplyTalkingRequest) (*ApplyTalkingRespone, error)
	ReportTalking(context.Context, *ReportTalkingRequest) (*ReportTalkingResponse, error)
	Talking(context.Context, *TalkingRequest) (*TalkingRespone, error)
	TalkingHeartbeat(context.Context, *TalkingHeartbeatRequest) (*TalkingHeartbeatRespone, error)
	GetComfortWord(context.Context, *GetComfortWordRequest) (*GetComfortWordRespone, error)
	GetRandomAvatar(context.Context, *GetRandomAvatarReq) (*GetRandomAvatarResp, error)
}

type matchServantDispatcher struct {
}

func NewMatchServantDispatcher() servant.Dispatcher {
	return &matchServantDispatcher{}
}

func (_obj *matchServantDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(MatchServantServer)
	switch req.SFuncName {
	case "MatchRandomCall":
		var req_ MatchRandomCallReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.MatchRandomCall(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "CancleMatchRandom":
		var req_ CancleMatchRandomReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.CancleMatchRandom(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "SelectMatchingResult":
		var req_ SelectMatchingResultReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.SelectMatchingResult(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "ApplyTalking":
		var req_ ApplyTalkingRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.ApplyTalking(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "ReportTalking":
		var req_ ReportTalkingRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.ReportTalking(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "Talking":
		var req_ TalkingRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.Talking(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "TalkingHeartbeat":
		var req_ TalkingHeartbeatRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.TalkingHeartbeat(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "GetComfortWord":
		var req_ GetComfortWordRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GetComfortWord(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "GetRandomAvatar":
		var req_ GetRandomAvatarReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GetRandomAvatar(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("matchserver.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x85, 0xe2, 0xaf, 0xf5, 0xc4, 0xce, 0x07, 0xe3, 0x24, 0x86, 0xb0, 0x1b, 0x78, 0x05, 0xec,
	0xae, 0x77, 0x03, 0xf8, 0xe0, 0xbd, 0x04, 0xb9, 0xa5, 0x6e, 0x90, 0x16, 0x68, 0x51, 0x80, 0x49,
	0x50, 0xa0, 0x87, 0x36, 0xb4, 0x4c, 0x27, 0x6a, 0x64, 0x51, 0xa1, 0x28, 0x23, 0x6e, 0x7b, 0xea,
	0xb1, 0x40, 0x81, 0xa2, 0xa7, 0xfe, 0xbc, 0x9e, 0xfb, 0x2b, 0x0a, 0x92, 0xb2, 0x2d, 0xdb, 0x4c,
	0x63, 0x34, 0xa9, 0x6f, 0x9c, 0xe1, 0x68, 0xe6, 0xbd, 0x21, 0xf9, 0xc6, 0x86, 0xf5, 0x1e, 0x11,
	0xee, 0x45, 0x44, 0x79, 0x9f, 0xf2, 0x46, 0xc8, 0x99, 0x60, 0x68, 0xbd, 0xed, 0xf9, 0x5e, 0xd0,
	0x48, 0x6d, 0xd8, 0xa5, 0x0b, 0x4a, 0x3a, 0xc3, 0x00, 0xe7, 0x9b, 0x05, 0xe8, 0xa9, 0xdc, 0xc5,
	0x24, 0xe8, 0xb0, 0x5e, 0x8b, 0xf8, 0x3e, 0xa6, 0x57, 0x68, 0x0d, 0x32, 0x11, 0xbd, 0xae, 0x5a,
	0x35, 0xab, 0x9e, 0xc3, 0x72, 0x89, 0x7e, 0x87, 0xa2, 0xca, 0x72, 0x32, 0x08, 0x69, 0x75, 0x49,
	0xf9, 0xc7, 0x0e, 0x64, 0xc3, 0x6f, 0x21, 0x67, 0x7d, 0x2f, 0x70, 0x69, 0x35, 0x53, 0xb3, 0xea,
	0x45, 0x3c, 0xb2, 0xd1, 0x13, 0x28, 0xc4, 0x11, 0xe5, 0x27, 0xe4, 0xbc, 0x9a, 0xad, 0x65, 0xea,
	0xcb, 0xcd, 0x66, 0x63, 0x06, 0x55, 0x63, 0x16, 0x43, 0xe3, 0x54, 0x7f, 0x74, 0x18, 0x08, 0x3e,
	0xc0, 0xc3, 0x14, 0xf6, 0x3e, 0x94, 0xd2, 0x1b, 0x12, 0xe9, 0x25, 0x1d, 0x28, 0xa4, 0x45, 0x2c,
	0x97, 0xa8, 0x02, 0xb9, 0x3e, 0xf1, 0x63, 0x8d, 0xb2, 0x88, 0xb5, 0xb1, 0xbf, 0xb4, 0x67, 0x39,
	0x5f, 0x2d, 0xd8, 0x98, 0x29, 0x14, 0x85, 0x68, 0x0b, 0xf2, 0x9c, 0x46, 0xb1, 0x2f, 0x12, 0xc2,
	0x89, 0x85, 0xfe, 0x00, 0xa0, 0x9c, 0x33, 0xfe, 0xaa, 0x43, 0x23, 0x37, 0x49, 0x57, 0x54, 0x9e,
	0x87, 0x34, 0x72, 0x51, 0x1d, 0x56, 0x59, 0xe0, 0x7b, 0x01, 0x95, 0x80, 0x5a, 0x2c, 0x0e, 0x84,
	0xe2, 0x5e, 0xc6, 0xd3, 0x6e, 0xdd, 0x3c, 0x9f, 0xea, 0x98, 0xac, 0x8a, 0x19, 0x3b, 0x50, 0x0d,
	0x96, 0xbb, 0x74, 0xbc, 0x9f, 0x53, 0xfb, 0x69, 0x17, 0xaa, 0x43, 0xd6, 0xe5, 0x54, 0x54, 0xf3,
	0x35, 0xab, 0xbe, 0xdc, 0xac, 0x24, 0xfd, 0x6b, 0xb1, 0x5e, 0x8f, 0x05, 0x98, 0x8a, 0xc7, 0x41,
	0x97, 0x61, 0x15, 0xe1, 0xbc, 0x83, 0x4a, 0x8b, 0x04, 0xae, 0x4f, 0x53, 0x3c, 0xef, 0xfb, 0x40,
	0xab, 0x50, 0x50, 0x81, 0x5e, 0x47, 0x71, 0x29, 0xe2, 0xa1, 0xe9, 0x5c, 0xc3, 0xa6, 0xa1, 0xfa,
	0x5d, 0x3a, 0xac, 0x79, 0x67, 0x6e, 0xe5, 0x7d, 0x08, 0xdb, 0xc7, 0xd4, 0xa7, 0xae, 0x50, 0x95,
	0xbd, 0xe0, 0x1c, 0xab, 0x02, 0x92, 0x7a, 0x0a, 0xae, 0x35, 0x01, 0x57, 0x36, 0x25, 0xf6, 0x3a,
	0xaa, 0x6c, 0x19, 0xcb, 0xa5, 0xf3, 0x16, 0xaa, 0xe6, 0x34, 0x8b, 0xe0, 0xf0, 0xd1, 0x82, 0x8d,
	0x83, 0x30, 0xf4, 0x07, 0x27, 0xc4, 0xbf, 0x54, 0xb5, 0xaf, 0x62, 0x1a, 0x09, 0xb4, 0x03, 0xc0,
	0xf5, 0xf2, 0x34, 0xe1, 0x50, 0xc6, 0x29, 0x8f, 0xdc, 0x8f, 0x03, 0xcf, 0x25, 0x7a, 0x5f, 0xb3,
	0x49, 0x79, 0xe4, 0x49, 0xb3, 0x90, 0x72, 0x22, 0x3c, 0x16, 0x24, 0x37, 0x74, 0xec, 0x90, 0xed,
	0x21, 0xb2, 0x68, 0x72, 0x9a, 0x59, 0x3c, 0x34, 0x9d, 0xfe, 0x34, 0x9c, 0x28, 0x64, 0x01, 0xfd,
	0xf5, 0x7d, 0xf8, 0x60, 0x41, 0x05, 0xd3, 0x90, 0x71, 0x71, 0xcf, 0x8d, 0xd8, 0x82, 0x7c, 0x24,
	0x88, 0x88, 0xa3, 0xa4, 0x0b, 0x89, 0x25, 0x2f, 0x3b, 0x57, 0xf5, 0x46, 0x3d, 0x18, 0xd9, 0xf2,
	0x4a, 0x4f, 0x61, 0x91, 0x5d, 0x88, 0x16, 0xd0, 0x86, 0xf7, 0x16, 0xac, 0x2c, 0xf4, 0x26, 0x20,
	0xc8, 0x0a, 0x29, 0x06, 0x5a, 0xa0, 0xd4, 0xda, 0xb9, 0x4a, 0x61, 0x58, 0xd0, 0xf1, 0xef, 0xc2,
	0x76, 0x52, 0xf2, 0x11, 0x25, 0x5c, 0xb4, 0x29, 0x11, 0x43, 0xfe, 0xc9, 0x83, 0xb5, 0xc6, 0x0f,
	0xf6, 0x8d, 0x29, 0x78, 0x41, 0x40, 0xff, 0x85, 0xcd, 0x23, 0x2a, 0x5a, 0xac, 0xd7, 0x65, 0x5c,
	0x3c, 0x67, 0xbc, 0x73, 0x33, 0xcc, 0x2f, 0xd6, 0x6c, 0xec, 0x9d, 0x50, 0xee, 0x00, 0xb8, 0x2a,
	0x99, 0xcc, 0x95, 0x28, 0x74, 0xca, 0x33, 0x62, 0x91, 0xbd, 0x95, 0xc5, 0x1e, 0xa0, 0x23, 0x2a,
	0xb4, 0x56, 0x1f, 0xf4, 0x89, 0x20, 0x3c, 0x99, 0x17, 0x93, 0x14, 0x86, 0x13, 0x64, 0x69, 0x34,
	0x41, 0x9c, 0x4f, 0x16, 0x6c, 0xcc, 0x7c, 0xfa, 0xf3, 0x42, 0x29, 0x85, 0x48, 0x25, 0x91, 0xcf,
	0x33, 0x23, 0x75, 0x3a, 0x31, 0xe7, 0x27, 0xd3, 0xfc, 0x5c, 0x80, 0x92, 0x92, 0xee, 0x63, 0xca,
	0xfb, 0x24, 0x10, 0xe8, 0x0c, 0x56, 0xa7, 0x26, 0x3e, 0xfa, 0x6b, 0xae, 0x9f, 0x1f, 0xf6, 0xdf,
	0xf3, 0x84, 0x45, 0x21, 0xea, 0xc2, 0xfa, 0xcc, 0xcc, 0x43, 0xff, 0x18, 0x3e, 0x36, 0xcd, 0x65,
	0xbb, 0x3e, 0x5f, 0x60, 0x14, 0x22, 0x06, 0x15, 0xd3, 0x68, 0x42, 0xff, 0x19, 0x32, 0xdc, 0x30,
	0x0a, 0xed, 0xdd, 0xb9, 0x63, 0xa3, 0x10, 0xbd, 0x84, 0x52, 0x5a, 0xfe, 0x91, 0xa9, 0x21, 0x86,
	0x71, 0x65, 0xdf, 0x1e, 0xa7, 0x6f, 0x7e, 0x1b, 0xca, 0x13, 0xca, 0x6a, 0x6c, 0x9a, 0x69, 0x0e,
	0x18, 0x9b, 0x66, 0x16, 0xe9, 0x67, 0x50, 0x18, 0x66, 0xff, 0xd3, 0xf0, 0xd1, 0x54, 0xde, 0x1f,
	0x86, 0x68, 0xd0, 0xaf, 0x61, 0x6d, 0x5a, 0x6f, 0x8c, 0x27, 0x70, 0x83, 0x82, 0xd9, 0xf3, 0xc5,
	0xea, 0x5a, 0x1d, 0x58, 0x99, 0xd4, 0x0c, 0x64, 0x22, 0x6e, 0x94, 0x20, 0x7b, 0x9e, 0x48, 0x5d,
	0xe5, 0x0c, 0x56, 0xa7, 0x1e, 0xb1, 0xf1, 0x85, 0xcc, 0x6a, 0x84, 0xf1, 0xa0, 0x0d, 0x7a, 0xf0,
	0xa0, 0xf0, 0x22, 0xa7, 0x02, 0xdb, 0x79, 0xf5, 0x9f, 0xe3, 0xff, 0xef, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x35, 0x04, 0x5d, 0xa9, 0x0c, 0x00, 0x00,
}
