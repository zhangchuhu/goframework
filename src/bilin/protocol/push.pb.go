// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: push.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MaxType是大类型所有可能的取值。
type MaxType int32

const (
	MaxType_MaxType_DO_NOT_USE MaxType = 0
	MaxType_BC_MSG             MaxType = 1
	MaxType_LOGIN_ELSEWHERE    MaxType = 9
	MaxType_COMMON_MSG         MaxType = 304
	MaxType_MATCH_MSG          MaxType = 600
	MaxType_FLOWER_MSG         MaxType = 601
	MaxType_CC_MSG             MaxType = 602
	MaxType_PUSH_MSG           MaxType = 88888
)

var MaxType_name = map[int32]string{
	0:     "MaxType_DO_NOT_USE",
	1:     "BC_MSG",
	9:     "LOGIN_ELSEWHERE",
	304:   "COMMON_MSG",
	600:   "MATCH_MSG",
	601:   "FLOWER_MSG",
	602:   "CC_MSG",
	88888: "PUSH_MSG",
}
var MaxType_value = map[string]int32{
	"MaxType_DO_NOT_USE": 0,
	"BC_MSG":             1,
	"LOGIN_ELSEWHERE":    9,
	"COMMON_MSG":         304,
	"MATCH_MSG":          600,
	"FLOWER_MSG":         601,
	"CC_MSG":             602,
	"PUSH_MSG":           88888,
}

func (x MaxType) String() string {
	return proto.EnumName(MaxType_name, int32(x))
}
func (MaxType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type MinType_PUSH int32

const (
	MinType_PUSH_BLPushTypeNeverUsed                  MinType_PUSH = 0
	MinType_PUSH_BLPushTypeFriendRequest              MinType_PUSH = 1
	MinType_PUSH_BLPushTypeMissCall                   MinType_PUSH = 2
	MinType_PUSH_BLPushTypeApplyCall                  MinType_PUSH = 3
	MinType_PUSH_BLPushTypeAcceptApplyCall            MinType_PUSH = 4
	MinType_PUSH_BLPushTypeComment                    MinType_PUSH = 5
	MinType_PUSH_BLPushTypeReplyComment               MinType_PUSH = 6
	MinType_PUSH_BLPushTypePraise                     MinType_PUSH = 7
	MinType_PUSH_BLPushTypeUploadImage                MinType_PUSH = 8
	MinType_PUSH_BLPushTypeChat                       MinType_PUSH = 9
	MinType_PUSH_BLPushTypeSystem                     MinType_PUSH = 10
	MinType_PUSH_BLPushTypeStatus                     MinType_PUSH = 11
	MinType_PUSH_BLPushTypeReceiveCall                MinType_PUSH = 12
	MinType_PUSH_BLPushTypeAgreeFriendRequest         MinType_PUSH = 13
	MinType_PUSH_BLPushTypeMoreClientLogin            MinType_PUSH = 14
	MinType_PUSH_BLPushTypeDeleteFriend               MinType_PUSH = 15
	MinType_PUSH_BLPushTypeMyBlackList                MinType_PUSH = 16
	MinType_PUSH_BLPushTypeBlackListInOther           MinType_PUSH = 17
	MinType_PUSH_BLPushTypeNewTask                    MinType_PUSH = 18
	MinType_PUSH_BLPushTypeFinishTask                 MinType_PUSH = 19
	MinType_PUSH_BLPushTypeTaskDidUpdate              MinType_PUSH = 20
	MinType_PUSH_BLPushTypeNewRandomCallLeadFinish    MinType_PUSH = 21
	MinType_PUSH_BLPushTypeFriendChat                 MinType_PUSH = 22
	MinType_PUSH_BLPushTypeReplyChat                  MinType_PUSH = 23
	MinType_PUSH_BLPushTypeRecentChat                 MinType_PUSH = 24
	MinType_PUSH_BLPushTypeRandomChat                 MinType_PUSH = 25
	MinType_PUSH_BLPushTypeInMainNotFriendChat        MinType_PUSH = 26
	MinType_PUSH_BLPushTypeDiscussionMsg              MinType_PUSH = 27
	MinType_PUSH_BLPushTypeSuperPowerEvaluation       MinType_PUSH = 31
	MinType_PUSH_BLPushTypeAttentionMeMsg             MinType_PUSH = 32
	MinType_PUSH_BLPushTypeCancelAttentionMeMsg       MinType_PUSH = 33
	MinType_PUSH_BLPushTypeRecieveUserMoodMsg         MinType_PUSH = 34
	MinType_PUSH_BLPushTypeGreetingInitMsg            MinType_PUSH = 37
	MinType_PUSH_BLPushTypeGreetingReplyMsg           MinType_PUSH = 38
	MinType_PUSH_BLPushTypeIntimacyUpgradeMsg         MinType_PUSH = 39
	MinType_PUSH_BLPushTypeIntimacyDegrateMsg         MinType_PUSH = 40
	MinType_PUSH_BLPushAttentionHostStartLiveMsg      MinType_PUSH = 41
	MinType_PUSH_BLMePushAttentionHostStartLiveMsg    MinType_PUSH = 42
	MinType_PUSH_BLVoicePushAttentionHostStartLiveMsg MinType_PUSH = 43
	MinType_PUSH_BLReservedPushStartLiveMsg           MinType_PUSH = 44
	MinType_PUSH_BLPushTypeForbidden                  MinType_PUSH = 45
	MinType_PUSH_BLPushTypeDeleteForbiddenMessage     MinType_PUSH = 46
	MinType_PUSH_BLPushTypeUploadlogMsg               MinType_PUSH = 47
)

var MinType_PUSH_name = map[int32]string{
	0:  "BLPushTypeNeverUsed",
	1:  "BLPushTypeFriendRequest",
	2:  "BLPushTypeMissCall",
	3:  "BLPushTypeApplyCall",
	4:  "BLPushTypeAcceptApplyCall",
	5:  "BLPushTypeComment",
	6:  "BLPushTypeReplyComment",
	7:  "BLPushTypePraise",
	8:  "BLPushTypeUploadImage",
	9:  "BLPushTypeChat",
	10: "BLPushTypeSystem",
	11: "BLPushTypeStatus",
	12: "BLPushTypeReceiveCall",
	13: "BLPushTypeAgreeFriendRequest",
	14: "BLPushTypeMoreClientLogin",
	15: "BLPushTypeDeleteFriend",
	16: "BLPushTypeMyBlackList",
	17: "BLPushTypeBlackListInOther",
	18: "BLPushTypeNewTask",
	19: "BLPushTypeFinishTask",
	20: "BLPushTypeTaskDidUpdate",
	21: "BLPushTypeNewRandomCallLeadFinish",
	22: "BLPushTypeFriendChat",
	23: "BLPushTypeReplyChat",
	24: "BLPushTypeRecentChat",
	25: "BLPushTypeRandomChat",
	26: "BLPushTypeInMainNotFriendChat",
	27: "BLPushTypeDiscussionMsg",
	31: "BLPushTypeSuperPowerEvaluation",
	32: "BLPushTypeAttentionMeMsg",
	33: "BLPushTypeCancelAttentionMeMsg",
	34: "BLPushTypeRecieveUserMoodMsg",
	37: "BLPushTypeGreetingInitMsg",
	38: "BLPushTypeGreetingReplyMsg",
	39: "BLPushTypeIntimacyUpgradeMsg",
	40: "BLPushTypeIntimacyDegrateMsg",
	41: "BLPushAttentionHostStartLiveMsg",
	42: "BLMePushAttentionHostStartLiveMsg",
	43: "BLVoicePushAttentionHostStartLiveMsg",
	44: "BLReservedPushStartLiveMsg",
	45: "BLPushTypeForbidden",
	46: "BLPushTypeDeleteForbiddenMessage",
	47: "BLPushTypeUploadlogMsg",
}
var MinType_PUSH_value = map[string]int32{
	"BLPushTypeNeverUsed":                  0,
	"BLPushTypeFriendRequest":              1,
	"BLPushTypeMissCall":                   2,
	"BLPushTypeApplyCall":                  3,
	"BLPushTypeAcceptApplyCall":            4,
	"BLPushTypeComment":                    5,
	"BLPushTypeReplyComment":               6,
	"BLPushTypePraise":                     7,
	"BLPushTypeUploadImage":                8,
	"BLPushTypeChat":                       9,
	"BLPushTypeSystem":                     10,
	"BLPushTypeStatus":                     11,
	"BLPushTypeReceiveCall":                12,
	"BLPushTypeAgreeFriendRequest":         13,
	"BLPushTypeMoreClientLogin":            14,
	"BLPushTypeDeleteFriend":               15,
	"BLPushTypeMyBlackList":                16,
	"BLPushTypeBlackListInOther":           17,
	"BLPushTypeNewTask":                    18,
	"BLPushTypeFinishTask":                 19,
	"BLPushTypeTaskDidUpdate":              20,
	"BLPushTypeNewRandomCallLeadFinish":    21,
	"BLPushTypeFriendChat":                 22,
	"BLPushTypeReplyChat":                  23,
	"BLPushTypeRecentChat":                 24,
	"BLPushTypeRandomChat":                 25,
	"BLPushTypeInMainNotFriendChat":        26,
	"BLPushTypeDiscussionMsg":              27,
	"BLPushTypeSuperPowerEvaluation":       31,
	"BLPushTypeAttentionMeMsg":             32,
	"BLPushTypeCancelAttentionMeMsg":       33,
	"BLPushTypeRecieveUserMoodMsg":         34,
	"BLPushTypeGreetingInitMsg":            37,
	"BLPushTypeGreetingReplyMsg":           38,
	"BLPushTypeIntimacyUpgradeMsg":         39,
	"BLPushTypeIntimacyDegrateMsg":         40,
	"BLPushAttentionHostStartLiveMsg":      41,
	"BLMePushAttentionHostStartLiveMsg":    42,
	"BLVoicePushAttentionHostStartLiveMsg": 43,
	"BLReservedPushStartLiveMsg":           44,
	"BLPushTypeForbidden":                  45,
	"BLPushTypeDeleteForbiddenMessage":     46,
	"BLPushTypeUploadlogMsg":               47,
}

func (x MinType_PUSH) String() string {
	return proto.EnumName(MinType_PUSH_name, int32(x))
}
func (MinType_PUSH) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

type MinType_BC int32

const (
	MinType_BC_MinType_BC_DO_NOT_USE           MinType_BC = 0
	MinType_BC_NotifyBaseRoomInfo              MinType_BC = 1
	MinType_BC_NotifyRoomMickListInfo          MinType_BC = 2
	MinType_BC_NotifyRoomUserListInfo          MinType_BC = 3
	MinType_BC_NotifyRoomKickUser              MinType_BC = 4
	MinType_BC_NotifyUserBeForbidden           MinType_BC = 5
	MinType_BC_NotifyRoomLinkStatus            MinType_BC = 6
	MinType_BC_NotifyRoomPraise                MinType_BC = 7
	MinType_BC_NotifyRoomAudienceMute          MinType_BC = 8
	MinType_BC_NotifyAllRoomInfo               MinType_BC = 9
	MinType_BC_NotifyRoomMickOpt               MinType_BC = 10
	MinType_BC_NotifyRoomForbiddenList         MinType_BC = 11
	MinType_BC_NotifyRoomUserListChange        MinType_BC = 12
	MinType_BC_NotifyRoomClosed                MinType_BC = 13
	MinType_BC_NotifyRoomClearPreparedAudience MinType_BC = 14
	// K歌相关的通知类型
	MinType_BC_NotifyPreparationSong MinType_BC = 15
	MinType_BC_NotifySongsList       MinType_BC = 16
	MinType_BC_NotifySongSetTop      MinType_BC = 17
	MinType_BC_NotifyDelSong         MinType_BC = 18
	MinType_BC_NotifyStartSing       MinType_BC = 19
	MinType_BC_NotifyPauseSong       MinType_BC = 20
	MinType_BC_NotifyTerminateSong   MinType_BC = 21
	MinType_BC_NotifyAddSong         MinType_BC = 22
	// 麦上大表情
	MinType_BC_NotifyBigExpression MinType_BC = 23
)

var MinType_BC_name = map[int32]string{
	0:  "MinType_BC_DO_NOT_USE",
	1:  "NotifyBaseRoomInfo",
	2:  "NotifyRoomMickListInfo",
	3:  "NotifyRoomUserListInfo",
	4:  "NotifyRoomKickUser",
	5:  "NotifyUserBeForbidden",
	6:  "NotifyRoomLinkStatus",
	7:  "NotifyRoomPraise",
	8:  "NotifyRoomAudienceMute",
	9:  "NotifyAllRoomInfo",
	10: "NotifyRoomMickOpt",
	11: "NotifyRoomForbiddenList",
	12: "NotifyRoomUserListChange",
	13: "NotifyRoomClosed",
	14: "NotifyRoomClearPreparedAudience",
	15: "NotifyPreparationSong",
	16: "NotifySongsList",
	17: "NotifySongSetTop",
	18: "NotifyDelSong",
	19: "NotifyStartSing",
	20: "NotifyPauseSong",
	21: "NotifyTerminateSong",
	22: "NotifyAddSong",
	23: "NotifyBigExpression",
}
var MinType_BC_value = map[string]int32{
	"MinType_BC_DO_NOT_USE":           0,
	"NotifyBaseRoomInfo":              1,
	"NotifyRoomMickListInfo":          2,
	"NotifyRoomUserListInfo":          3,
	"NotifyRoomKickUser":              4,
	"NotifyUserBeForbidden":           5,
	"NotifyRoomLinkStatus":            6,
	"NotifyRoomPraise":                7,
	"NotifyRoomAudienceMute":          8,
	"NotifyAllRoomInfo":               9,
	"NotifyRoomMickOpt":               10,
	"NotifyRoomForbiddenList":         11,
	"NotifyRoomUserListChange":        12,
	"NotifyRoomClosed":                13,
	"NotifyRoomClearPreparedAudience": 14,
	"NotifyPreparationSong":           15,
	"NotifySongsList":                 16,
	"NotifySongSetTop":                17,
	"NotifyDelSong":                   18,
	"NotifyStartSing":                 19,
	"NotifyPauseSong":                 20,
	"NotifyTerminateSong":             21,
	"NotifyAddSong":                   22,
	"NotifyBigExpression":             23,
}

func (x MinType_BC) String() string {
	return proto.EnumName(MinType_BC_name, int32(x))
}
func (MinType_BC) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

type MinType_CC int32

const (
	MinType_CC_MinType_CC_DO_NOT_USE MinType_CC = 0
	MinType_CC_CLIENT_P2P_TUNNEL     MinType_CC = 1
)

var MinType_CC_name = map[int32]string{
	0: "MinType_CC_DO_NOT_USE",
	1: "CLIENT_P2P_TUNNEL",
}
var MinType_CC_value = map[string]int32{
	"MinType_CC_DO_NOT_USE": 0,
	"CLIENT_P2P_TUNNEL":     1,
}

func (x MinType_CC) String() string {
	return proto.EnumName(MinType_CC_name, int32(x))
}
func (MinType_CC) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

type MinType_COMMON int32

const (
	MinType_COMMON_MinType_Tunnel_DO_NOT_USE         MinType_COMMON = 0
	MinType_COMMON_DRAW_PICTURE_REQ                  MinType_COMMON = 1001
	MinType_COMMON_MULTI_R_CALL_CHANGE_SUPER_TAG_REQ MinType_COMMON = 1002
	MinType_COMMON_MULTI_R_CALL_DICE_REQ             MinType_COMMON = 1003
	MinType_COMMON_START_REC_REQ                     MinType_COMMON = 1004
	MinType_COMMON_STOP_REC_REQ                      MinType_COMMON = 1005
	MinType_COMMON_REC_OP_RESULT_REQ                 MinType_COMMON = 1006
	MinType_COMMON_DOUBLE_CALL_DICE_REQ              MinType_COMMON = 1007
	MinType_COMMON_IM_MSG                            MinType_COMMON = 1008
	MinType_COMMON_OFFICIAL_ON_MIKE                  MinType_COMMON = 1009
	MinType_COMMON_OFFICIAL_OFF_MIKE                 MinType_COMMON = 1012
	MinType_COMMON_P2P_BEGIN                         MinType_COMMON = 2000
	MinType_COMMON_SEND_FLOWER_REQ                   MinType_COMMON = 2001
	MinType_COMMON_ADD_FRIEND_REQ                    MinType_COMMON = 2002
	MinType_COMMON_ACCEPT_FRIEND_REQ                 MinType_COMMON = 2003
	MinType_COMMON_REFUSE_FRIEND_REQ                 MinType_COMMON = 2004
	MinType_COMMON_ATTENT_USER_REQ                   MinType_COMMON = 2005
	// client to cc
	// broadcast
	MinType_COMMON_DRAW_PICTURE_RES                   MinType_COMMON = 3001
	MinType_COMMON_MULTI_R_CALL_SUPER_TAG_CHAGE_RES   MinType_COMMON = 3002
	MinType_COMMON_MULTI_R_CALL_UPDATE_HOT_TOPIC_RES  MinType_COMMON = 3003
	MinType_COMMON_MULTI_R_CALL_DICE_RES              MinType_COMMON = 3004
	MinType_COMMON_MULTI_R_CALL_UPDATE_DICE_TOPIC_RES MinType_COMMON = 3005
	MinType_COMMON_DISCUSSION_GROUP_LIMIT_RES         MinType_COMMON = 3006
	MinType_COMMON_START_REC_RES                      MinType_COMMON = 3007
	MinType_COMMON_STOP_REC_RES                       MinType_COMMON = 3008
	MinType_COMMON_REC_OP_RESULT_RES                  MinType_COMMON = 3009
	MinType_COMMON_DOUBLE_CALL_DICE_RES               MinType_COMMON = 3010
	MinType_COMMON_HOT_LINE_NOTICE_RES                MinType_COMMON = 3011
	// p2p
	MinType_COMMON_SEND_FLOWER_RES            MinType_COMMON = 4001
	MinType_COMMON_ADD_FRIEND_RES             MinType_COMMON = 4002
	MinType_COMMON_ACCEPT_FRIEND_RES          MinType_COMMON = 4003
	MinType_COMMON_REFUSE_FRIEND_RES          MinType_COMMON = 4004
	MinType_COMMON_ATTENT_USER_RES            MinType_COMMON = 4005
	MinType_COMMON_INVOKE_THRIFT_INFO_RES     MinType_COMMON = 4006
	MinType_COMMON_TURNOVER_MSG_NOTICE        MinType_COMMON = 5001
	MinType_COMMON_OPERATETOOLBOX             MinType_COMMON = 6000
	MinType_COMMON_GUARDWING_BROACAST         MinType_COMMON = 6001
	MinType_COMMON_ROOM_MUSIC_STATUS_RES      MinType_COMMON = 6003
	MinType_COMMON_ACTIVE_TASK_UNICAST        MinType_COMMON = 6500
	MinType_COMMON_OFFICIALCHANNEL_UNICAST    MinType_COMMON = 6501
	MinType_COMMON_REDPACKET_COMING_BROADCAST MinType_COMMON = 7000
	MinType_COMMON_REDPACKET_FINISH_BROADCAST MinType_COMMON = 7001
	MinType_COMMON_REDPACKET_GRAB_BROADCAST   MinType_COMMON = 7002
)

var MinType_COMMON_name = map[int32]string{
	0:    "MinType_Tunnel_DO_NOT_USE",
	1001: "DRAW_PICTURE_REQ",
	1002: "MULTI_R_CALL_CHANGE_SUPER_TAG_REQ",
	1003: "MULTI_R_CALL_DICE_REQ",
	1004: "START_REC_REQ",
	1005: "STOP_REC_REQ",
	1006: "REC_OP_RESULT_REQ",
	1007: "DOUBLE_CALL_DICE_REQ",
	1008: "IM_MSG",
	1009: "OFFICIAL_ON_MIKE",
	1012: "OFFICIAL_OFF_MIKE",
	2000: "P2P_BEGIN",
	2001: "SEND_FLOWER_REQ",
	2002: "ADD_FRIEND_REQ",
	2003: "ACCEPT_FRIEND_REQ",
	2004: "REFUSE_FRIEND_REQ",
	2005: "ATTENT_USER_REQ",
	3001: "DRAW_PICTURE_RES",
	3002: "MULTI_R_CALL_SUPER_TAG_CHAGE_RES",
	3003: "MULTI_R_CALL_UPDATE_HOT_TOPIC_RES",
	3004: "MULTI_R_CALL_DICE_RES",
	3005: "MULTI_R_CALL_UPDATE_DICE_TOPIC_RES",
	3006: "DISCUSSION_GROUP_LIMIT_RES",
	3007: "START_REC_RES",
	3008: "STOP_REC_RES",
	3009: "REC_OP_RESULT_RES",
	3010: "DOUBLE_CALL_DICE_RES",
	3011: "HOT_LINE_NOTICE_RES",
	4001: "SEND_FLOWER_RES",
	4002: "ADD_FRIEND_RES",
	4003: "ACCEPT_FRIEND_RES",
	4004: "REFUSE_FRIEND_RES",
	4005: "ATTENT_USER_RES",
	4006: "INVOKE_THRIFT_INFO_RES",
	5001: "TURNOVER_MSG_NOTICE",
	6000: "OPERATETOOLBOX",
	6001: "GUARDWING_BROACAST",
	6003: "ROOM_MUSIC_STATUS_RES",
	6500: "ACTIVE_TASK_UNICAST",
	6501: "OFFICIALCHANNEL_UNICAST",
	7000: "REDPACKET_COMING_BROADCAST",
	7001: "REDPACKET_FINISH_BROADCAST",
	7002: "REDPACKET_GRAB_BROADCAST",
}
var MinType_COMMON_value = map[string]int32{
	"MinType_Tunnel_DO_NOT_USE":          0,
	"DRAW_PICTURE_REQ":                   1001,
	"MULTI_R_CALL_CHANGE_SUPER_TAG_REQ":  1002,
	"MULTI_R_CALL_DICE_REQ":              1003,
	"START_REC_REQ":                      1004,
	"STOP_REC_REQ":                       1005,
	"REC_OP_RESULT_REQ":                  1006,
	"DOUBLE_CALL_DICE_REQ":               1007,
	"IM_MSG":                             1008,
	"OFFICIAL_ON_MIKE":                   1009,
	"OFFICIAL_OFF_MIKE":                  1012,
	"P2P_BEGIN":                          2000,
	"SEND_FLOWER_REQ":                    2001,
	"ADD_FRIEND_REQ":                     2002,
	"ACCEPT_FRIEND_REQ":                  2003,
	"REFUSE_FRIEND_REQ":                  2004,
	"ATTENT_USER_REQ":                    2005,
	"DRAW_PICTURE_RES":                   3001,
	"MULTI_R_CALL_SUPER_TAG_CHAGE_RES":   3002,
	"MULTI_R_CALL_UPDATE_HOT_TOPIC_RES":  3003,
	"MULTI_R_CALL_DICE_RES":              3004,
	"MULTI_R_CALL_UPDATE_DICE_TOPIC_RES": 3005,
	"DISCUSSION_GROUP_LIMIT_RES":         3006,
	"START_REC_RES":                      3007,
	"STOP_REC_RES":                       3008,
	"REC_OP_RESULT_RES":                  3009,
	"DOUBLE_CALL_DICE_RES":               3010,
	"HOT_LINE_NOTICE_RES":                3011,
	"SEND_FLOWER_RES":                    4001,
	"ADD_FRIEND_RES":                     4002,
	"ACCEPT_FRIEND_RES":                  4003,
	"REFUSE_FRIEND_RES":                  4004,
	"ATTENT_USER_RES":                    4005,
	"INVOKE_THRIFT_INFO_RES":             4006,
	"TURNOVER_MSG_NOTICE":                5001,
	"OPERATETOOLBOX":                     6000,
	"GUARDWING_BROACAST":                 6001,
	"ROOM_MUSIC_STATUS_RES":              6003,
	"ACTIVE_TASK_UNICAST":                6500,
	"OFFICIALCHANNEL_UNICAST":            6501,
	"REDPACKET_COMING_BROADCAST":         7000,
	"REDPACKET_FINISH_BROADCAST":         7001,
	"REDPACKET_GRAB_BROADCAST":           7002,
}

func (x MinType_COMMON) String() string {
	return proto.EnumName(MinType_COMMON_name, int32(x))
}
func (MinType_COMMON) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

type USERFROM int32

const (
	USERFROM_ROOMLIST  USERFROM = 0
	USERFROM_SEARCH    USERFROM = 1
	USERFROM_BROADCAST USERFROM = 2
)

var USERFROM_name = map[int32]string{
	0: "ROOMLIST",
	1: "SEARCH",
	2: "BROADCAST",
}
var USERFROM_value = map[string]int32{
	"ROOMLIST":  0,
	"SEARCH":    1,
	"BROADCAST": 2,
}

func (x USERFROM) String() string {
	return proto.EnumName(USERFROM_name, int32(x))
}
func (USERFROM) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

type MinType_MATCH int32

const (
	MinType_MATCH_MinType_MATCH_DO_NOT_USE         MinType_MATCH = 0
	MinType_MATCH_OPTIONALMATCHINGRESULT_MINTYPE   MinType_MATCH = 1
	MinType_MATCH_MATCHINGRESULT_MINTYPE           MinType_MATCH = 2
	MinType_MATCH_TALKACTION_MINTYPE               MinType_MATCH = 3
	MinType_MATCH_BROADCASTONLINEUSERCOUNT_MINTYPE MinType_MATCH = 4
	MinType_MATCH_APPLYTALKING_MINTYPE             MinType_MATCH = 5
	MinType_MATCH_REPORTTALKING_MINTYPE            MinType_MATCH = 6
)

var MinType_MATCH_name = map[int32]string{
	0: "MinType_MATCH_DO_NOT_USE",
	1: "OPTIONALMATCHINGRESULT_MINTYPE",
	2: "MATCHINGRESULT_MINTYPE",
	3: "TALKACTION_MINTYPE",
	4: "BROADCASTONLINEUSERCOUNT_MINTYPE",
	5: "APPLYTALKING_MINTYPE",
	6: "REPORTTALKING_MINTYPE",
}
var MinType_MATCH_value = map[string]int32{
	"MinType_MATCH_DO_NOT_USE":         0,
	"OPTIONALMATCHINGRESULT_MINTYPE":   1,
	"MATCHINGRESULT_MINTYPE":           2,
	"TALKACTION_MINTYPE":               3,
	"BROADCASTONLINEUSERCOUNT_MINTYPE": 4,
	"APPLYTALKING_MINTYPE":             5,
	"REPORTTALKING_MINTYPE":            6,
}

func (x MinType_MATCH) String() string {
	return proto.EnumName(MinType_MATCH_name, int32(x))
}
func (MinType_MATCH) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

type MinType_FLOWER int32

const (
	MinType_FLOWER_MinType_FLOWER_DO_NOT_USE MinType_FLOWER = 0
	MinType_FLOWER_SENDFLOWERBROCAST_MINTYPE MinType_FLOWER = 1
)

var MinType_FLOWER_name = map[int32]string{
	0: "MinType_FLOWER_DO_NOT_USE",
	1: "SENDFLOWERBROCAST_MINTYPE",
}
var MinType_FLOWER_value = map[string]int32{
	"MinType_FLOWER_DO_NOT_USE": 0,
	"SENDFLOWERBROCAST_MINTYPE": 1,
}

func (x MinType_FLOWER) String() string {
	return proto.EnumName(MinType_FLOWER_name, int32(x))
}
func (MinType_FLOWER) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

type BaseRoomInfo_ROOMSTATUS int32

const (
	BaseRoomInfo_OPEN      BaseRoomInfo_ROOMSTATUS = 0
	BaseRoomInfo_CLOSED    BaseRoomInfo_ROOMSTATUS = 1
	BaseRoomInfo_FORBIDDEN BaseRoomInfo_ROOMSTATUS = 2
)

var BaseRoomInfo_ROOMSTATUS_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
	2: "FORBIDDEN",
}
var BaseRoomInfo_ROOMSTATUS_value = map[string]int32{
	"OPEN":      0,
	"CLOSED":    1,
	"FORBIDDEN": 2,
}

func (x BaseRoomInfo_ROOMSTATUS) String() string {
	return proto.EnumName(BaseRoomInfo_ROOMSTATUS_name, int32(x))
}
func (BaseRoomInfo_ROOMSTATUS) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 0} }

type BaseRoomInfo_ROOMTYPE int32

const (
	BaseRoomInfo_ROOMTYPE_UNKNOW BaseRoomInfo_ROOMTYPE = 0
	BaseRoomInfo_ROOMTYPE_THREE  BaseRoomInfo_ROOMTYPE = 1
	BaseRoomInfo_ROOMTYPE_SIX    BaseRoomInfo_ROOMTYPE = 2
	BaseRoomInfo_ROOMTYPE_RADIO  BaseRoomInfo_ROOMTYPE = 3
)

var BaseRoomInfo_ROOMTYPE_name = map[int32]string{
	0: "ROOMTYPE_UNKNOW",
	1: "ROOMTYPE_THREE",
	2: "ROOMTYPE_SIX",
	3: "ROOMTYPE_RADIO",
}
var BaseRoomInfo_ROOMTYPE_value = map[string]int32{
	"ROOMTYPE_UNKNOW": 0,
	"ROOMTYPE_THREE":  1,
	"ROOMTYPE_SIX":    2,
	"ROOMTYPE_RADIO":  3,
}

func (x BaseRoomInfo_ROOMTYPE) String() string {
	return proto.EnumName(BaseRoomInfo_ROOMTYPE_name, int32(x))
}
func (BaseRoomInfo_ROOMTYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 1} }

type BaseRoomInfo_LINKSTATUS int32

const (
	BaseRoomInfo_CLOSELINK BaseRoomInfo_LINKSTATUS = 0
	BaseRoomInfo_OPENLINK  BaseRoomInfo_LINKSTATUS = 1
)

var BaseRoomInfo_LINKSTATUS_name = map[int32]string{
	0: "CLOSELINK",
	1: "OPENLINK",
}
var BaseRoomInfo_LINKSTATUS_value = map[string]int32{
	"CLOSELINK": 0,
	"OPENLINK":  1,
}

func (x BaseRoomInfo_LINKSTATUS) String() string {
	return proto.EnumName(BaseRoomInfo_LINKSTATUS_name, int32(x))
}
func (BaseRoomInfo_LINKSTATUS) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 2} }

type BaseRoomInfo_AUTOLINK int32

const (
	BaseRoomInfo_CLOSEAUTOTOMIKE BaseRoomInfo_AUTOLINK = 0
	BaseRoomInfo_OPENAUTOTOMIKE  BaseRoomInfo_AUTOLINK = 1
)

var BaseRoomInfo_AUTOLINK_name = map[int32]string{
	0: "CLOSEAUTOTOMIKE",
	1: "OPENAUTOTOMIKE",
}
var BaseRoomInfo_AUTOLINK_value = map[string]int32{
	"CLOSEAUTOTOMIKE": 0,
	"OPENAUTOTOMIKE":  1,
}

func (x BaseRoomInfo_AUTOLINK) String() string {
	return proto.EnumName(BaseRoomInfo_AUTOLINK_name, int32(x))
}
func (BaseRoomInfo_AUTOLINK) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 3} }

type BaseRoomInfo_MAIXUSWITCH int32

const (
	BaseRoomInfo_CLOSEMAIXU BaseRoomInfo_MAIXUSWITCH = 0
	BaseRoomInfo_OPENMAIXU  BaseRoomInfo_MAIXUSWITCH = 1
)

var BaseRoomInfo_MAIXUSWITCH_name = map[int32]string{
	0: "CLOSEMAIXU",
	1: "OPENMAIXU",
}
var BaseRoomInfo_MAIXUSWITCH_value = map[string]int32{
	"CLOSEMAIXU": 0,
	"OPENMAIXU":  1,
}

func (x BaseRoomInfo_MAIXUSWITCH) String() string {
	return proto.EnumName(BaseRoomInfo_MAIXUSWITCH_name, int32(x))
}
func (BaseRoomInfo_MAIXUSWITCH) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 4} }

type BaseRoomInfo_KARAOKESWITCH int32

const (
	BaseRoomInfo_CLOSEKARAOKE BaseRoomInfo_KARAOKESWITCH = 0
	BaseRoomInfo_OPENKARAOKE  BaseRoomInfo_KARAOKESWITCH = 1
)

var BaseRoomInfo_KARAOKESWITCH_name = map[int32]string{
	0: "CLOSEKARAOKE",
	1: "OPENKARAOKE",
}
var BaseRoomInfo_KARAOKESWITCH_value = map[string]int32{
	"CLOSEKARAOKE": 0,
	"OPENKARAOKE":  1,
}

func (x BaseRoomInfo_KARAOKESWITCH) String() string {
	return proto.EnumName(BaseRoomInfo_KARAOKESWITCH_name, int32(x))
}
func (BaseRoomInfo_KARAOKESWITCH) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor13, []int{4, 5}
}

type BaseRoomInfo_RELATIONLISTESWITCH int32

const (
	BaseRoomInfo_CLOSERELATIONLIST BaseRoomInfo_RELATIONLISTESWITCH = 0
	BaseRoomInfo_OPENRELATIONLIST  BaseRoomInfo_RELATIONLISTESWITCH = 1
)

var BaseRoomInfo_RELATIONLISTESWITCH_name = map[int32]string{
	0: "CLOSERELATIONLIST",
	1: "OPENRELATIONLIST",
}
var BaseRoomInfo_RELATIONLISTESWITCH_value = map[string]int32{
	"CLOSERELATIONLIST": 0,
	"OPENRELATIONLIST":  1,
}

func (x BaseRoomInfo_RELATIONLISTESWITCH) String() string {
	return proto.EnumName(BaseRoomInfo_RELATIONLISTESWITCH_name, int32(x))
}
func (BaseRoomInfo_RELATIONLISTESWITCH) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor13, []int{4, 6}
}

type MikeInfo_MIKEWHEATSTATUS int32

const (
	MikeInfo_EMPTY MikeInfo_MIKEWHEATSTATUS = 0
	MikeInfo_USED  MikeInfo_MIKEWHEATSTATUS = 1
	MikeInfo_LOCK  MikeInfo_MIKEWHEATSTATUS = 2
)

var MikeInfo_MIKEWHEATSTATUS_name = map[int32]string{
	0: "EMPTY",
	1: "USED",
	2: "LOCK",
}
var MikeInfo_MIKEWHEATSTATUS_value = map[string]int32{
	"EMPTY": 0,
	"USED":  1,
	"LOCK":  2,
}

func (x MikeInfo_MIKEWHEATSTATUS) String() string {
	return proto.EnumName(MikeInfo_MIKEWHEATSTATUS_name, int32(x))
}
func (MikeInfo_MIKEWHEATSTATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor13, []int{12, 0}
}

type KaraokeSongInfo_SONGSTATUS int32

const (
	KaraokeSongInfo_PREPARE KaraokeSongInfo_SONGSTATUS = 0
	KaraokeSongInfo_SINGING KaraokeSongInfo_SONGSTATUS = 1
	KaraokeSongInfo_PAUSE   KaraokeSongInfo_SONGSTATUS = 2
)

var KaraokeSongInfo_SONGSTATUS_name = map[int32]string{
	0: "PREPARE",
	1: "SINGING",
	2: "PAUSE",
}
var KaraokeSongInfo_SONGSTATUS_value = map[string]int32{
	"PREPARE": 0,
	"SINGING": 1,
	"PAUSE":   2,
}

func (x KaraokeSongInfo_SONGSTATUS) String() string {
	return proto.EnumName(KaraokeSongInfo_SONGSTATUS_name, int32(x))
}
func (KaraokeSongInfo_SONGSTATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor13, []int{19, 0}
}

// ServerPush是服务端推送到客户端的最外层协议包
type ServerPush struct {
	MessageType int32             `protobuf:"zigzag32,1,opt,name=messageType" json:"messageType,omitempty"`
	PushBuffer  []byte            `protobuf:"bytes,2,opt,name=pushBuffer,proto3" json:"pushBuffer,omitempty"`
	Headers     map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MessageDesc string            `protobuf:"bytes,4,opt,name=messageDesc" json:"messageDesc,omitempty"`
	ServiceName string            `protobuf:"bytes,5,opt,name=serviceName" json:"serviceName,omitempty"`
	MethodName  string            `protobuf:"bytes,6,opt,name=methodName" json:"methodName,omitempty"`
}

func (m *ServerPush) Reset()                    { *m = ServerPush{} }
func (m *ServerPush) String() string            { return proto.CompactTextString(m) }
func (*ServerPush) ProtoMessage()               {}
func (*ServerPush) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *ServerPush) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ServerPush) GetPushBuffer() []byte {
	if m != nil {
		return m.PushBuffer
	}
	return nil
}

func (m *ServerPush) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ServerPush) GetMessageDesc() string {
	if m != nil {
		return m.MessageDesc
	}
	return ""
}

func (m *ServerPush) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServerPush) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

type BcMessageBody struct {
	Type int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BcMessageBody) Reset()                    { *m = BcMessageBody{} }
func (m *BcMessageBody) String() string            { return proto.CompactTextString(m) }
func (*BcMessageBody) ProtoMessage()               {}
func (*BcMessageBody) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *BcMessageBody) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BcMessageBody) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommonMessageBody struct {
	Type int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CommonMessageBody) Reset()                    { *m = CommonMessageBody{} }
func (m *CommonMessageBody) String() string            { return proto.CompactTextString(m) }
func (*CommonMessageBody) ProtoMessage()               {}
func (*CommonMessageBody) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *CommonMessageBody) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CommonMessageBody) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// push通知
type PushProxyReqFromJava struct {
	BusiType   int32  `protobuf:"varint,1,opt,name=busi_type,json=busiType" json:"busi_type,omitempty"`
	FromUserid int64  `protobuf:"varint,2,opt,name=from_userid,json=fromUserid" json:"from_userid,omitempty"`
	TipsCount  int32  `protobuf:"varint,3,opt,name=tips_count,json=tipsCount" json:"tips_count,omitempty"`
	HaveVoice  int32  `protobuf:"varint,4,opt,name=have_voice,json=haveVoice" json:"have_voice,omitempty"`
	Body       string `protobuf:"bytes,5,opt,name=body" json:"body,omitempty"`
	Para       string `protobuf:"bytes,6,opt,name=para" json:"para,omitempty"`
}

func (m *PushProxyReqFromJava) Reset()                    { *m = PushProxyReqFromJava{} }
func (m *PushProxyReqFromJava) String() string            { return proto.CompactTextString(m) }
func (*PushProxyReqFromJava) ProtoMessage()               {}
func (*PushProxyReqFromJava) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *PushProxyReqFromJava) GetBusiType() int32 {
	if m != nil {
		return m.BusiType
	}
	return 0
}

func (m *PushProxyReqFromJava) GetFromUserid() int64 {
	if m != nil {
		return m.FromUserid
	}
	return 0
}

func (m *PushProxyReqFromJava) GetTipsCount() int32 {
	if m != nil {
		return m.TipsCount
	}
	return 0
}

func (m *PushProxyReqFromJava) GetHaveVoice() int32 {
	if m != nil {
		return m.HaveVoice
	}
	return 0
}

func (m *PushProxyReqFromJava) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *PushProxyReqFromJava) GetPara() string {
	if m != nil {
		return m.Para
	}
	return ""
}

type BaseRoomInfo struct {
	Roomid             uint64                           `protobuf:"varint,1,opt,name=roomid" json:"roomid,omitempty"`
	Roomstatus         BaseRoomInfo_ROOMSTATUS          `protobuf:"varint,2,opt,name=roomstatus,enum=bilin.BaseRoomInfo_ROOMSTATUS" json:"roomstatus,omitempty"`
	Roomtype           BaseRoomInfo_ROOMTYPE            `protobuf:"varint,3,opt,name=roomtype,enum=bilin.BaseRoomInfo_ROOMTYPE" json:"roomtype,omitempty"`
	Linkstatus         BaseRoomInfo_LINKSTATUS          `protobuf:"varint,4,opt,name=linkstatus,enum=bilin.BaseRoomInfo_LINKSTATUS" json:"linkstatus,omitempty"`
	Title              string                           `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Totalmicknumber    uint32                           `protobuf:"varint,6,opt,name=totalmicknumber" json:"totalmicknumber,omitempty"`
	Host               *UserInfo                        `protobuf:"bytes,7,opt,name=host" json:"host,omitempty"`
	Mikewaitingusers   uint32                           `protobuf:"varint,8,opt,name=mikewaitingusers" json:"mikewaitingusers,omitempty"`
	Totalusersnumber   uint32                           `protobuf:"varint,9,opt,name=totalusersnumber" json:"totalusersnumber,omitempty"`
	RoomType2          int32                            `protobuf:"varint,10,opt,name=roomType2" json:"roomType2,omitempty"`
	RoomCategoryID     int32                            `protobuf:"varint,11,opt,name=roomCategoryID" json:"roomCategoryID,omitempty"`
	RoomPendantLevel   int32                            `protobuf:"varint,12,opt,name=roomPendantLevel" json:"roomPendantLevel,omitempty"`
	HostBilinID        int64                            `protobuf:"varint,13,opt,name=hostBilinID" json:"hostBilinID,omitempty"`
	PageUsersCount     int32                            `protobuf:"varint,14,opt,name=pageUsersCount" json:"pageUsersCount,omitempty"`
	Autolink           BaseRoomInfo_AUTOLINK            `protobuf:"varint,15,opt,name=autolink,enum=bilin.BaseRoomInfo_AUTOLINK" json:"autolink,omitempty"`
	Maixuswitch        BaseRoomInfo_MAIXUSWITCH         `protobuf:"varint,16,opt,name=maixuswitch,enum=bilin.BaseRoomInfo_MAIXUSWITCH" json:"maixuswitch,omitempty"`
	Karaokeswitch      BaseRoomInfo_KARAOKESWITCH       `protobuf:"varint,17,opt,name=karaokeswitch,enum=bilin.BaseRoomInfo_KARAOKESWITCH" json:"karaokeswitch,omitempty"`
	Relationlistswitch BaseRoomInfo_RELATIONLISTESWITCH `protobuf:"varint,18,opt,name=relationlistswitch,enum=bilin.BaseRoomInfo_RELATIONLISTESWITCH" json:"relationlistswitch,omitempty"`
	Owneruid           uint64                           `protobuf:"varint,19,opt,name=owneruid" json:"owneruid,omitempty"`
}

func (m *BaseRoomInfo) Reset()                    { *m = BaseRoomInfo{} }
func (m *BaseRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*BaseRoomInfo) ProtoMessage()               {}
func (*BaseRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *BaseRoomInfo) GetRoomid() uint64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *BaseRoomInfo) GetRoomstatus() BaseRoomInfo_ROOMSTATUS {
	if m != nil {
		return m.Roomstatus
	}
	return BaseRoomInfo_OPEN
}

func (m *BaseRoomInfo) GetRoomtype() BaseRoomInfo_ROOMTYPE {
	if m != nil {
		return m.Roomtype
	}
	return BaseRoomInfo_ROOMTYPE_UNKNOW
}

func (m *BaseRoomInfo) GetLinkstatus() BaseRoomInfo_LINKSTATUS {
	if m != nil {
		return m.Linkstatus
	}
	return BaseRoomInfo_CLOSELINK
}

func (m *BaseRoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BaseRoomInfo) GetTotalmicknumber() uint32 {
	if m != nil {
		return m.Totalmicknumber
	}
	return 0
}

func (m *BaseRoomInfo) GetHost() *UserInfo {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *BaseRoomInfo) GetMikewaitingusers() uint32 {
	if m != nil {
		return m.Mikewaitingusers
	}
	return 0
}

func (m *BaseRoomInfo) GetTotalusersnumber() uint32 {
	if m != nil {
		return m.Totalusersnumber
	}
	return 0
}

func (m *BaseRoomInfo) GetRoomType2() int32 {
	if m != nil {
		return m.RoomType2
	}
	return 0
}

func (m *BaseRoomInfo) GetRoomCategoryID() int32 {
	if m != nil {
		return m.RoomCategoryID
	}
	return 0
}

func (m *BaseRoomInfo) GetRoomPendantLevel() int32 {
	if m != nil {
		return m.RoomPendantLevel
	}
	return 0
}

func (m *BaseRoomInfo) GetHostBilinID() int64 {
	if m != nil {
		return m.HostBilinID
	}
	return 0
}

func (m *BaseRoomInfo) GetPageUsersCount() int32 {
	if m != nil {
		return m.PageUsersCount
	}
	return 0
}

func (m *BaseRoomInfo) GetAutolink() BaseRoomInfo_AUTOLINK {
	if m != nil {
		return m.Autolink
	}
	return BaseRoomInfo_CLOSEAUTOTOMIKE
}

func (m *BaseRoomInfo) GetMaixuswitch() BaseRoomInfo_MAIXUSWITCH {
	if m != nil {
		return m.Maixuswitch
	}
	return BaseRoomInfo_CLOSEMAIXU
}

func (m *BaseRoomInfo) GetKaraokeswitch() BaseRoomInfo_KARAOKESWITCH {
	if m != nil {
		return m.Karaokeswitch
	}
	return BaseRoomInfo_CLOSEKARAOKE
}

func (m *BaseRoomInfo) GetRelationlistswitch() BaseRoomInfo_RELATIONLISTESWITCH {
	if m != nil {
		return m.Relationlistswitch
	}
	return BaseRoomInfo_CLOSERELATIONLIST
}

func (m *BaseRoomInfo) GetOwneruid() uint64 {
	if m != nil {
		return m.Owneruid
	}
	return 0
}

// 房间功能区
type RoomBizInfo struct {
	LockStatus uint32 `protobuf:"varint,1,opt,name=lockStatus" json:"lockStatus,omitempty"`
}

func (m *RoomBizInfo) Reset()                    { *m = RoomBizInfo{} }
func (m *RoomBizInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomBizInfo) ProtoMessage()               {}
func (*RoomBizInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *RoomBizInfo) GetLockStatus() uint32 {
	if m != nil {
		return m.LockStatus
	}
	return 0
}

// 房间全量基础信息
type AllRoomInfo struct {
	Baseinfo      *BaseRoomInfo            `protobuf:"bytes,1,opt,name=baseinfo" json:"baseinfo,omitempty"`
	Audienceusers []*UserInfo              `protobuf:"bytes,2,rep,name=audienceusers" json:"audienceusers,omitempty"`
	Mikeinfo      []*MikeInfo              `protobuf:"bytes,3,rep,name=mikeinfo" json:"mikeinfo,omitempty"`
	Forbiddenuids *RoomForbiddenList       `protobuf:"bytes,4,opt,name=forbiddenuids" json:"forbiddenuids,omitempty"`
	PrivilegeInfo *UserPrivilegeInfoInRoom `protobuf:"bytes,5,opt,name=privilegeInfo" json:"privilegeInfo,omitempty"`
	Karaokeinfo   *AllRoomKaraokeInfo      `protobuf:"bytes,6,opt,name=karaokeinfo" json:"karaokeinfo,omitempty"`
	Bizinfo       *RoomBizInfo             `protobuf:"bytes,7,opt,name=bizinfo" json:"bizinfo,omitempty"`
}

func (m *AllRoomInfo) Reset()                    { *m = AllRoomInfo{} }
func (m *AllRoomInfo) String() string            { return proto.CompactTextString(m) }
func (*AllRoomInfo) ProtoMessage()               {}
func (*AllRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *AllRoomInfo) GetBaseinfo() *BaseRoomInfo {
	if m != nil {
		return m.Baseinfo
	}
	return nil
}

func (m *AllRoomInfo) GetAudienceusers() []*UserInfo {
	if m != nil {
		return m.Audienceusers
	}
	return nil
}

func (m *AllRoomInfo) GetMikeinfo() []*MikeInfo {
	if m != nil {
		return m.Mikeinfo
	}
	return nil
}

func (m *AllRoomInfo) GetForbiddenuids() *RoomForbiddenList {
	if m != nil {
		return m.Forbiddenuids
	}
	return nil
}

func (m *AllRoomInfo) GetPrivilegeInfo() *UserPrivilegeInfoInRoom {
	if m != nil {
		return m.PrivilegeInfo
	}
	return nil
}

func (m *AllRoomInfo) GetKaraokeinfo() *AllRoomKaraokeInfo {
	if m != nil {
		return m.Karaokeinfo
	}
	return nil
}

func (m *AllRoomInfo) GetBizinfo() *RoomBizInfo {
	if m != nil {
		return m.Bizinfo
	}
	return nil
}

type RoomMickListInfo struct {
	Mikeinfo         []*MikeInfo           `protobuf:"bytes,12,rep,name=mikeinfo" json:"mikeinfo,omitempty"`
	Mikewaitingusers uint32                `protobuf:"varint,13,opt,name=mikewaitingusers" json:"mikewaitingusers,omitempty"`
	Roomtype         BaseRoomInfo_ROOMTYPE `protobuf:"varint,14,opt,name=roomtype,enum=bilin.BaseRoomInfo_ROOMTYPE" json:"roomtype,omitempty"`
}

func (m *RoomMickListInfo) Reset()                    { *m = RoomMickListInfo{} }
func (m *RoomMickListInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomMickListInfo) ProtoMessage()               {}
func (*RoomMickListInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *RoomMickListInfo) GetMikeinfo() []*MikeInfo {
	if m != nil {
		return m.Mikeinfo
	}
	return nil
}

func (m *RoomMickListInfo) GetMikewaitingusers() uint32 {
	if m != nil {
		return m.Mikewaitingusers
	}
	return 0
}

func (m *RoomMickListInfo) GetRoomtype() BaseRoomInfo_ROOMTYPE {
	if m != nil {
		return m.Roomtype
	}
	return BaseRoomInfo_ROOMTYPE_UNKNOW
}

type RoomUserListInfo struct {
	Totalusersnumber uint32      `protobuf:"varint,1,opt,name=totalusersnumber" json:"totalusersnumber,omitempty"`
	Audienceusers    []*UserInfo `protobuf:"bytes,11,rep,name=audienceusers" json:"audienceusers,omitempty"`
}

func (m *RoomUserListInfo) Reset()                    { *m = RoomUserListInfo{} }
func (m *RoomUserListInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomUserListInfo) ProtoMessage()               {}
func (*RoomUserListInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

func (m *RoomUserListInfo) GetTotalusersnumber() uint32 {
	if m != nil {
		return m.Totalusersnumber
	}
	return 0
}

func (m *RoomUserListInfo) GetAudienceusers() []*UserInfo {
	if m != nil {
		return m.Audienceusers
	}
	return nil
}

type RoomForbiddenList struct {
	Uids []uint64 `protobuf:"varint,1,rep,packed,name=uids" json:"uids,omitempty"`
}

func (m *RoomForbiddenList) Reset()                    { *m = RoomForbiddenList{} }
func (m *RoomForbiddenList) String() string            { return proto.CompactTextString(m) }
func (*RoomForbiddenList) ProtoMessage()               {}
func (*RoomForbiddenList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

func (m *RoomForbiddenList) GetUids() []uint64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type UserInfo struct {
	Userid    uint64   `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Nick      string   `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	Avatarurl string   `protobuf:"bytes,3,opt,name=avatarurl" json:"avatarurl,omitempty"`
	Fanscount uint32   `protobuf:"varint,4,opt,name=fanscount" json:"fanscount,omitempty"`
	From      USERFROM `protobuf:"varint,5,opt,name=from,enum=bilin.USERFROM" json:"from,omitempty"`
	Mute      uint32   `protobuf:"varint,6,opt,name=mute" json:"mute,omitempty"`
	Sex       uint32   `protobuf:"varint,7,opt,name=sex" json:"sex,omitempty"`
	Age       uint32   `protobuf:"varint,8,opt,name=age" json:"age,omitempty"`
	CityName  string   `protobuf:"bytes,9,opt,name=cityName" json:"cityName,omitempty"`
	Signature string   `protobuf:"bytes,10,opt,name=signature" json:"signature,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *UserInfo) GetUserid() uint64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UserInfo) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UserInfo) GetAvatarurl() string {
	if m != nil {
		return m.Avatarurl
	}
	return ""
}

func (m *UserInfo) GetFanscount() uint32 {
	if m != nil {
		return m.Fanscount
	}
	return 0
}

func (m *UserInfo) GetFrom() USERFROM {
	if m != nil {
		return m.From
	}
	return USERFROM_ROOMLIST
}

func (m *UserInfo) GetMute() uint32 {
	if m != nil {
		return m.Mute
	}
	return 0
}

func (m *UserInfo) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfo) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserInfo) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *UserInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// 用户在房间的特权信息
type UserPrivilegeInfoInRoom struct {
	Headgear  string `protobuf:"bytes,1,opt,name=headgear" json:"headgear,omitempty"`
	Medalurl  string `protobuf:"bytes,2,opt,name=medalurl" json:"medalurl,omitempty"`
	Medaltext string `protobuf:"bytes,3,opt,name=medaltext" json:"medaltext,omitempty"`
}

func (m *UserPrivilegeInfoInRoom) Reset()                    { *m = UserPrivilegeInfoInRoom{} }
func (m *UserPrivilegeInfoInRoom) String() string            { return proto.CompactTextString(m) }
func (*UserPrivilegeInfoInRoom) ProtoMessage()               {}
func (*UserPrivilegeInfoInRoom) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

func (m *UserPrivilegeInfoInRoom) GetHeadgear() string {
	if m != nil {
		return m.Headgear
	}
	return ""
}

func (m *UserPrivilegeInfoInRoom) GetMedalurl() string {
	if m != nil {
		return m.Medalurl
	}
	return ""
}

func (m *UserPrivilegeInfoInRoom) GetMedaltext() string {
	if m != nil {
		return m.Medaltext
	}
	return ""
}

type MikeInfo struct {
	Mikewheatstatus MikeInfo_MIKEWHEATSTATUS `protobuf:"varint,1,opt,name=mikewheatstatus,enum=bilin.MikeInfo_MIKEWHEATSTATUS" json:"mikewheatstatus,omitempty"`
	Mikeindex       uint32                   `protobuf:"varint,2,opt,name=mikeindex" json:"mikeindex,omitempty"`
	Userinfo        *UserInfo                `protobuf:"bytes,10,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *MikeInfo) Reset()                    { *m = MikeInfo{} }
func (m *MikeInfo) String() string            { return proto.CompactTextString(m) }
func (*MikeInfo) ProtoMessage()               {}
func (*MikeInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{12} }

func (m *MikeInfo) GetMikewheatstatus() MikeInfo_MIKEWHEATSTATUS {
	if m != nil {
		return m.Mikewheatstatus
	}
	return MikeInfo_EMPTY
}

func (m *MikeInfo) GetMikeindex() uint32 {
	if m != nil {
		return m.Mikeindex
	}
	return 0
}

func (m *MikeInfo) GetUserinfo() *UserInfo {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

type PraiseNotify struct {
	Count uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *PraiseNotify) Reset()                    { *m = PraiseNotify{} }
func (m *PraiseNotify) String() string            { return proto.CompactTextString(m) }
func (*PraiseNotify) ProtoMessage()               {}
func (*PraiseNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *PraiseNotify) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MuteNotify struct {
	Optuserid uint64 `protobuf:"varint,1,opt,name=optuserid" json:"optuserid,omitempty"`
	Opt       uint32 `protobuf:"varint,2,opt,name=opt" json:"opt,omitempty"`
}

func (m *MuteNotify) Reset()                    { *m = MuteNotify{} }
func (m *MuteNotify) String() string            { return proto.CompactTextString(m) }
func (*MuteNotify) ProtoMessage()               {}
func (*MuteNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *MuteNotify) GetOptuserid() uint64 {
	if m != nil {
		return m.Optuserid
	}
	return 0
}

func (m *MuteNotify) GetOpt() uint32 {
	if m != nil {
		return m.Opt
	}
	return 0
}

type KickNotify struct {
	Optuserid uint64 `protobuf:"varint,2,opt,name=optuserid" json:"optuserid,omitempty"`
}

func (m *KickNotify) Reset()                    { *m = KickNotify{} }
func (m *KickNotify) String() string            { return proto.CompactTextString(m) }
func (*KickNotify) ProtoMessage()               {}
func (*KickNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *KickNotify) GetOptuserid() uint64 {
	if m != nil {
		return m.Optuserid
	}
	return 0
}

type MikeNotify struct {
	Optuserid uint64 `protobuf:"varint,1,opt,name=optuserid" json:"optuserid,omitempty"`
	Opt       uint32 `protobuf:"varint,2,opt,name=opt" json:"opt,omitempty"`
}

func (m *MikeNotify) Reset()                    { *m = MikeNotify{} }
func (m *MikeNotify) String() string            { return proto.CompactTextString(m) }
func (*MikeNotify) ProtoMessage()               {}
func (*MikeNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *MikeNotify) GetOptuserid() uint64 {
	if m != nil {
		return m.Optuserid
	}
	return 0
}

func (m *MikeNotify) GetOpt() uint32 {
	if m != nil {
		return m.Opt
	}
	return 0
}

type ForbiddenNotify struct {
	Optuserid uint64 `protobuf:"varint,1,opt,name=optuserid" json:"optuserid,omitempty"`
	Opt       uint32 `protobuf:"varint,2,opt,name=opt" json:"opt,omitempty"`
}

func (m *ForbiddenNotify) Reset()                    { *m = ForbiddenNotify{} }
func (m *ForbiddenNotify) String() string            { return proto.CompactTextString(m) }
func (*ForbiddenNotify) ProtoMessage()               {}
func (*ForbiddenNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *ForbiddenNotify) GetOptuserid() uint64 {
	if m != nil {
		return m.Optuserid
	}
	return 0
}

func (m *ForbiddenNotify) GetOpt() uint32 {
	if m != nil {
		return m.Opt
	}
	return 0
}

// 房间涉嫌违规，需要关闭，通知直播间所有用户
type ClosedRoomNotify struct {
	Hostnotifytext     string `protobuf:"bytes,1,opt,name=hostnotifytext" json:"hostnotifytext,omitempty"`
	Audiencenotifytext string `protobuf:"bytes,2,opt,name=audiencenotifytext" json:"audiencenotifytext,omitempty"`
}

func (m *ClosedRoomNotify) Reset()                    { *m = ClosedRoomNotify{} }
func (m *ClosedRoomNotify) String() string            { return proto.CompactTextString(m) }
func (*ClosedRoomNotify) ProtoMessage()               {}
func (*ClosedRoomNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *ClosedRoomNotify) GetHostnotifytext() string {
	if m != nil {
		return m.Hostnotifytext
	}
	return ""
}

func (m *ClosedRoomNotify) GetAudiencenotifytext() string {
	if m != nil {
		return m.Audiencenotifytext
	}
	return ""
}

type KaraokeSongInfo struct {
	Id         string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Resourceid string                     `protobuf:"bytes,2,opt,name=resourceid" json:"resourceid,omitempty"`
	SongName   string                     `protobuf:"bytes,3,opt,name=songName" json:"songName,omitempty"`
	Userinfo   *UserInfo                  `protobuf:"bytes,4,opt,name=userinfo" json:"userinfo,omitempty"`
	Status     KaraokeSongInfo_SONGSTATUS `protobuf:"varint,5,opt,name=status,enum=bilin.KaraokeSongInfo_SONGSTATUS" json:"status,omitempty"`
}

func (m *KaraokeSongInfo) Reset()                    { *m = KaraokeSongInfo{} }
func (m *KaraokeSongInfo) String() string            { return proto.CompactTextString(m) }
func (*KaraokeSongInfo) ProtoMessage()               {}
func (*KaraokeSongInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

func (m *KaraokeSongInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KaraokeSongInfo) GetResourceid() string {
	if m != nil {
		return m.Resourceid
	}
	return ""
}

func (m *KaraokeSongInfo) GetSongName() string {
	if m != nil {
		return m.SongName
	}
	return ""
}

func (m *KaraokeSongInfo) GetUserinfo() *UserInfo {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *KaraokeSongInfo) GetStatus() KaraokeSongInfo_SONGSTATUS {
	if m != nil {
		return m.Status
	}
	return KaraokeSongInfo_PREPARE
}

// 即将演唱的歌曲预告
type PreparationSongNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *PreparationSongNotify) Reset()                    { *m = PreparationSongNotify{} }
func (m *PreparationSongNotify) String() string            { return proto.CompactTextString(m) }
func (*PreparationSongNotify) ProtoMessage()               {}
func (*PreparationSongNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

func (m *PreparationSongNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// **点了歌曲
type AddSongNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *AddSongNotify) Reset()                    { *m = AddSongNotify{} }
func (m *AddSongNotify) String() string            { return proto.CompactTextString(m) }
func (*AddSongNotify) ProtoMessage()               {}
func (*AddSongNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *AddSongNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// 当前点歌列表
type SongsListNotify struct {
	Songs []*KaraokeSongInfo `protobuf:"bytes,1,rep,name=songs" json:"songs,omitempty"`
}

func (m *SongsListNotify) Reset()                    { *m = SongsListNotify{} }
func (m *SongsListNotify) String() string            { return proto.CompactTextString(m) }
func (*SongsListNotify) ProtoMessage()               {}
func (*SongsListNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *SongsListNotify) GetSongs() []*KaraokeSongInfo {
	if m != nil {
		return m.Songs
	}
	return nil
}

// 歌曲被主持人置顶
type SongSetTopNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *SongSetTopNotify) Reset()                    { *m = SongSetTopNotify{} }
func (m *SongSetTopNotify) String() string            { return proto.CompactTextString(m) }
func (*SongSetTopNotify) ProtoMessage()               {}
func (*SongSetTopNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

func (m *SongSetTopNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// 删除歌曲
type DelSongNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *DelSongNotify) Reset()                    { *m = DelSongNotify{} }
func (m *DelSongNotify) String() string            { return proto.CompactTextString(m) }
func (*DelSongNotify) ProtoMessage()               {}
func (*DelSongNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *DelSongNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// 主持人开始播放歌曲
type StartSingNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *StartSingNotify) Reset()                    { *m = StartSingNotify{} }
func (m *StartSingNotify) String() string            { return proto.CompactTextString(m) }
func (*StartSingNotify) ProtoMessage()               {}
func (*StartSingNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *StartSingNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// 暂停歌曲
type PauseSongNotify struct {
	Song *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *PauseSongNotify) Reset()                    { *m = PauseSongNotify{} }
func (m *PauseSongNotify) String() string            { return proto.CompactTextString(m) }
func (*PauseSongNotify) ProtoMessage()               {}
func (*PauseSongNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

func (m *PauseSongNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

// 结束歌曲
type TerminateSongNotify struct {
	Song      *KaraokeSongInfo `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
	Optuserid uint64           `protobuf:"varint,2,opt,name=optuserid" json:"optuserid,omitempty"`
}

func (m *TerminateSongNotify) Reset()                    { *m = TerminateSongNotify{} }
func (m *TerminateSongNotify) String() string            { return proto.CompactTextString(m) }
func (*TerminateSongNotify) ProtoMessage()               {}
func (*TerminateSongNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{27} }

func (m *TerminateSongNotify) GetSong() *KaraokeSongInfo {
	if m != nil {
		return m.Song
	}
	return nil
}

func (m *TerminateSongNotify) GetOptuserid() uint64 {
	if m != nil {
		return m.Optuserid
	}
	return 0
}

// 房间内所有K歌相关信息
type AllRoomKaraokeInfo struct {
	Songs []*KaraokeSongInfo `protobuf:"bytes,3,rep,name=songs" json:"songs,omitempty"`
}

func (m *AllRoomKaraokeInfo) Reset()                    { *m = AllRoomKaraokeInfo{} }
func (m *AllRoomKaraokeInfo) String() string            { return proto.CompactTextString(m) }
func (*AllRoomKaraokeInfo) ProtoMessage()               {}
func (*AllRoomKaraokeInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{28} }

func (m *AllRoomKaraokeInfo) GetSongs() []*KaraokeSongInfo {
	if m != nil {
		return m.Songs
	}
	return nil
}

// 主持人清空排麦列表
type ClearRoomPreparedAudienceNotify struct {
}

func (m *ClearRoomPreparedAudienceNotify) Reset()         { *m = ClearRoomPreparedAudienceNotify{} }
func (m *ClearRoomPreparedAudienceNotify) String() string { return proto.CompactTextString(m) }
func (*ClearRoomPreparedAudienceNotify) ProtoMessage()    {}
func (*ClearRoomPreparedAudienceNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{29}
}

type UserListChangeNotify struct {
	Enterusers []*UserInfo `protobuf:"bytes,1,rep,name=enterusers" json:"enterusers,omitempty"`
	Exituids   []uint64    `protobuf:"varint,2,rep,packed,name=exituids" json:"exituids,omitempty"`
}

func (m *UserListChangeNotify) Reset()                    { *m = UserListChangeNotify{} }
func (m *UserListChangeNotify) String() string            { return proto.CompactTextString(m) }
func (*UserListChangeNotify) ProtoMessage()               {}
func (*UserListChangeNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{30} }

func (m *UserListChangeNotify) GetEnterusers() []*UserInfo {
	if m != nil {
		return m.Enterusers
	}
	return nil
}

func (m *UserListChangeNotify) GetExituids() []uint64 {
	if m != nil {
		return m.Exituids
	}
	return nil
}

type UserChatTagSummary struct {
	Touserid    int64  `protobuf:"varint,1,opt,name=touserid" json:"touserid,omitempty"`
	Totaltagnum int64  `protobuf:"varint,2,opt,name=totaltagnum" json:"totaltagnum,omitempty"`
	Tagid       int64  `protobuf:"varint,3,opt,name=tagid" json:"tagid,omitempty"`
	Tagname     string `protobuf:"bytes,4,opt,name=tagname" json:"tagname,omitempty"`
	Tagcolor    string `protobuf:"bytes,5,opt,name=tagcolor" json:"tagcolor,omitempty"`
}

func (m *UserChatTagSummary) Reset()                    { *m = UserChatTagSummary{} }
func (m *UserChatTagSummary) String() string            { return proto.CompactTextString(m) }
func (*UserChatTagSummary) ProtoMessage()               {}
func (*UserChatTagSummary) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{31} }

func (m *UserChatTagSummary) GetTouserid() int64 {
	if m != nil {
		return m.Touserid
	}
	return 0
}

func (m *UserChatTagSummary) GetTotaltagnum() int64 {
	if m != nil {
		return m.Totaltagnum
	}
	return 0
}

func (m *UserChatTagSummary) GetTagid() int64 {
	if m != nil {
		return m.Tagid
	}
	return 0
}

func (m *UserChatTagSummary) GetTagname() string {
	if m != nil {
		return m.Tagname
	}
	return ""
}

func (m *UserChatTagSummary) GetTagcolor() string {
	if m != nil {
		return m.Tagcolor
	}
	return ""
}

type UserChatTagSummaryS struct {
	Summary []*UserChatTagSummary `protobuf:"bytes,1,rep,name=summary" json:"summary,omitempty"`
}

func (m *UserChatTagSummaryS) Reset()                    { *m = UserChatTagSummaryS{} }
func (m *UserChatTagSummaryS) String() string            { return proto.CompactTextString(m) }
func (*UserChatTagSummaryS) ProtoMessage()               {}
func (*UserChatTagSummaryS) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{32} }

func (m *UserChatTagSummaryS) GetSummary() []*UserChatTagSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

// 可选结果广播
type MatchUserInfo struct {
	Uid         uint32               `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Sex         int32                `protobuf:"varint,2,opt,name=sex" json:"sex,omitempty"`
	Postion     string               `protobuf:"bytes,3,opt,name=postion" json:"postion,omitempty"`
	Nick        string               `protobuf:"bytes,4,opt,name=nick" json:"nick,omitempty"`
	Avatar      string               `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	Isonline    int32                `protobuf:"varint,6,opt,name=isonline" json:"isonline,omitempty"`
	Age         int32                `protobuf:"varint,7,opt,name=age" json:"age,omitempty"`
	Gifs        []string             `protobuf:"bytes,8,rep,name=gifs" json:"gifs,omitempty"`
	UserTag     map[string]string    `protobuf:"bytes,9,rep,name=userTag" json:"userTag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserChatTag *UserChatTagSummaryS `protobuf:"bytes,10,opt,name=userChatTag" json:"userChatTag,omitempty"`
}

func (m *MatchUserInfo) Reset()                    { *m = MatchUserInfo{} }
func (m *MatchUserInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchUserInfo) ProtoMessage()               {}
func (*MatchUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{33} }

func (m *MatchUserInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MatchUserInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *MatchUserInfo) GetPostion() string {
	if m != nil {
		return m.Postion
	}
	return ""
}

func (m *MatchUserInfo) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *MatchUserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *MatchUserInfo) GetIsonline() int32 {
	if m != nil {
		return m.Isonline
	}
	return 0
}

func (m *MatchUserInfo) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *MatchUserInfo) GetGifs() []string {
	if m != nil {
		return m.Gifs
	}
	return nil
}

func (m *MatchUserInfo) GetUserTag() map[string]string {
	if m != nil {
		return m.UserTag
	}
	return nil
}

func (m *MatchUserInfo) GetUserChatTag() *UserChatTagSummaryS {
	if m != nil {
		return m.UserChatTag
	}
	return nil
}

type OptionalMatchingResult struct {
	Matchid   string           `protobuf:"bytes,1,opt,name=matchid" json:"matchid,omitempty"`
	Attendees []*MatchUserInfo `protobuf:"bytes,2,rep,name=attendees" json:"attendees,omitempty"`
}

func (m *OptionalMatchingResult) Reset()                    { *m = OptionalMatchingResult{} }
func (m *OptionalMatchingResult) String() string            { return proto.CompactTextString(m) }
func (*OptionalMatchingResult) ProtoMessage()               {}
func (*OptionalMatchingResult) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{34} }

func (m *OptionalMatchingResult) GetMatchid() string {
	if m != nil {
		return m.Matchid
	}
	return ""
}

func (m *OptionalMatchingResult) GetAttendees() []*MatchUserInfo {
	if m != nil {
		return m.Attendees
	}
	return nil
}

// 匹配结果广播
type MatchingResult struct {
	IsSelected bool `protobuf:"varint,1,opt,name=isSelected" json:"isSelected,omitempty"`
}

func (m *MatchingResult) Reset()                    { *m = MatchingResult{} }
func (m *MatchingResult) String() string            { return proto.CompactTextString(m) }
func (*MatchingResult) ProtoMessage()               {}
func (*MatchingResult) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{35} }

func (m *MatchingResult) GetIsSelected() bool {
	if m != nil {
		return m.IsSelected
	}
	return false
}

// 申请通话单播
type ApplyTalkingNotify struct {
	RequestUid uint32 `protobuf:"varint,1,opt,name=requestUid" json:"requestUid,omitempty"`
	Operation  uint32 `protobuf:"varint,2,opt,name=operation" json:"operation,omitempty"`
	Applyid    uint64 `protobuf:"varint,3,opt,name=applyid" json:"applyid,omitempty"`
}

func (m *ApplyTalkingNotify) Reset()                    { *m = ApplyTalkingNotify{} }
func (m *ApplyTalkingNotify) String() string            { return proto.CompactTextString(m) }
func (*ApplyTalkingNotify) ProtoMessage()               {}
func (*ApplyTalkingNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *ApplyTalkingNotify) GetRequestUid() uint32 {
	if m != nil {
		return m.RequestUid
	}
	return 0
}

func (m *ApplyTalkingNotify) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *ApplyTalkingNotify) GetApplyid() uint64 {
	if m != nil {
		return m.Applyid
	}
	return 0
}

// 查询,报告通话状态单播
type ReportTalkingNotify struct {
	RequestUid uint32 `protobuf:"varint,1,opt,name=requestUid" json:"requestUid,omitempty"`
	Status     uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Reportid   uint64 `protobuf:"varint,3,opt,name=reportid" json:"reportid,omitempty"`
}

func (m *ReportTalkingNotify) Reset()                    { *m = ReportTalkingNotify{} }
func (m *ReportTalkingNotify) String() string            { return proto.CompactTextString(m) }
func (*ReportTalkingNotify) ProtoMessage()               {}
func (*ReportTalkingNotify) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{37} }

func (m *ReportTalkingNotify) GetRequestUid() uint32 {
	if m != nil {
		return m.RequestUid
	}
	return 0
}

func (m *ReportTalkingNotify) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReportTalkingNotify) GetReportid() uint64 {
	if m != nil {
		return m.Reportid
	}
	return 0
}

// 通话操作广播
type TalkingAction struct {
	Operation    uint32 `protobuf:"varint,1,opt,name=operation" json:"operation,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Cid          uint32 `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	CancelReason uint32 `protobuf:"varint,4,opt,name=cancelReason" json:"cancelReason,omitempty"`
}

func (m *TalkingAction) Reset()                    { *m = TalkingAction{} }
func (m *TalkingAction) String() string            { return proto.CompactTextString(m) }
func (*TalkingAction) ProtoMessage()               {}
func (*TalkingAction) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{38} }

func (m *TalkingAction) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *TalkingAction) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TalkingAction) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *TalkingAction) GetCancelReason() uint32 {
	if m != nil {
		return m.CancelReason
	}
	return 0
}

// 在线人数广播
type BroadcastOnlineUserCount struct {
	OnlineUserCount uint32 `protobuf:"varint,1,opt,name=onlineUserCount" json:"onlineUserCount,omitempty"`
	MaleCount       uint32 `protobuf:"varint,3,opt,name=maleCount" json:"maleCount,omitempty"`
	FemaleCount     uint32 `protobuf:"varint,4,opt,name=femaleCount" json:"femaleCount,omitempty"`
}

func (m *BroadcastOnlineUserCount) Reset()                    { *m = BroadcastOnlineUserCount{} }
func (m *BroadcastOnlineUserCount) String() string            { return proto.CompactTextString(m) }
func (*BroadcastOnlineUserCount) ProtoMessage()               {}
func (*BroadcastOnlineUserCount) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{39} }

func (m *BroadcastOnlineUserCount) GetOnlineUserCount() uint32 {
	if m != nil {
		return m.OnlineUserCount
	}
	return 0
}

func (m *BroadcastOnlineUserCount) GetMaleCount() uint32 {
	if m != nil {
		return m.MaleCount
	}
	return 0
}

func (m *BroadcastOnlineUserCount) GetFemaleCount() uint32 {
	if m != nil {
		return m.FemaleCount
	}
	return 0
}

type SendFloweBC struct {
	FromUserid uint32 `protobuf:"varint,1,opt,name=fromUserid" json:"fromUserid,omitempty"`
	Count      uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *SendFloweBC) Reset()                    { *m = SendFloweBC{} }
func (m *SendFloweBC) String() string            { return proto.CompactTextString(m) }
func (*SendFloweBC) ProtoMessage()               {}
func (*SendFloweBC) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{40} }

func (m *SendFloweBC) GetFromUserid() uint32 {
	if m != nil {
		return m.FromUserid
	}
	return 0
}

func (m *SendFloweBC) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 麦上大表情广播
type BigExpressionBroadcast struct {
	FromUid       uint64   `protobuf:"varint,1,opt,name=from_uid,json=fromUid" json:"from_uid,omitempty"`
	Id            uint32   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	ResultIndex   uint32   `protobuf:"varint,3,opt,name=result_index,json=resultIndex" json:"result_index,omitempty"`
	ResultIndexes []uint32 `protobuf:"varint,4,rep,packed,name=result_indexes,json=resultIndexes" json:"result_indexes,omitempty"`
}

func (m *BigExpressionBroadcast) Reset()                    { *m = BigExpressionBroadcast{} }
func (m *BigExpressionBroadcast) String() string            { return proto.CompactTextString(m) }
func (*BigExpressionBroadcast) ProtoMessage()               {}
func (*BigExpressionBroadcast) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{41} }

func (m *BigExpressionBroadcast) GetFromUid() uint64 {
	if m != nil {
		return m.FromUid
	}
	return 0
}

func (m *BigExpressionBroadcast) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BigExpressionBroadcast) GetResultIndex() uint32 {
	if m != nil {
		return m.ResultIndex
	}
	return 0
}

func (m *BigExpressionBroadcast) GetResultIndexes() []uint32 {
	if m != nil {
		return m.ResultIndexes
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerPush)(nil), "bilin.ServerPush")
	proto.RegisterType((*BcMessageBody)(nil), "bilin.BcMessageBody")
	proto.RegisterType((*CommonMessageBody)(nil), "bilin.CommonMessageBody")
	proto.RegisterType((*PushProxyReqFromJava)(nil), "bilin.PushProxyReqFromJava")
	proto.RegisterType((*BaseRoomInfo)(nil), "bilin.BaseRoomInfo")
	proto.RegisterType((*RoomBizInfo)(nil), "bilin.RoomBizInfo")
	proto.RegisterType((*AllRoomInfo)(nil), "bilin.AllRoomInfo")
	proto.RegisterType((*RoomMickListInfo)(nil), "bilin.RoomMickListInfo")
	proto.RegisterType((*RoomUserListInfo)(nil), "bilin.RoomUserListInfo")
	proto.RegisterType((*RoomForbiddenList)(nil), "bilin.RoomForbiddenList")
	proto.RegisterType((*UserInfo)(nil), "bilin.UserInfo")
	proto.RegisterType((*UserPrivilegeInfoInRoom)(nil), "bilin.UserPrivilegeInfoInRoom")
	proto.RegisterType((*MikeInfo)(nil), "bilin.MikeInfo")
	proto.RegisterType((*PraiseNotify)(nil), "bilin.PraiseNotify")
	proto.RegisterType((*MuteNotify)(nil), "bilin.MuteNotify")
	proto.RegisterType((*KickNotify)(nil), "bilin.KickNotify")
	proto.RegisterType((*MikeNotify)(nil), "bilin.MikeNotify")
	proto.RegisterType((*ForbiddenNotify)(nil), "bilin.ForbiddenNotify")
	proto.RegisterType((*ClosedRoomNotify)(nil), "bilin.ClosedRoomNotify")
	proto.RegisterType((*KaraokeSongInfo)(nil), "bilin.KaraokeSongInfo")
	proto.RegisterType((*PreparationSongNotify)(nil), "bilin.PreparationSongNotify")
	proto.RegisterType((*AddSongNotify)(nil), "bilin.AddSongNotify")
	proto.RegisterType((*SongsListNotify)(nil), "bilin.SongsListNotify")
	proto.RegisterType((*SongSetTopNotify)(nil), "bilin.SongSetTopNotify")
	proto.RegisterType((*DelSongNotify)(nil), "bilin.DelSongNotify")
	proto.RegisterType((*StartSingNotify)(nil), "bilin.StartSingNotify")
	proto.RegisterType((*PauseSongNotify)(nil), "bilin.PauseSongNotify")
	proto.RegisterType((*TerminateSongNotify)(nil), "bilin.TerminateSongNotify")
	proto.RegisterType((*AllRoomKaraokeInfo)(nil), "bilin.AllRoomKaraokeInfo")
	proto.RegisterType((*ClearRoomPreparedAudienceNotify)(nil), "bilin.ClearRoomPreparedAudienceNotify")
	proto.RegisterType((*UserListChangeNotify)(nil), "bilin.UserListChangeNotify")
	proto.RegisterType((*UserChatTagSummary)(nil), "bilin.UserChatTagSummary")
	proto.RegisterType((*UserChatTagSummaryS)(nil), "bilin.UserChatTagSummaryS")
	proto.RegisterType((*MatchUserInfo)(nil), "bilin.MatchUserInfo")
	proto.RegisterType((*OptionalMatchingResult)(nil), "bilin.OptionalMatchingResult")
	proto.RegisterType((*MatchingResult)(nil), "bilin.MatchingResult")
	proto.RegisterType((*ApplyTalkingNotify)(nil), "bilin.ApplyTalkingNotify")
	proto.RegisterType((*ReportTalkingNotify)(nil), "bilin.ReportTalkingNotify")
	proto.RegisterType((*TalkingAction)(nil), "bilin.TalkingAction")
	proto.RegisterType((*BroadcastOnlineUserCount)(nil), "bilin.BroadcastOnlineUserCount")
	proto.RegisterType((*SendFloweBC)(nil), "bilin.SendFloweBC")
	proto.RegisterType((*BigExpressionBroadcast)(nil), "bilin.BigExpressionBroadcast")
	proto.RegisterEnum("bilin.MaxType", MaxType_name, MaxType_value)
	proto.RegisterEnum("bilin.MinType_PUSH", MinType_PUSH_name, MinType_PUSH_value)
	proto.RegisterEnum("bilin.MinType_BC", MinType_BC_name, MinType_BC_value)
	proto.RegisterEnum("bilin.MinType_CC", MinType_CC_name, MinType_CC_value)
	proto.RegisterEnum("bilin.MinType_COMMON", MinType_COMMON_name, MinType_COMMON_value)
	proto.RegisterEnum("bilin.USERFROM", USERFROM_name, USERFROM_value)
	proto.RegisterEnum("bilin.MinType_MATCH", MinType_MATCH_name, MinType_MATCH_value)
	proto.RegisterEnum("bilin.MinType_FLOWER", MinType_FLOWER_name, MinType_FLOWER_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_ROOMSTATUS", BaseRoomInfo_ROOMSTATUS_name, BaseRoomInfo_ROOMSTATUS_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_ROOMTYPE", BaseRoomInfo_ROOMTYPE_name, BaseRoomInfo_ROOMTYPE_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_LINKSTATUS", BaseRoomInfo_LINKSTATUS_name, BaseRoomInfo_LINKSTATUS_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_AUTOLINK", BaseRoomInfo_AUTOLINK_name, BaseRoomInfo_AUTOLINK_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_MAIXUSWITCH", BaseRoomInfo_MAIXUSWITCH_name, BaseRoomInfo_MAIXUSWITCH_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_KARAOKESWITCH", BaseRoomInfo_KARAOKESWITCH_name, BaseRoomInfo_KARAOKESWITCH_value)
	proto.RegisterEnum("bilin.BaseRoomInfo_RELATIONLISTESWITCH", BaseRoomInfo_RELATIONLISTESWITCH_name, BaseRoomInfo_RELATIONLISTESWITCH_value)
	proto.RegisterEnum("bilin.MikeInfo_MIKEWHEATSTATUS", MikeInfo_MIKEWHEATSTATUS_name, MikeInfo_MIKEWHEATSTATUS_value)
	proto.RegisterEnum("bilin.KaraokeSongInfo_SONGSTATUS", KaraokeSongInfo_SONGSTATUS_name, KaraokeSongInfo_SONGSTATUS_value)
}

func init() { proto.RegisterFile("push.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 3951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x5a, 0xcd, 0x73, 0x23, 0x49,
	0x56, 0x6f, 0xc9, 0xf2, 0x87, 0x9e, 0x2c, 0x2b, 0x9d, 0x76, 0xdb, 0xea, 0x9e, 0x9e, 0xb6, 0xbb,
	0x76, 0x67, 0xc6, 0xeb, 0x9d, 0xf5, 0x2e, 0x3d, 0xc1, 0x30, 0xcc, 0x2c, 0x43, 0x48, 0xa5, 0xb2,
	0x5d, 0x6b, 0x49, 0x25, 0xb2, 0x4a, 0xd3, 0x33, 0x27, 0x45, 0xb5, 0x94, 0x96, 0x0b, 0x4b, 0x55,
	0xda, 0xaa, 0x92, 0xbb, 0xbd, 0x57, 0xb8, 0xec, 0x81, 0x03, 0xc1, 0x9d, 0x08, 0x3e, 0x96, 0xd8,
	0x23, 0x27, 0x02, 0x96, 0x6f, 0xf8, 0x07, 0x60, 0x81, 0x88, 0xdd, 0x3d, 0x11, 0x04, 0x1c, 0x80,
	0x05, 0x76, 0x81, 0x03, 0x47, 0xe2, 0x65, 0xd6, 0xa7, 0x6c, 0xef, 0xec, 0xf4, 0xad, 0xf2, 0xf7,
	0x5e, 0xbe, 0xf7, 0xf2, 0xbd, 0x97, 0x2f, 0x5f, 0xa6, 0x04, 0x30, 0x9b, 0x07, 0x17, 0x47, 0x33,
	0xdf, 0x0b, 0x3d, 0xba, 0xfc, 0xdc, 0x99, 0x38, 0xae, 0xf2, 0xed, 0x22, 0x80, 0xc9, 0xfd, 0x2b,
	0xee, 0xf7, 0xe6, 0xc1, 0x05, 0xdd, 0x87, 0xca, 0x94, 0x07, 0x81, 0x3d, 0xe6, 0xd6, 0xf5, 0x8c,
	0xd7, 0x0b, 0xfb, 0x85, 0x83, 0x4d, 0x96, 0x85, 0xe8, 0x63, 0x29, 0xa5, 0x39, 0x3f, 0x3f, 0xe7,
	0x7e, 0xbd, 0xb8, 0x5f, 0x38, 0x58, 0x67, 0x19, 0x84, 0xbe, 0x07, 0xab, 0x17, 0xdc, 0x1e, 0x71,
	0x3f, 0xa8, 0x2f, 0xed, 0x2f, 0x1d, 0x54, 0x9e, 0x3e, 0x3e, 0x12, 0x9a, 0x8e, 0x52, 0x2d, 0x47,
	0xa7, 0x92, 0x41, 0x73, 0x43, 0xff, 0x9a, 0xc5, 0xec, 0x19, 0xdd, 0x2d, 0x1e, 0x0c, 0xeb, 0xa5,
	0xfd, 0xc2, 0x41, 0x99, 0x65, 0x21, 0xe4, 0x08, 0xb8, 0x7f, 0xe5, 0x0c, 0x79, 0xd7, 0x9e, 0xf2,
	0xfa, 0xb2, 0xe4, 0xc8, 0x40, 0x68, 0xdd, 0x94, 0x87, 0x17, 0xde, 0x48, 0x30, 0xac, 0x08, 0x86,
	0x0c, 0xf2, 0xf0, 0x7d, 0x58, 0xcf, 0x2a, 0xa7, 0x04, 0x96, 0x2e, 0xf9, 0xb5, 0x58, 0x67, 0x99,
	0xe1, 0x27, 0xdd, 0x86, 0xe5, 0x2b, 0x7b, 0x32, 0xe7, 0x62, 0x69, 0x65, 0x26, 0x07, 0xef, 0x17,
	0xdf, 0x2b, 0x28, 0x3f, 0x07, 0xd5, 0xe6, 0xb0, 0x23, 0xcd, 0x69, 0x7a, 0xa3, 0x6b, 0x4a, 0xa1,
	0x14, 0xc6, 0x5e, 0x5a, 0x66, 0xe2, 0x1b, 0xb1, 0x91, 0x1d, 0xda, 0x91, 0x63, 0xc4, 0xb7, 0xf2,
	0x01, 0x6c, 0xaa, 0xde, 0x74, 0xea, 0xb9, 0xaf, 0x32, 0xf9, 0x3b, 0x05, 0xd8, 0x46, 0xa7, 0xf5,
	0x7c, 0xef, 0xe5, 0x35, 0xe3, 0x5f, 0x3f, 0xf6, 0xbd, 0xe9, 0xd7, 0xec, 0x2b, 0x9b, 0xbe, 0x06,
	0xe5, 0xe7, 0xf3, 0xc0, 0x19, 0x64, 0xa4, 0xac, 0x21, 0x20, 0xa2, 0xb4, 0x07, 0x95, 0x73, 0xdf,
	0x9b, 0x0e, 0xe6, 0x01, 0xf7, 0x9d, 0x91, 0x10, 0xb8, 0xc4, 0x00, 0xa1, 0xbe, 0x40, 0xe8, 0xeb,
	0x00, 0xa1, 0x33, 0x0b, 0x06, 0x43, 0x6f, 0xee, 0x86, 0xf5, 0x25, 0x31, 0xbd, 0x8c, 0x88, 0x8a,
	0x00, 0x92, 0x2f, 0xec, 0x2b, 0x3e, 0xb8, 0xf2, 0x9c, 0x21, 0x17, 0xa1, 0x58, 0x66, 0x65, 0x44,
	0x3e, 0x42, 0x00, 0x0d, 0x7d, 0xee, 0x8d, 0xae, 0xa3, 0x08, 0x88, 0x6f, 0xc4, 0x66, 0xb6, 0x6f,
	0x47, 0x4e, 0x17, 0xdf, 0xca, 0xb7, 0x01, 0xd6, 0x9b, 0x76, 0xc0, 0x99, 0xe7, 0x4d, 0x75, 0xf7,
	0xdc, 0xa3, 0x3b, 0xb0, 0xe2, 0x7b, 0xde, 0xd4, 0x19, 0x09, 0x8b, 0x4b, 0x2c, 0x1a, 0xd1, 0x0f,
	0x01, 0xf0, 0x2b, 0x08, 0xed, 0x70, 0x1e, 0x08, 0x73, 0x37, 0x92, 0xc4, 0xc9, 0x0a, 0x38, 0x62,
	0x86, 0xd1, 0x31, 0xad, 0x86, 0xd5, 0x37, 0x59, 0x66, 0x06, 0x7d, 0x0f, 0xd6, 0x70, 0x24, 0x7c,
	0xb1, 0x24, 0x66, 0x3f, 0xba, 0x6b, 0xb6, 0xf5, 0x49, 0x4f, 0x63, 0x09, 0x37, 0x6a, 0x9e, 0x38,
	0xee, 0x65, 0xa4, 0xb9, 0x74, 0xb7, 0xe6, 0xb6, 0xde, 0x3d, 0x8b, 0x35, 0xa7, 0x33, 0x30, 0x5f,
	0x42, 0x27, 0x9c, 0xc4, 0xd9, 0x28, 0x07, 0xf4, 0x00, 0x6a, 0xa1, 0x17, 0xda, 0x93, 0xa9, 0x33,
	0xbc, 0x74, 0xe7, 0xd3, 0xe7, 0xdc, 0x17, 0x7e, 0xa9, 0xb2, 0x45, 0x98, 0x7e, 0x0e, 0x4a, 0x17,
	0x5e, 0x10, 0xd6, 0x57, 0xf7, 0x0b, 0x07, 0x95, 0xa7, 0xb5, 0x48, 0x33, 0x46, 0x09, 0xb5, 0x32,
	0x41, 0xa4, 0x87, 0x40, 0xa6, 0xce, 0x25, 0x7f, 0x61, 0x3b, 0xa1, 0xe3, 0x8e, 0x31, 0xa8, 0x41,
	0x7d, 0x4d, 0xc8, 0xbb, 0x81, 0x23, 0xaf, 0xd0, 0x21, 0x46, 0x91, 0xee, 0xb2, 0xe4, 0x5d, 0xc4,
	0xe9, 0x23, 0x28, 0xa3, 0x23, 0x30, 0x65, 0x9e, 0xd6, 0x41, 0x46, 0x39, 0x01, 0xe8, 0x9b, 0xb0,
	0x81, 0x03, 0xd5, 0x0e, 0xf9, 0xd8, 0xf3, 0xaf, 0xf5, 0x56, 0xbd, 0x22, 0x58, 0x16, 0x50, 0xd4,
	0x88, 0x48, 0x8f, 0xbb, 0x23, 0xdb, 0x0d, 0xdb, 0xfc, 0x8a, 0x4f, 0xea, 0xeb, 0x82, 0xf3, 0x06,
	0x8e, 0x5b, 0x18, 0x57, 0xd4, 0xc4, 0x55, 0xea, 0xad, 0x7a, 0x55, 0x24, 0x66, 0x16, 0x42, 0xad,
	0x33, 0x7b, 0xcc, 0xd1, 0x03, 0x32, 0x19, 0xeb, 0x1b, 0x52, 0x6b, 0x1e, 0xc5, 0x90, 0xdb, 0xf3,
	0xd0, 0xc3, 0x50, 0xd4, 0x6b, 0x77, 0x87, 0xbc, 0xd1, 0xb7, 0x0c, 0x0c, 0x1d, 0x4b, 0xb8, 0x69,
	0x03, 0x2a, 0x53, 0xdb, 0x79, 0x39, 0x0f, 0x5e, 0x38, 0xe1, 0xf0, 0xa2, 0x4e, 0xc4, 0xe4, 0xbd,
	0xdb, 0x26, 0x77, 0x1a, 0xfa, 0xc7, 0x7d, 0xf3, 0x99, 0x6e, 0xa9, 0xa7, 0x2c, 0x3b, 0x87, 0x9e,
	0x40, 0xf5, 0xd2, 0xf6, 0x6d, 0xef, 0x92, 0x47, 0x42, 0x36, 0x85, 0x90, 0x27, 0xb7, 0x09, 0x39,
	0x6b, 0xb0, 0x86, 0x71, 0xa6, 0x45, 0x62, 0xf2, 0xf3, 0xe8, 0x33, 0xa0, 0x3e, 0x9f, 0xd8, 0xa1,
	0xe3, 0xb9, 0x13, 0x27, 0x08, 0x23, 0x69, 0x54, 0x48, 0x7b, 0xeb, 0xd6, 0x14, 0xd6, 0xda, 0x0d,
	0x4b, 0x37, 0xba, 0x6d, 0xdd, 0xb4, 0x62, 0x99, 0xb7, 0x88, 0xa0, 0x0f, 0x61, 0xcd, 0x7b, 0xe1,
	0x72, 0x7f, 0xee, 0x8c, 0xea, 0x5b, 0x62, 0xaf, 0x25, 0x63, 0xe5, 0x67, 0x00, 0xd2, 0x7d, 0x44,
	0xd7, 0xa0, 0x64, 0xf4, 0xb4, 0x2e, 0xb9, 0x47, 0x01, 0x56, 0xd4, 0xb6, 0x61, 0x6a, 0x2d, 0x52,
	0xa0, 0x55, 0x28, 0x1f, 0x1b, 0xac, 0xa9, 0xb7, 0x5a, 0x5a, 0x97, 0x14, 0x95, 0x4f, 0x60, 0x2d,
	0xde, 0x3c, 0x74, 0x0b, 0x6a, 0xf1, 0xf7, 0xa0, 0xdf, 0x3d, 0xeb, 0x1a, 0xcf, 0xc8, 0x3d, 0x4a,
	0x61, 0x23, 0x01, 0xad, 0x53, 0xa6, 0x69, 0xa4, 0x40, 0x09, 0xac, 0x27, 0x98, 0xa9, 0x7f, 0x4c,
	0x8a, 0x39, 0x2e, 0xd6, 0x68, 0xe9, 0x06, 0x59, 0x52, 0xbe, 0x00, 0x90, 0xee, 0x2d, 0xd4, 0x2b,
	0x6c, 0x40, 0x88, 0xdc, 0xa3, 0xeb, 0xb0, 0x86, 0xc6, 0x89, 0x51, 0x41, 0x79, 0x07, 0xd6, 0xe2,
	0x78, 0xa2, 0x15, 0x82, 0x11, 0x01, 0xcb, 0xe8, 0xe8, 0x67, 0x9a, 0xb4, 0x02, 0xd9, 0x33, 0x58,
	0x41, 0x79, 0x1b, 0x2a, 0x99, 0x38, 0xd2, 0x0d, 0x00, 0x31, 0x4f, 0x60, 0xe4, 0x1e, 0x2a, 0xc4,
	0x29, 0x72, 0x58, 0x50, 0x9e, 0x42, 0x35, 0x17, 0x30, 0x5c, 0x84, 0xe0, 0x8f, 0x50, 0x72, 0x8f,
	0xd6, 0xa0, 0x82, 0x33, 0x62, 0xa0, 0xa0, 0x34, 0x61, 0xeb, 0x96, 0xb0, 0xd0, 0xfb, 0xb0, 0x29,
	0x66, 0x66, 0x69, 0xe4, 0x1e, 0xdd, 0x06, 0x82, 0xd3, 0x73, 0x68, 0x41, 0xf9, 0x12, 0x54, 0x30,
	0xc6, 0x4d, 0xe7, 0x1b, 0xa2, 0x50, 0x3e, 0x06, 0x98, 0x78, 0xc3, 0x4b, 0x53, 0x96, 0xa5, 0x82,
	0xd8, 0xbf, 0x19, 0x44, 0xf9, 0x8d, 0x25, 0xa8, 0x34, 0x26, 0x93, 0xa4, 0xb0, 0x7e, 0x19, 0xd6,
	0x9e, 0xdb, 0x01, 0x77, 0xdc, 0x73, 0x4f, 0x70, 0x57, 0x9e, 0x6e, 0xdd, 0x92, 0x3d, 0x2c, 0x61,
	0xa2, 0x3f, 0x0b, 0x55, 0x7b, 0x3e, 0x72, 0xb8, 0x3b, 0xe4, 0xb2, 0x9e, 0x14, 0xc5, 0x69, 0x7d,
	0xa3, 0x00, 0xe5, 0xb9, 0xe8, 0x17, 0x61, 0x0d, 0x2b, 0x8e, 0xd0, 0xb3, 0x94, 0x9b, 0xd1, 0x71,
	0x2e, 0xb9, 0xd4, 0x11, 0x33, 0xd0, 0x0f, 0xa1, 0x7a, 0xee, 0xf9, 0xcf, 0x9d, 0xd1, 0x88, 0xbb,
	0x73, 0x67, 0x24, 0xcb, 0x6b, 0xe5, 0x69, 0x3d, 0x9a, 0x81, 0x56, 0x1d, 0xc7, 0xf4, 0xb6, 0x13,
	0x84, 0x2c, 0xcf, 0x4e, 0x5b, 0x50, 0x9d, 0xf9, 0xce, 0x95, 0x33, 0xe1, 0x63, 0x21, 0x5a, 0xd4,
	0xd8, 0xb4, 0xa3, 0x40, 0x1b, 0x7b, 0x59, 0xba, 0xee, 0xa2, 0x48, 0x96, 0x9f, 0x44, 0x3f, 0x80,
	0x4a, 0xb4, 0xe7, 0x84, 0xd5, 0x2b, 0x42, 0xc6, 0x83, 0x48, 0x46, 0xe4, 0xc3, 0x33, 0xc9, 0x20,
	0xec, 0xcf, 0x72, 0xd3, 0xb7, 0x61, 0xf5, 0xb9, 0xf3, 0x0d, 0x31, 0x51, 0x56, 0x68, 0x9a, 0x31,
	0x3e, 0x0a, 0x16, 0x8b, 0x59, 0x94, 0x6f, 0x15, 0x80, 0x20, 0xa1, 0xe3, 0x0c, 0x2f, 0x71, 0x41,
	0x42, 0x7f, 0xd6, 0x65, 0xeb, 0x9f, 0xe6, 0xb2, 0xdb, 0x2a, 0x7d, 0xf5, 0x8e, 0x4a, 0x9f, 0x3d,
	0xf4, 0x36, 0x3e, 0xcb, 0xa1, 0xa7, 0xcc, 0xa5, 0x99, 0xe8, 0xc0, 0xc4, 0xcc, 0xdb, 0xce, 0x8d,
	0xc2, 0x1d, 0xe7, 0xc6, 0x8d, 0xe4, 0xa9, 0xfc, 0x34, 0xc9, 0xa3, 0xbc, 0x05, 0x9b, 0x37, 0x62,
	0x8e, 0x7d, 0x83, 0xc8, 0x8d, 0xc2, 0xfe, 0xd2, 0x41, 0x89, 0x89, 0x6f, 0xe5, 0x9b, 0x45, 0x58,
	0x8b, 0x85, 0x60, 0xcf, 0x10, 0xb5, 0x31, 0x51, 0xcf, 0x20, 0x47, 0x38, 0xd1, 0x75, 0x86, 0x97,
	0x51, 0xa3, 0x26, 0xbe, 0xf1, 0x40, 0xb3, 0xaf, 0xec, 0xd0, 0xf6, 0xe7, 0xfe, 0x44, 0x34, 0x02,
	0x65, 0x96, 0x02, 0x48, 0x3d, 0xb7, 0xdd, 0x40, 0xf6, 0x3c, 0x25, 0xb1, 0xb6, 0x14, 0xc0, 0x93,
	0x18, 0x1b, 0x24, 0x91, 0x64, 0x1b, 0xe9, 0x5a, 0x4c, 0x8d, 0x1d, 0x33, 0xa3, 0xc3, 0x04, 0x11,
	0x95, 0x4e, 0xe7, 0x21, 0x8f, 0x4e, 0x73, 0xf1, 0x8d, 0x4d, 0x64, 0xc0, 0x5f, 0x8a, 0xfc, 0xa8,
	0x32, 0xfc, 0x44, 0xc4, 0x1e, 0xf3, 0xe8, 0x88, 0xc6, 0x4f, 0x2c, 0xc7, 0x43, 0x27, 0xbc, 0x16,
	0x6d, 0x69, 0x59, 0xd8, 0x95, 0x8c, 0xd1, 0xac, 0xc0, 0x19, 0xbb, 0x76, 0x38, 0xf7, 0xb9, 0x38,
	0x85, 0xcb, 0x2c, 0x05, 0x14, 0x0f, 0x76, 0xef, 0x48, 0x74, 0x14, 0x8a, 0xcd, 0xf3, 0x98, 0xdb,
	0x7e, 0xd4, 0xc2, 0x26, 0x63, 0xa4, 0x4d, 0xf9, 0xc8, 0x9e, 0xa0, 0x23, 0xa4, 0x87, 0x92, 0x31,
	0x2a, 0x14, 0xdf, 0x21, 0x7f, 0x19, 0xc6, 0x5e, 0x4a, 0x00, 0xe5, 0xbb, 0x05, 0x58, 0x8b, 0x33,
	0x93, 0xea, 0x50, 0x13, 0x79, 0x77, 0xc1, 0xed, 0x30, 0x48, 0x8b, 0x51, 0x7a, 0x5e, 0xc6, 0x9c,
	0x47, 0x58, 0x6d, 0x9f, 0x9d, 0x6a, 0x0d, 0x2b, 0x6a, 0x92, 0x16, 0xe7, 0x09, 0xad, 0x22, 0xcd,
	0x47, 0xfc, 0xa5, 0x30, 0xa9, 0xca, 0x52, 0x00, 0x77, 0x89, 0x88, 0x2b, 0xee, 0x12, 0xb8, 0xbd,
	0x17, 0x4a, 0x18, 0x94, 0xaf, 0x40, 0x6d, 0x41, 0x1d, 0x2d, 0xc3, 0xb2, 0xd6, 0xe9, 0x59, 0x9f,
	0x90, 0x7b, 0x78, 0xa0, 0xf5, 0xe5, 0x21, 0xb6, 0x06, 0xa5, 0xb6, 0xa1, 0x9e, 0x91, 0xa2, 0xf2,
	0x79, 0x58, 0xef, 0xf9, 0xb6, 0x13, 0xf0, 0xae, 0x17, 0x3a, 0xe7, 0xa2, 0xcd, 0x97, 0x69, 0x20,
	0x53, 0x5c, 0x0e, 0x94, 0xaf, 0x02, 0x74, 0xe6, 0x61, 0xcc, 0xf3, 0x08, 0xca, 0xde, 0x2c, 0xcc,
	0xe5, 0x5e, 0x0a, 0x60, 0x8c, 0xbd, 0x59, 0x18, 0x2d, 0x04, 0x3f, 0x95, 0x43, 0x80, 0x33, 0x67,
	0x78, 0x79, 0xdb, 0xec, 0xe2, 0xc2, 0x6c, 0xa1, 0xc9, 0xb9, 0x7c, 0x55, 0x4d, 0x0d, 0xa8, 0x25,
	0x9b, 0xe8, 0x15, 0x45, 0xfc, 0x32, 0x10, 0x75, 0xe2, 0x05, 0x7c, 0x84, 0x99, 0x14, 0xc9, 0x78,
	0x13, 0x36, 0xb0, 0x13, 0x73, 0xc5, 0x48, 0x24, 0x87, 0xcc, 0xaa, 0x05, 0x94, 0x1e, 0x01, 0x8d,
	0x37, 0x76, 0x86, 0x57, 0x66, 0xd9, 0x2d, 0x14, 0xe5, 0xff, 0x0a, 0x50, 0x8b, 0x2a, 0xac, 0xe9,
	0xb9, 0x63, 0x91, 0x58, 0x1b, 0x50, 0x8c, 0x0c, 0x2d, 0xb3, 0xa2, 0x33, 0xc2, 0x03, 0xcf, 0xe7,
	0x81, 0x37, 0xf7, 0x87, 0x3c, 0xf2, 0x57, 0x99, 0x65, 0x10, 0xcc, 0xe7, 0xc0, 0x73, 0xc7, 0x62,
	0x03, 0xc9, 0x94, 0x4d, 0xc6, 0xb9, 0xdc, 0x29, 0x7d, 0x4a, 0xee, 0xd0, 0x9f, 0x87, 0x95, 0x28,
	0x91, 0x97, 0x73, 0x3d, 0xdb, 0x82, 0x81, 0x47, 0xa6, 0xd1, 0x3d, 0x89, 0x52, 0x39, 0x9a, 0x80,
	0x7d, 0x53, 0x8a, 0xd2, 0x0a, 0xac, 0xf6, 0x98, 0xd6, 0x6b, 0x30, 0xec, 0x09, 0x2a, 0xb0, 0x6a,
	0xea, 0xdd, 0x13, 0xbd, 0x7b, 0x42, 0x0a, 0x98, 0x8b, 0xbd, 0x46, 0xdf, 0xd4, 0x48, 0x51, 0x51,
	0xe1, 0x7e, 0xcf, 0xe7, 0x78, 0x19, 0xc2, 0xfe, 0x0c, 0x85, 0x47, 0xbe, 0x3e, 0x84, 0x12, 0xda,
	0x1f, 0x1d, 0xd6, 0x3b, 0xb7, 0x1b, 0xc1, 0x04, 0x8f, 0xf2, 0x01, 0x54, 0x1b, 0xa3, 0xd1, 0x2b,
	0x4e, 0xfe, 0x45, 0xa8, 0x21, 0x12, 0x60, 0xb1, 0x8d, 0xa6, 0xbf, 0x0d, 0xcb, 0x48, 0x92, 0x35,
	0xf7, 0xee, 0xf9, 0x92, 0x49, 0xf9, 0x10, 0x08, 0x42, 0x26, 0x0f, 0x2d, 0x6f, 0xf6, 0x6a, 0xd6,
	0xb7, 0xf8, 0xe4, 0x15, 0xad, 0xff, 0x05, 0xa8, 0x99, 0xa1, 0xed, 0x87, 0xa6, 0xf3, 0xaa, 0xd3,
	0x7b, 0xf6, 0x3c, 0xe0, 0xaf, 0xa8, 0x7d, 0x00, 0x5b, 0x16, 0xf7, 0xa7, 0x8e, 0x6b, 0x87, 0xaf,
	0x28, 0xe2, 0x53, 0xca, 0x40, 0x13, 0xe8, 0xcd, 0x0e, 0x24, 0x8d, 0xcf, 0xd2, 0x4f, 0x13, 0x9f,
	0x27, 0xb0, 0xa7, 0x4e, 0xb8, 0xed, 0xa3, 0x14, 0x99, 0x6b, 0x7c, 0xd4, 0x88, 0x36, 0xa1, 0x34,
	0x58, 0x19, 0xc2, 0x76, 0x7c, 0xd6, 0xab, 0x17, 0xb6, 0x3b, 0x8e, 0xeb, 0xce, 0x97, 0x01, 0xb8,
	0x1b, 0x72, 0x5f, 0x1e, 0xe2, 0x85, 0xdb, 0x0f, 0xf1, 0x0c, 0x0b, 0xee, 0x42, 0xfe, 0xd2, 0x09,
	0xc5, 0x81, 0x5d, 0x14, 0x07, 0x76, 0x32, 0x56, 0x7e, 0xb3, 0x00, 0x14, 0x27, 0xa9, 0x17, 0x76,
	0x68, 0xd9, 0x63, 0x73, 0x3e, 0x9d, 0xda, 0xfe, 0x35, 0x4e, 0x09, 0xbd, 0x4c, 0x5d, 0x5a, 0x62,
	0xc9, 0x18, 0x6f, 0x83, 0xa2, 0xb7, 0x08, 0xed, 0xb1, 0x3b, 0x9f, 0x46, 0xcf, 0x14, 0x59, 0x48,
	0x5c, 0xaf, 0xed, 0xb1, 0x33, 0x12, 0x7b, 0x7e, 0x89, 0xc9, 0x01, 0xad, 0xc3, 0x2a, 0xd2, 0xb1,
	0x16, 0xc8, 0x67, 0xa2, 0x78, 0x28, 0xb4, 0xd9, 0xe3, 0xa1, 0x37, 0xf1, 0xfc, 0xe8, 0x46, 0x9e,
	0x8c, 0x95, 0xaf, 0xc1, 0xd6, 0x4d, 0xfb, 0x4c, 0xfa, 0x0e, 0xac, 0x06, 0xf2, 0x3b, 0xf2, 0xc0,
	0x83, 0x8c, 0x07, 0xf2, 0xcc, 0x2c, 0xe6, 0x54, 0xfe, 0xbb, 0x08, 0xd5, 0x8e, 0x1d, 0x0e, 0x2f,
	0x92, 0x36, 0x85, 0xc0, 0xd2, 0x3c, 0x5a, 0x62, 0x95, 0xe1, 0x67, 0xdc, 0x17, 0x14, 0xc5, 0xf5,
	0x55, 0xf4, 0x05, 0x75, 0x58, 0x9d, 0x79, 0x01, 0x56, 0x82, 0xa8, 0x86, 0xc5, 0xc3, 0xa4, 0x99,
	0x29, 0x65, 0x9a, 0x99, 0x1d, 0x58, 0x91, 0xbd, 0x4b, 0xb4, 0x92, 0x68, 0x84, 0x6b, 0x74, 0x02,
	0xbc, 0xec, 0xb9, 0xb2, 0x0f, 0x59, 0x66, 0xc9, 0x38, 0xee, 0x3c, 0x56, 0xa5, 0x4e, 0xec, 0x3c,
	0x28, 0x94, 0xc6, 0xce, 0x79, 0x50, 0x5f, 0xdb, 0x5f, 0x42, 0xc9, 0xf8, 0x4d, 0x3f, 0x80, 0x55,
	0x8c, 0x80, 0x65, 0x8f, 0xeb, 0x65, 0xb1, 0xe4, 0xb8, 0x08, 0xe6, 0x96, 0x24, 0x1c, 0x60, 0xd9,
	0xe3, 0xe8, 0x9d, 0x2e, 0x9a, 0x41, 0xbf, 0x0a, 0x95, 0x79, 0xea, 0x99, 0xe8, 0xb0, 0x7e, 0x78,
	0xa7, 0xcf, 0x4c, 0x96, 0x65, 0x7f, 0xf8, 0x3e, 0xac, 0x67, 0xc5, 0x7e, 0xa6, 0x17, 0xb8, 0x73,
	0xd8, 0x31, 0x66, 0xe8, 0x2e, 0x7b, 0x22, 0x0c, 0x75, 0xdc, 0x31, 0xe3, 0xc1, 0x7c, 0x12, 0xa2,
	0x63, 0xa7, 0x02, 0x89, 0x8f, 0x94, 0x78, 0x48, 0x9f, 0x42, 0xd9, 0x0e, 0x43, 0xee, 0x8e, 0x38,
	0x8f, 0xef, 0x38, 0xdb, 0xb7, 0x2d, 0x96, 0xa5, 0x6c, 0xca, 0x57, 0x60, 0x63, 0x41, 0xfe, 0x63,
	0x00, 0x27, 0x30, 0xf9, 0x84, 0x0f, 0x43, 0x2e, 0x55, 0xac, 0xb1, 0x0c, 0xa2, 0x4c, 0x80, 0x36,
	0x66, 0xb3, 0xc9, 0xb5, 0x65, 0x4f, 0x2e, 0xd3, 0x4a, 0x25, 0xce, 0xb4, 0xaf, 0xcf, 0x79, 0x10,
	0xf6, 0x93, 0xcc, 0xc8, 0x20, 0xb2, 0x36, 0x70, 0x79, 0x34, 0xc4, 0x1d, 0x51, 0x02, 0xe0, 0x9a,
	0x6c, 0x94, 0x19, 0x25, 0x7f, 0x89, 0xc5, 0x43, 0xc5, 0x81, 0x2d, 0xc6, 0x67, 0x9e, 0x1f, 0x7e,
	0x36, 0x75, 0x3b, 0xc9, 0xc9, 0x27, 0x75, 0x45, 0x23, 0xcc, 0x27, 0x5f, 0x88, 0x4b, 0x34, 0x25,
	0x63, 0xe5, 0x1a, 0xaa, 0x91, 0x92, 0xc6, 0x50, 0x58, 0x95, 0xb3, 0xb9, 0xb0, 0x68, 0x33, 0x6e,
	0x57, 0xef, 0x92, 0xbb, 0x71, 0xec, 0xc4, 0x00, 0x63, 0x3c, 0x8c, 0x64, 0x57, 0x19, 0x7e, 0x52,
	0x05, 0xd6, 0x87, 0xb6, 0x3b, 0xe4, 0x13, 0xc6, 0xed, 0xc0, 0x73, 0xa3, 0x66, 0x3c, 0x87, 0x29,
	0xbf, 0x5a, 0x80, 0x7a, 0xd3, 0xf7, 0xec, 0xd1, 0xd0, 0x0e, 0x42, 0x43, 0xa4, 0xb7, 0xc8, 0x2e,
	0xd1, 0xac, 0x1f, 0x40, 0xcd, 0xcb, 0x43, 0x91, 0x31, 0x8b, 0xb0, 0x68, 0x3b, 0xed, 0x09, 0x57,
	0x93, 0x87, 0x4e, 0x6c, 0x3b, 0x63, 0x00, 0x2b, 0xd0, 0x39, 0x4f, 0xe9, 0xd2, 0x8e, 0x2c, 0xa4,
	0xa8, 0x50, 0x31, 0xb9, 0x3b, 0x3a, 0x9e, 0x78, 0x2f, 0x78, 0x53, 0x45, 0x27, 0xa7, 0xcf, 0xa8,
	0xb1, 0x93, 0x33, 0x0f, 0xab, 0x49, 0x63, 0x59, 0xcc, 0x36, 0x96, 0xbf, 0x56, 0x80, 0x9d, 0xa6,
	0x33, 0xd6, 0x5e, 0xce, 0x7c, 0x1e, 0x04, 0x8e, 0xe7, 0x26, 0x0b, 0xa3, 0x0f, 0x60, 0x4d, 0x3e,
	0xd5, 0x26, 0x7d, 0xdb, 0xaa, 0x10, 0xe7, 0x8c, 0xa2, 0x1e, 0x49, 0x0a, 0xc2, 0x1e, 0xe9, 0x09,
	0xac, 0xfb, 0x22, 0x1f, 0x07, 0xb2, 0x89, 0x96, 0xab, 0xa9, 0x48, 0x4c, 0x17, 0x6d, 0xf4, 0x1b,
	0xb0, 0x91, 0x65, 0xe1, 0x78, 0xe7, 0x5e, 0x3a, 0xa8, 0xb2, 0x6a, 0x86, 0x89, 0x07, 0x87, 0xbf,
	0x5e, 0x80, 0xd5, 0x8e, 0xfd, 0x52, 0xbc, 0x15, 0xef, 0x00, 0x8d, 0x3e, 0x07, 0x2d, 0x63, 0xd0,
	0x35, 0xac, 0x01, 0xb6, 0x2e, 0xe2, 0x35, 0xa8, 0xa9, 0x0e, 0x3a, 0x26, 0x76, 0x34, 0x5b, 0x50,
	0x6b, 0x1b, 0x27, 0x7a, 0x77, 0xa0, 0xb5, 0x4d, 0x6c, 0xbb, 0x99, 0x46, 0xca, 0xb4, 0x06, 0xa0,
	0x1a, 0x9d, 0x8e, 0xd1, 0x15, 0x4c, 0xbf, 0x5f, 0xa4, 0x1b, 0x50, 0xee, 0x34, 0x2c, 0xf5, 0x54,
	0x8c, 0xbf, 0x57, 0x42, 0x86, 0xe3, 0xb6, 0xf1, 0x4c, 0x63, 0x02, 0xf8, 0x7e, 0x89, 0x56, 0x60,
	0x45, 0x95, 0x22, 0x7f, 0x50, 0xa2, 0x1b, 0xb0, 0xd6, 0xeb, 0x9b, 0x92, 0xf9, 0x0f, 0xff, 0x60,
	0xf9, 0xf0, 0x57, 0x00, 0xd6, 0x3b, 0x8e, 0x2b, 0x0c, 0x41, 0x02, 0xdd, 0x85, 0xad, 0x66, 0xbb,
	0x37, 0x0f, 0x2e, 0x10, 0xea, 0xf2, 0x2b, 0xee, 0xf7, 0x03, 0x3e, 0x22, 0xf7, 0xe8, 0x6b, 0xb0,
	0x9b, 0x12, 0x8e, 0x7d, 0x87, 0xbb, 0x23, 0x26, 0xd3, 0x9c, 0x14, 0x70, 0x39, 0x29, 0xb1, 0xe3,
	0x04, 0x81, 0x6a, 0x4f, 0x26, 0xa4, 0x98, 0x97, 0x26, 0x36, 0xab, 0x20, 0x2c, 0xd1, 0xd7, 0xe1,
	0x41, 0x86, 0x30, 0x1c, 0xf2, 0x59, 0x98, 0x92, 0x4b, 0xf4, 0x3e, 0x6c, 0xa6, 0x64, 0xd5, 0x9b,
	0x4e, 0xb9, 0x1b, 0x92, 0x65, 0xfa, 0x10, 0x76, 0x52, 0x98, 0x71, 0xe4, 0x8f, 0x68, 0x2b, 0x74,
	0x1b, 0x48, 0x4a, 0x93, 0xd7, 0x0e, 0xb2, 0x4a, 0x1f, 0xc0, 0xfd, 0x14, 0xed, 0xcf, 0x26, 0x9e,
	0x3d, 0xd2, 0xa7, 0xf6, 0x98, 0x93, 0x35, 0x4a, 0x61, 0x23, 0xa3, 0xe3, 0xc2, 0x0e, 0x49, 0x39,
	0x2f, 0xc4, 0xbc, 0x0e, 0x42, 0x3e, 0x25, 0xb0, 0x80, 0x8a, 0xfd, 0x4b, 0x2a, 0x79, 0xd1, 0x8c,
	0x0f, 0xb9, 0x73, 0xc5, 0x85, 0xf9, 0xeb, 0x74, 0x1f, 0x1e, 0x65, 0x56, 0x37, 0xf6, 0xf9, 0x82,
	0xc3, 0xaa, 0xf9, 0xf5, 0x77, 0x3c, 0x9f, 0xab, 0x13, 0x87, 0xbb, 0x61, 0xdb, 0x1b, 0x3b, 0x2e,
	0xd9, 0xc8, 0x2f, 0xb4, 0xc5, 0x27, 0x3c, 0x8c, 0x24, 0x90, 0x5a, 0x5e, 0x6f, 0xe7, 0xba, 0x39,
	0xb1, 0xe5, 0xbb, 0x07, 0x21, 0xf4, 0x31, 0x3c, 0x4c, 0x49, 0x09, 0x41, 0x77, 0x8d, 0xf0, 0x82,
	0xfb, 0x64, 0x33, 0xef, 0xd6, 0x2e, 0x7f, 0x61, 0xd9, 0xc1, 0x25, 0xa1, 0xb4, 0x0e, 0xdb, 0x99,
	0xd0, 0x3a, 0xae, 0x13, 0x5c, 0x08, 0xca, 0x56, 0x3e, 0xe8, 0x88, 0xb5, 0x9c, 0x51, 0x7f, 0x36,
	0xb2, 0x43, 0x4e, 0xb6, 0xe9, 0x1b, 0xf0, 0x24, 0x27, 0x8d, 0xd9, 0xee, 0xc8, 0x9b, 0xa2, 0x0b,
	0xda, 0xdc, 0x1e, 0x49, 0x39, 0xe4, 0xfe, 0x82, 0x74, 0xb1, 0x0a, 0xe1, 0xed, 0x9d, 0x7c, 0x76,
	0xc8, 0x70, 0x22, 0x61, 0x37, 0x3f, 0x05, 0x5d, 0xeb, 0x86, 0x82, 0x52, 0x5f, 0xa0, 0x48, 0x85,
	0x48, 0x79, 0x40, 0x9f, 0xc0, 0xeb, 0x29, 0x45, 0x77, 0x3b, 0xb6, 0x83, 0xb7, 0xb4, 0x8c, 0xbe,
	0x87, 0xf9, 0xd5, 0xb4, 0x9c, 0x60, 0x38, 0x17, 0x65, 0xa1, 0x13, 0x8c, 0xc9, 0x6b, 0x54, 0x81,
	0xc7, 0x99, 0x20, 0xcf, 0x67, 0xdc, 0xef, 0x79, 0x2f, 0xb8, 0xaf, 0xe1, 0x49, 0x28, 0xea, 0x2c,
	0xd9, 0xa3, 0x8f, 0xa0, 0x9e, 0x89, 0x2b, 0x1e, 0x5d, 0x48, 0xe8, 0x70, 0x94, 0xb0, 0x9f, 0x97,
	0xa0, 0x8a, 0xaa, 0xba, 0xc0, 0xf3, 0x24, 0x9f, 0x19, 0x8c, 0x0f, 0x1d, 0x7e, 0x25, 0xca, 0x66,
	0xc7, 0xf3, 0x46, 0xc8, 0xa1, 0xe4, 0x33, 0xe3, 0xc4, 0xe7, 0x3c, 0x74, 0xb0, 0xf5, 0x74, 0x42,
	0x24, 0xbf, 0x91, 0x0f, 0x71, 0x4c, 0x16, 0xbe, 0x43, 0xfa, 0x9b, 0x79, 0x05, 0xba, 0x1b, 0x3a,
	0x53, 0x7b, 0x78, 0xdd, 0x9f, 0x8d, 0x7d, 0x7b, 0x24, 0x4c, 0x78, 0xeb, 0x76, 0x8e, 0x16, 0x1f,
	0xfb, 0x76, 0x28, 0x38, 0x0e, 0xe8, 0xe7, 0x60, 0x4f, 0x72, 0x24, 0xe6, 0x9f, 0x7a, 0x41, 0x28,
	0xae, 0x04, 0x6d, 0xe7, 0x4a, 0x30, 0x7d, 0x41, 0x46, 0xbf, 0xc3, 0x7f, 0x32, 0xdb, 0x21, 0x3d,
	0x80, 0xcf, 0x37, 0xdb, 0xe2, 0x07, 0xac, 0x9f, 0xcc, 0xf9, 0x45, 0xb9, 0x32, 0xc6, 0x03, 0xee,
	0x5f, 0xf1, 0x11, 0x32, 0xe7, 0xe8, 0x6f, 0xe7, 0xb3, 0x25, 0xb9, 0x89, 0x93, 0x2f, 0xd1, 0xcf,
	0xc3, 0xfe, 0x8d, 0xcd, 0x12, 0x93, 0xa3, 0x5f, 0xff, 0xc8, 0x51, 0x7e, 0x4b, 0xc9, 0x4a, 0x30,
	0xf1, 0xc6, 0x28, 0xfa, 0xcb, 0x87, 0xff, 0x54, 0x02, 0x88, 0xab, 0x60, 0x53, 0xc5, 0x1d, 0x96,
	0x8e, 0xf2, 0xf5, 0x79, 0x07, 0xa8, 0x3c, 0xf8, 0xb3, 0xaf, 0x7d, 0xa4, 0x80, 0xd2, 0x25, 0xbe,
	0xf8, 0x12, 0x49, 0x8a, 0x79, 0x5a, 0xf6, 0xf9, 0x8f, 0x2c, 0xa5, 0xf2, 0xc4, 0x75, 0xc4, 0x19,
	0x5e, 0x22, 0x9d, 0x94, 0xd0, 0x04, 0x89, 0xe3, 0xb8, 0x99, 0x59, 0xee, 0x32, 0x6e, 0x81, 0x74,
	0x4a, 0xdb, 0x71, 0xa3, 0xd7, 0x69, 0x59, 0x02, 0x53, 0x4a, 0x52, 0x02, 0x73, 0xea, 0xe3, 0x3b,
	0x4a, 0x67, 0x1e, 0x62, 0x0d, 0xbc, 0x0f, 0x9b, 0x92, 0x96, 0x79, 0xd6, 0x26, 0xe5, 0x14, 0x8e,
	0x57, 0x63, 0xcc, 0x42, 0x02, 0xb8, 0x7f, 0x52, 0x38, 0xf7, 0xa0, 0x48, 0x2a, 0xb8, 0x37, 0x6e,
	0xae, 0x52, 0x5e, 0x7c, 0xc8, 0x7a, 0xde, 0x34, 0xf9, 0x06, 0x42, 0xaa, 0x98, 0x68, 0x59, 0x94,
	0xdb, 0xfe, 0xe2, 0x5d, 0x8a, 0x6c, 0xa4, 0xae, 0x58, 0xb8, 0xd3, 0x93, 0x1a, 0x9e, 0x90, 0x92,
	0x94, 0x5c, 0xb6, 0x09, 0x49, 0x55, 0xa5, 0x17, 0x68, 0xb2, 0x49, 0x37, 0xa1, 0x2a, 0xd1, 0xe8,
	0x5a, 0x4c, 0x68, 0x66, 0x76, 0x7c, 0xd9, 0x25, 0x5b, 0x29, 0x98, 0x5c, 0x61, 0xc9, 0x36, 0xa6,
	0x9e, 0x04, 0x73, 0x17, 0x53, 0x72, 0x3f, 0x95, 0x1a, 0x3d, 0x15, 0xc8, 0xa2, 0x16, 0x65, 0x48,
	0xb6, 0xf5, 0x20, 0xbb, 0x87, 0x1f, 0xa6, 0x39, 0xa6, 0xe6, 0x72, 0x4c, 0x5d, 0xc8, 0x31, 0xf1,
	0x13, 0x86, 0xae, 0x75, 0xad, 0x41, 0xef, 0x69, 0x6f, 0x60, 0xf5, 0xbb, 0x5d, 0xad, 0x4d, 0x0a,
	0x87, 0x3f, 0x5c, 0x83, 0x8d, 0x64, 0x8a, 0x68, 0x01, 0xb0, 0x56, 0xc4, 0x88, 0x35, 0x77, 0x5d,
	0x3e, 0x59, 0x14, 0x44, 0x5a, 0xac, 0xf1, 0x6c, 0xd0, 0xd3, 0x55, 0xab, 0xcf, 0xb4, 0x01, 0xd3,
	0x7e, 0x89, 0xfc, 0xeb, 0x2a, 0x7d, 0x13, 0x9e, 0x74, 0xfa, 0x6d, 0x4b, 0x1f, 0xb0, 0x81, 0xda,
	0x68, 0xb7, 0x07, 0xea, 0x69, 0xa3, 0x7b, 0xa2, 0x0d, 0xcc, 0x7e, 0x4f, 0x63, 0x03, 0xab, 0x71,
	0x22, 0xf8, 0xfe, 0x0d, 0x13, 0xe7, 0x7e, 0x8e, 0xaf, 0xa5, 0xab, 0x52, 0xc6, 0xbf, 0xaf, 0x52,
	0x0a, 0x55, 0xd3, 0x6a, 0x30, 0x6b, 0xc0, 0x34, 0x55, 0x60, 0x3f, 0x5c, 0xa5, 0x9b, 0xb0, 0x6e,
	0x5a, 0x46, 0x2f, 0x81, 0xfe, 0x63, 0x95, 0xee, 0xc0, 0x26, 0x8e, 0x04, 0x68, 0xf6, 0xdb, 0x96,
	0xc0, 0xff, 0x13, 0x8f, 0xe5, 0xed, 0x96, 0xd1, 0x6f, 0xb6, 0xb5, 0x05, 0xc9, 0xff, 0xb5, 0x8a,
	0xed, 0x8a, 0xde, 0x11, 0xfd, 0xc9, 0x8f, 0x56, 0x71, 0x05, 0xc6, 0xf1, 0xb1, 0xae, 0xea, 0x8d,
	0xf6, 0x00, 0x5b, 0x1e, 0xfd, 0x4c, 0x23, 0x3f, 0x16, 0x62, 0x53, 0xf8, 0xf8, 0x58, 0xe2, 0xff,
	0xbb, 0x8a, 0xbd, 0x10, 0xba, 0xac, 0xa9, 0x9d, 0xe8, 0x5d, 0xf2, 0x37, 0x35, 0xba, 0x0d, 0x35,
	0x53, 0xeb, 0xb6, 0x06, 0x51, 0x43, 0x84, 0x1a, 0xfe, 0x16, 0xb3, 0x66, 0xa3, 0xd1, 0x6a, 0x0d,
	0x8e, 0x99, 0x8e, 0x34, 0x04, 0xbf, 0x5b, 0x43, 0x91, 0x0d, 0x55, 0xd5, 0x7a, 0x56, 0x16, 0xff,
	0xbb, 0x9a, 0x5c, 0xc1, 0x71, 0xdf, 0xd4, 0xb2, 0xf8, 0xdf, 0x0b, 0xd1, 0x0d, 0xcb, 0xc2, 0x20,
	0xf5, 0xcd, 0x48, 0xf4, 0x3f, 0xd4, 0x6e, 0xf1, 0xb8, 0x49, 0xfe, 0x68, 0x97, 0xbe, 0x01, 0xfb,
	0x39, 0x4f, 0xa6, 0xae, 0x56, 0x4f, 0x1b, 0x27, 0x92, 0xed, 0x3b, 0xbb, 0x37, 0x02, 0xd3, 0xef,
	0xb5, 0x1a, 0x96, 0x36, 0x38, 0x35, 0xac, 0x81, 0x65, 0xf4, 0x74, 0x55, 0xf0, 0xfd, 0xf1, 0xee,
	0x5d, 0x81, 0x31, 0xc9, 0x9f, 0xec, 0xd2, 0xb7, 0x40, 0xb9, 0x4d, 0x86, 0x60, 0x49, 0x85, 0xfc,
	0xe9, 0x2e, 0xdd, 0x83, 0x87, 0x2d, 0xdd, 0x54, 0xfb, 0xa6, 0xa9, 0x1b, 0xdd, 0xc1, 0x09, 0x33,
	0xfa, 0xbd, 0x41, 0x5b, 0xef, 0xe8, 0x96, 0x60, 0xf8, 0xb3, 0xdd, 0xc5, 0x10, 0x9b, 0xe4, 0xcf,
	0x77, 0x17, 0x42, 0x6c, 0x92, 0xbf, 0xd8, 0xbd, 0x2d, 0xc4, 0x26, 0xf9, 0xcb, 0xdd, 0x3b, 0x42,
	0x6c, 0x92, 0xbf, 0xc2, 0xe3, 0x7d, 0x0b, 0xd7, 0xd4, 0xd6, 0xbb, 0x1a, 0x66, 0x6b, 0x4c, 0xf9,
	0xeb, 0xdd, 0x9b, 0x01, 0x33, 0xc9, 0x6f, 0xed, 0xdd, 0x08, 0x98, 0x49, 0x7e, 0x7b, 0xef, 0xb6,
	0x80, 0x99, 0xe4, 0x77, 0xf6, 0x6e, 0x0b, 0x98, 0x49, 0x7e, 0x77, 0xef, 0x66, 0xc0, 0x4c, 0xf2,
	0xad, 0x3d, 0xfa, 0x1a, 0xec, 0xe8, 0xdd, 0x8f, 0x8c, 0x33, 0xf1, 0xfb, 0xa9, 0x7e, 0x6c, 0x0d,
	0xf4, 0xee, 0xb1, 0x21, 0x88, 0xbf, 0xb7, 0x87, 0x76, 0x5a, 0x7d, 0xd6, 0x35, 0x3e, 0x92, 0xcd,
	0x74, 0x64, 0x2b, 0xf9, 0xe6, 0x5b, 0x68, 0x91, 0xd1, 0xd3, 0x58, 0xc3, 0xd2, 0x2c, 0xc3, 0x68,
	0x37, 0x8d, 0x8f, 0xc9, 0x8f, 0x8e, 0xe8, 0x2e, 0xd0, 0x93, 0x7e, 0x83, 0xb5, 0x9e, 0xe9, 0xdd,
	0x93, 0x41, 0x93, 0x19, 0x0d, 0xb5, 0x61, 0x5a, 0xe4, 0xc7, 0x78, 0xf4, 0xdc, 0x67, 0x86, 0xd1,
	0x19, 0x74, 0xfa, 0xa6, 0xae, 0x0e, 0xe4, 0x4b, 0xa6, 0xd0, 0xf1, 0x3f, 0x47, 0xa8, 0xa3, 0xa1,
	0x5a, 0xfa, 0x47, 0xda, 0xc0, 0x6a, 0x98, 0x67, 0x83, 0x7e, 0x57, 0x17, 0xb3, 0xfe, 0xf9, 0x29,
	0x7d, 0x04, 0xbb, 0x71, 0x92, 0xe3, 0x0e, 0xed, 0x6a, 0xed, 0x84, 0xfa, 0x2f, 0x4f, 0x31, 0x7c,
	0x4c, 0x6b, 0xf5, 0x1a, 0xea, 0x99, 0x66, 0x61, 0x39, 0x88, 0x75, 0xb6, 0x04, 0xc3, 0xf7, 0xde,
	0xcd, 0x33, 0x1c, 0xeb, 0x5d, 0xdd, 0x3c, 0xcd, 0x30, 0x7c, 0xff, 0x5d, 0xfa, 0x3a, 0xd4, 0x53,
	0x86, 0x13, 0xd6, 0x68, 0x66, 0xc8, 0x3f, 0x78, 0xf7, 0xf0, 0x1d, 0x58, 0x8b, 0x7f, 0x86, 0xa1,
	0xeb, 0xf2, 0x87, 0xe8, 0xe8, 0xb7, 0x54, 0x80, 0x15, 0x53, 0x6b, 0x30, 0xf5, 0x54, 0xfe, 0x62,
	0x9d, 0xce, 0x2a, 0x1e, 0xfe, 0x63, 0x01, 0xaa, 0x71, 0x45, 0x12, 0xb7, 0x12, 0x3c, 0x16, 0x72,
	0x40, 0xbe, 0x42, 0x29, 0xf0, 0xd8, 0xe8, 0x59, 0xba, 0xd1, 0x6d, 0xb4, 0x05, 0x55, 0xef, 0x9e,
	0x44, 0x59, 0xd4, 0xd1, 0xbb, 0xd6, 0x27, 0x3d, 0x4d, 0x1e, 0xad, 0x77, 0xd0, 0x8a, 0x78, 0x7c,
	0x5a, 0x8d, 0xf6, 0x19, 0x7a, 0x50, 0x94, 0x07, 0x89, 0x2f, 0x89, 0x96, 0x20, 0x36, 0xcb, 0xe8,
	0x62, 0xa2, 0xe1, 0x5a, 0x54, 0xa3, 0xdf, 0x4d, 0x67, 0x97, 0xf0, 0x24, 0x6d, 0xf4, 0x7a, 0xed,
	0x4f, 0x50, 0x04, 0xfa, 0x2f, 0xa6, 0x2c, 0x63, 0x75, 0x66, 0x5a, 0xcf, 0x60, 0xd6, 0x22, 0x69,
	0xe5, 0xb0, 0x9b, 0x56, 0x61, 0x99, 0xa5, 0xd9, 0x2a, 0x1c, 0xe5, 0x6d, 0x6e, 0x8d, 0xaf, 0xc3,
	0x03, 0xcc, 0x69, 0x49, 0x6a, 0x32, 0x03, 0x6d, 0x4a, 0x97, 0xf7, 0x7c, 0x45, 0xfc, 0x35, 0xec,
	0x9d, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x55, 0x1c, 0x03, 0xdb, 0x28, 0x26, 0x00, 0x00,
}
