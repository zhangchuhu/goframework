// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: bigexpression.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmotionType int32

const (
	EmotionType_UnknownType        EmotionType = 0
	EmotionType_kEmotionTypeMood   EmotionType = 1
	EmotionType_kEmotionTypeRandom EmotionType = 2
)

var EmotionType_name = map[int32]string{
	0: "UnknownType",
	1: "kEmotionTypeMood",
	2: "kEmotionTypeRandom",
}
var EmotionType_value = map[string]int32{
	"UnknownType":        0,
	"kEmotionTypeMood":   1,
	"kEmotionTypeRandom": 2,
}

func (x EmotionType) String() string {
	return proto.EnumName(EmotionType_name, int32(x))
}
func (EmotionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Emotion struct {
	Id            uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ResultIndex   uint32   `protobuf:"varint,2,opt,name=result_index,json=resultIndex" json:"result_index,omitempty"`
	ResultIndexes []uint32 `protobuf:"varint,3,rep,packed,name=result_indexes,json=resultIndexes" json:"result_indexes,omitempty"`
}

func (m *Emotion) Reset()                    { *m = Emotion{} }
func (m *Emotion) String() string            { return proto.CompactTextString(m) }
func (*Emotion) ProtoMessage()               {}
func (*Emotion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Emotion) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Emotion) GetResultIndex() uint32 {
	if m != nil {
		return m.ResultIndex
	}
	return 0
}

func (m *Emotion) GetResultIndexes() []uint32 {
	if m != nil {
		return m.ResultIndexes
	}
	return nil
}

type EmotionPos struct {
	Xpos int32 `protobuf:"varint,1,opt,name=xpos" json:"xpos,omitempty"`
	Ypos int32 `protobuf:"varint,2,opt,name=ypos" json:"ypos,omitempty"`
}

func (m *EmotionPos) Reset()                    { *m = EmotionPos{} }
func (m *EmotionPos) String() string            { return proto.CompactTextString(m) }
func (*EmotionPos) ProtoMessage()               {}
func (*EmotionPos) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EmotionPos) GetXpos() int32 {
	if m != nil {
		return m.Xpos
	}
	return 0
}

func (m *EmotionPos) GetYpos() int32 {
	if m != nil {
		return m.Ypos
	}
	return 0
}

type EmotionConfig struct {
	Id                  uint32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type                EmotionType   `protobuf:"varint,2,opt,name=type,enum=bilin.bigexpression.EmotionType" json:"type,omitempty"`
	Cnname              string        `protobuf:"bytes,3,opt,name=cnname" json:"cnname,omitempty"`
	Enname              string        `protobuf:"bytes,4,opt,name=enname" json:"enname,omitempty"`
	ResourceUrl         string        `protobuf:"bytes,5,opt,name=resource_url,json=resourceUrl" json:"resource_url,omitempty"`
	IconImageIndex      uint32        `protobuf:"varint,6,opt,name=icon_image_index,json=iconImageIndex" json:"icon_image_index,omitempty"`
	ImageCount          uint32        `protobuf:"varint,7,opt,name=image_count,json=imageCount" json:"image_count,omitempty"`
	AnimationIndexStart uint32        `protobuf:"varint,8,opt,name=animation_index_start,json=animationIndexStart" json:"animation_index_start,omitempty"`
	AnimationIndexEnd   uint32        `protobuf:"varint,9,opt,name=animation_index_end,json=animationIndexEnd" json:"animation_index_end,omitempty"`
	AnimationDuration   uint32        `protobuf:"varint,10,opt,name=animation_duration,json=animationDuration" json:"animation_duration,omitempty"`
	RepeatCount         uint32        `protobuf:"varint,11,opt,name=repeat_count,json=repeatCount" json:"repeat_count,omitempty"`
	ResultIndexStart    uint32        `protobuf:"varint,12,opt,name=result_index_start,json=resultIndexStart" json:"result_index_start,omitempty"`
	ResultIndexEnd      uint32        `protobuf:"varint,13,opt,name=result_index_end,json=resultIndexEnd" json:"result_index_end,omitempty"`
	ResultDuration      uint32        `protobuf:"varint,14,opt,name=result_duration,json=resultDuration" json:"result_duration,omitempty"`
	NeedClientVersion   string        `protobuf:"bytes,15,opt,name=need_client_version,json=needClientVersion" json:"need_client_version,omitempty"`
	ResultCount         uint64        `protobuf:"varint,16,opt,name=result_count,json=resultCount" json:"result_count,omitempty"`
	Pos                 []*EmotionPos `protobuf:"bytes,17,rep,name=pos" json:"pos,omitempty"`
}

func (m *EmotionConfig) Reset()                    { *m = EmotionConfig{} }
func (m *EmotionConfig) String() string            { return proto.CompactTextString(m) }
func (*EmotionConfig) ProtoMessage()               {}
func (*EmotionConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *EmotionConfig) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmotionConfig) GetType() EmotionType {
	if m != nil {
		return m.Type
	}
	return EmotionType_UnknownType
}

func (m *EmotionConfig) GetCnname() string {
	if m != nil {
		return m.Cnname
	}
	return ""
}

func (m *EmotionConfig) GetEnname() string {
	if m != nil {
		return m.Enname
	}
	return ""
}

func (m *EmotionConfig) GetResourceUrl() string {
	if m != nil {
		return m.ResourceUrl
	}
	return ""
}

func (m *EmotionConfig) GetIconImageIndex() uint32 {
	if m != nil {
		return m.IconImageIndex
	}
	return 0
}

func (m *EmotionConfig) GetImageCount() uint32 {
	if m != nil {
		return m.ImageCount
	}
	return 0
}

func (m *EmotionConfig) GetAnimationIndexStart() uint32 {
	if m != nil {
		return m.AnimationIndexStart
	}
	return 0
}

func (m *EmotionConfig) GetAnimationIndexEnd() uint32 {
	if m != nil {
		return m.AnimationIndexEnd
	}
	return 0
}

func (m *EmotionConfig) GetAnimationDuration() uint32 {
	if m != nil {
		return m.AnimationDuration
	}
	return 0
}

func (m *EmotionConfig) GetRepeatCount() uint32 {
	if m != nil {
		return m.RepeatCount
	}
	return 0
}

func (m *EmotionConfig) GetResultIndexStart() uint32 {
	if m != nil {
		return m.ResultIndexStart
	}
	return 0
}

func (m *EmotionConfig) GetResultIndexEnd() uint32 {
	if m != nil {
		return m.ResultIndexEnd
	}
	return 0
}

func (m *EmotionConfig) GetResultDuration() uint32 {
	if m != nil {
		return m.ResultDuration
	}
	return 0
}

func (m *EmotionConfig) GetNeedClientVersion() string {
	if m != nil {
		return m.NeedClientVersion
	}
	return ""
}

func (m *EmotionConfig) GetResultCount() uint64 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

func (m *EmotionConfig) GetPos() []*EmotionPos {
	if m != nil {
		return m.Pos
	}
	return nil
}

type GetEmotionConfigReq struct {
}

func (m *GetEmotionConfigReq) Reset()                    { *m = GetEmotionConfigReq{} }
func (m *GetEmotionConfigReq) String() string            { return proto.CompactTextString(m) }
func (*GetEmotionConfigReq) ProtoMessage()               {}
func (*GetEmotionConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// 获取表情配置文件响应
type GetEmotionConfigRes struct {
	ConfigVersion uint32           `protobuf:"varint,1,opt,name=config_version,json=configVersion" json:"config_version,omitempty"`
	EmotionConfig []*EmotionConfig `protobuf:"bytes,2,rep,name=emotion_config,json=emotionConfig" json:"emotion_config,omitempty"`
	PushUrl       string           `protobuf:"bytes,3,opt,name=push_url,json=pushUrl" json:"push_url,omitempty"`
}

func (m *GetEmotionConfigRes) Reset()                    { *m = GetEmotionConfigRes{} }
func (m *GetEmotionConfigRes) String() string            { return proto.CompactTextString(m) }
func (*GetEmotionConfigRes) ProtoMessage()               {}
func (*GetEmotionConfigRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetEmotionConfigRes) GetConfigVersion() uint32 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *GetEmotionConfigRes) GetEmotionConfig() []*EmotionConfig {
	if m != nil {
		return m.EmotionConfig
	}
	return nil
}

func (m *GetEmotionConfigRes) GetPushUrl() string {
	if m != nil {
		return m.PushUrl
	}
	return ""
}

// 发表情请求
type SendEmotionReq struct {
	Header  *Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Emotion *Emotion `protobuf:"bytes,2,opt,name=emotion" json:"emotion,omitempty"`
}

func (m *SendEmotionReq) Reset()                    { *m = SendEmotionReq{} }
func (m *SendEmotionReq) String() string            { return proto.CompactTextString(m) }
func (*SendEmotionReq) ProtoMessage()               {}
func (*SendEmotionReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SendEmotionReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SendEmotionReq) GetEmotion() *Emotion {
	if m != nil {
		return m.Emotion
	}
	return nil
}

// 发表情响应
type SendEmotionRes struct {
	Emotion *Emotion `protobuf:"bytes,1,opt,name=emotion" json:"emotion,omitempty"`
}

func (m *SendEmotionRes) Reset()                    { *m = SendEmotionRes{} }
func (m *SendEmotionRes) String() string            { return proto.CompactTextString(m) }
func (*SendEmotionRes) ProtoMessage()               {}
func (*SendEmotionRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *SendEmotionRes) GetEmotion() *Emotion {
	if m != nil {
		return m.Emotion
	}
	return nil
}

func init() {
	proto.RegisterType((*Emotion)(nil), "bilin.bigexpression.Emotion")
	proto.RegisterType((*EmotionPos)(nil), "bilin.bigexpression.EmotionPos")
	proto.RegisterType((*EmotionConfig)(nil), "bilin.bigexpression.EmotionConfig")
	proto.RegisterType((*GetEmotionConfigReq)(nil), "bilin.bigexpression.GetEmotionConfigReq")
	proto.RegisterType((*GetEmotionConfigRes)(nil), "bilin.bigexpression.GetEmotionConfigRes")
	proto.RegisterType((*SendEmotionReq)(nil), "bilin.bigexpression.SendEmotionReq")
	proto.RegisterType((*SendEmotionRes)(nil), "bilin.bigexpression.SendEmotionRes")
	proto.RegisterEnum("bilin.bigexpression.EmotionType", EmotionType_name, EmotionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for BigExpressionObj service

type BigExpressionObjClient interface {
	// 获取表情配置文件
	GetEmotionConfig(ctx context.Context, in *GetEmotionConfigReq, opts ...map[string]string) (*GetEmotionConfigRes, error)
	// 用户发表情
	SendEmotion(ctx context.Context, in *SendEmotionReq, opts ...map[string]string) (*SendEmotionRes, error)
}

type bigExpressionObjClient struct {
	s model.Servant
}

func NewBigExpressionObjClient(objname string, comm servant.ICommunicator) BigExpressionObjClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &bigExpressionObjClient{s: comm.GetServantProxy(objname)}
}

func (c *bigExpressionObjClient) GetEmotionConfig(ctx context.Context, in *GetEmotionConfigReq, opts ...map[string]string) (*GetEmotionConfigRes, error) {
	var (
		reply GetEmotionConfigRes
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "GetEmotionConfig", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *bigExpressionObjClient) SendEmotion(ctx context.Context, in *SendEmotionReq, opts ...map[string]string) (*SendEmotionRes, error) {
	var (
		reply SendEmotionRes
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "SendEmotion", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for BigExpressionObj service

type BigExpressionObjServer interface {
	// 获取表情配置文件
	GetEmotionConfig(context.Context, *GetEmotionConfigReq) (*GetEmotionConfigRes, error)
	// 用户发表情
	SendEmotion(context.Context, *SendEmotionReq) (*SendEmotionRes, error)
}

type bigExpressionObjDispatcher struct {
}

func NewBigExpressionObjDispatcher() servant.Dispatcher {
	return &bigExpressionObjDispatcher{}
}

func (_obj *bigExpressionObjDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(BigExpressionObjServer)
	switch req.SFuncName {
	case "GetEmotionConfig":
		var req_ GetEmotionConfigReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.GetEmotionConfig(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "SendEmotion":
		var req_ SendEmotionReq
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.SendEmotion(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("bigexpression.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0x6d, 0xd7, 0x6e, 0x37, 0x4b, 0x96, 0xb9, 0x6c, 0x0a, 0x13, 0xd2, 0x4a, 0xd0, 0x44,
	0x84, 0xa0, 0x12, 0x65, 0xe2, 0x01, 0x18, 0x13, 0x9b, 0x04, 0x62, 0xca, 0x18, 0xfc, 0x8c, 0xd2,
	0xe4, 0xae, 0x33, 0x6b, 0xed, 0x2c, 0x4e, 0x61, 0x7b, 0x1d, 0x9e, 0x80, 0x77, 0xe1, 0x85, 0x90,
	0x3f, 0x5a, 0x92, 0x52, 0x55, 0xe3, 0x5f, 0x7c, 0xce, 0xb9, 0xbe, 0xc7, 0xd7, 0xc7, 0x81, 0xee,
	0x90, 0x8e, 0xf0, 0x36, 0x2f, 0x50, 0x08, 0xca, 0x59, 0x3f, 0x2f, 0x78, 0xc9, 0x49, 0x77, 0x48,
	0xc7, 0x94, 0xf5, 0x6b, 0xd4, 0xde, 0xe6, 0x15, 0x26, 0x19, 0x16, 0x5a, 0x12, 0xa4, 0xd0, 0x39,
	0x9e, 0xf0, 0x92, 0x72, 0x46, 0x5c, 0x68, 0xd0, 0xcc, 0xb7, 0x7a, 0x56, 0xe8, 0x44, 0x0d, 0x9a,
	0x91, 0x27, 0xb0, 0x59, 0xa0, 0x98, 0x8e, 0xcb, 0x98, 0xb2, 0x0c, 0x6f, 0xfd, 0x86, 0x62, 0x6c,
	0x8d, 0x9d, 0x4a, 0x88, 0x1c, 0x80, 0x5b, 0x95, 0xa0, 0xf0, 0x9b, 0xbd, 0x66, 0xe8, 0x44, 0x4e,
	0x45, 0x84, 0x22, 0x38, 0x04, 0x30, 0x4d, 0xce, 0xb8, 0x20, 0x04, 0x5a, 0xb7, 0x39, 0x17, 0xaa,
	0xd3, 0x5a, 0xa4, 0xbe, 0x25, 0x76, 0x27, 0xb1, 0x86, 0xc6, 0xe4, 0x77, 0xf0, 0x6b, 0x0d, 0x1c,
	0x53, 0x76, 0xc4, 0xd9, 0x25, 0x1d, 0xfd, 0xe3, 0xf0, 0x10, 0x5a, 0xe5, 0x5d, 0x8e, 0xaa, 0xca,
	0x1d, 0xf4, 0xfa, 0x4b, 0x8e, 0xdb, 0x37, 0x3b, 0x7c, 0xbe, 0xcb, 0x31, 0x52, 0x6a, 0xb2, 0x0b,
	0xed, 0x94, 0xb1, 0x64, 0x82, 0x7e, 0xb3, 0x67, 0x85, 0x1b, 0x91, 0x59, 0x49, 0x1c, 0x35, 0xde,
	0xd2, 0xb8, 0x5e, 0x99, 0x39, 0xf0, 0x69, 0x91, 0x62, 0x3c, 0x2d, 0xc6, 0xfe, 0x9a, 0x62, 0xed,
	0x19, 0x76, 0x51, 0x8c, 0x49, 0x08, 0x1e, 0x4d, 0x39, 0x8b, 0xe9, 0x24, 0x19, 0xa1, 0x19, 0x57,
	0x5b, 0xd9, 0x74, 0x25, 0x7e, 0x2a, 0x61, 0x3d, 0xb1, 0x7d, 0xb0, 0xb5, 0x28, 0xe5, 0x53, 0x56,
	0xfa, 0x1d, 0x25, 0x02, 0x05, 0x1d, 0x49, 0x84, 0x0c, 0x60, 0x27, 0x61, 0x74, 0x92, 0x48, 0xd3,
	0x7a, 0xa7, 0x58, 0x94, 0x49, 0x51, 0xfa, 0xeb, 0x4a, 0xda, 0x9d, 0x93, 0x6a, 0xbf, 0x73, 0x49,
	0x91, 0x3e, 0x74, 0x17, 0x6b, 0x90, 0x65, 0xfe, 0x86, 0xaa, 0xd8, 0xae, 0x57, 0x1c, 0xb3, 0x8c,
	0xbc, 0x04, 0xf2, 0x57, 0x9f, 0x4d, 0x0b, 0xf5, 0xe1, 0xc3, 0x82, 0xfc, 0x9d, 0x21, 0xf4, 0x00,
	0x72, 0x4c, 0x4a, 0x63, 0xda, 0x9e, 0x05, 0x41, 0x62, 0xda, 0xf5, 0x0b, 0x20, 0xd5, 0x20, 0x18,
	0xcb, 0x9b, 0x4a, 0xe8, 0x55, 0xc2, 0xa0, 0xfd, 0x86, 0xe0, 0xd5, 0xd4, 0xd2, 0xac, 0xa3, 0xc7,
	0x55, 0xd1, 0x4a, 0xa7, 0xcf, 0x60, 0xcb, 0x28, 0xe7, 0x36, 0xdd, 0xaa, 0x70, 0xee, 0xb1, 0x0f,
	0x5d, 0x86, 0x98, 0xc5, 0xe9, 0x98, 0x22, 0x2b, 0xe3, 0xef, 0x58, 0xc8, 0xdb, 0xf7, 0xb7, 0xd4,
	0x5d, 0x6d, 0x4b, 0xea, 0x48, 0x31, 0x5f, 0x34, 0x51, 0x09, 0xb7, 0x3e, 0x93, 0xd7, 0xb3, 0xc2,
	0xd6, 0x2c, 0xdc, 0xfa, 0x4c, 0xaf, 0xa0, 0x29, 0x23, 0xb9, 0xdd, 0x6b, 0x86, 0xf6, 0x60, 0x7f,
	0x55, 0xb8, 0xce, 0xb8, 0x88, 0xa4, 0x36, 0xd8, 0x81, 0xee, 0x7b, 0x2c, 0x6b, 0xa1, 0x8d, 0xf0,
	0x26, 0xf8, 0x69, 0x2d, 0xc3, 0x85, 0x7c, 0x3e, 0xa9, 0x5a, 0xcc, 0xfd, 0xea, 0x6c, 0x3b, 0x1a,
	0x9d, 0x79, 0x3d, 0x05, 0x17, 0x75, 0x69, 0xac, 0x09, 0xbf, 0xa1, 0x3c, 0x05, 0xab, 0x3c, 0x99,
	0x2e, 0x0e, 0xd6, 0x5e, 0xd0, 0x23, 0x58, 0xcf, 0xa7, 0xe2, 0x4a, 0xe5, 0x58, 0xa7, 0xbf, 0x23,
	0xd7, 0x17, 0xc5, 0x38, 0xe0, 0xe0, 0x9e, 0x23, 0xcb, 0x4c, 0x79, 0x84, 0x37, 0xe4, 0x00, 0xda,
	0xfa, 0x5f, 0xa1, 0x6c, 0xd9, 0x03, 0xc7, 0xf4, 0x3b, 0x51, 0x60, 0x64, 0x48, 0xf2, 0x06, 0x3a,
	0xa6, 0x89, 0x7a, 0x88, 0xf6, 0xe0, 0xf1, 0x2a, 0x5f, 0xd1, 0x4c, 0x1c, 0x9c, 0x2c, 0x34, 0x14,
	0xd5, 0x9d, 0xac, 0xff, 0xd8, 0xe9, 0xf9, 0x07, 0xb0, 0x2b, 0xcf, 0x9c, 0x6c, 0x81, 0x7d, 0xc1,
	0xae, 0x19, 0xff, 0xa1, 0x96, 0xde, 0x03, 0xf2, 0x10, 0xbc, 0xeb, 0x8a, 0xe0, 0x23, 0xe7, 0x99,
	0x67, 0x91, 0x5d, 0x20, 0x55, 0x34, 0x4a, 0x58, 0xc6, 0x27, 0x5e, 0x63, 0xf0, 0xdb, 0x02, 0xef,
	0x2d, 0x1d, 0x1d, 0xcf, 0x1b, 0x7e, 0x1a, 0x7e, 0x23, 0x97, 0xe0, 0x2d, 0xde, 0x20, 0x09, 0x97,
	0xba, 0x5b, 0x12, 0x80, 0xbd, 0xfb, 0x2a, 0x05, 0xf9, 0x0a, 0x76, 0x65, 0x28, 0xe4, 0xe9, 0xd2,
	0xc2, 0xfa, 0x3d, 0xed, 0xdd, 0x43, 0x24, 0x86, 0x6d, 0xf5, 0xbf, 0x7f, 0xfd, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x8a, 0xc9, 0xe5, 0xb5, 0x29, 0x06, 0x00, 0x00,
}
