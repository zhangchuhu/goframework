// Code generated by protoc-gen-tars. DO NOT EDIT.
// source: flowerserver.proto

package bilin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	"code.yy.com/yytars/goframework/tars/servant"
	"code.yy.com/yytars/goframework/tars/servant/model"
	"code.yy.com/yytars/goframework/jce/taf"
	"errors"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryUsableFlowerCountRequest struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *QueryUsableFlowerCountRequest) Reset()                    { *m = QueryUsableFlowerCountRequest{} }
func (m *QueryUsableFlowerCountRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryUsableFlowerCountRequest) ProtoMessage()               {}
func (*QueryUsableFlowerCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *QueryUsableFlowerCountRequest) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type QueryUsableFlowerCountRespone struct {
	Count uint32         `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Cret  *CommonRetInfo `protobuf:"bytes,2,opt,name=cret" json:"cret,omitempty"`
}

func (m *QueryUsableFlowerCountRespone) Reset()                    { *m = QueryUsableFlowerCountRespone{} }
func (m *QueryUsableFlowerCountRespone) String() string            { return proto.CompactTextString(m) }
func (*QueryUsableFlowerCountRespone) ProtoMessage()               {}
func (*QueryUsableFlowerCountRespone) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *QueryUsableFlowerCountRespone) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryUsableFlowerCountRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

type SendFlowerRequest struct {
	ToUser uint32 `protobuf:"varint,1,opt,name=toUser" json:"toUser,omitempty"`
}

func (m *SendFlowerRequest) Reset()                    { *m = SendFlowerRequest{} }
func (m *SendFlowerRequest) String() string            { return proto.CompactTextString(m) }
func (*SendFlowerRequest) ProtoMessage()               {}
func (*SendFlowerRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *SendFlowerRequest) GetToUser() uint32 {
	if m != nil {
		return m.ToUser
	}
	return 0
}

type SendFlowerRespone struct {
	Result uint32         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Count  uint32         `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Cret   *CommonRetInfo `protobuf:"bytes,3,opt,name=cret" json:"cret,omitempty"`
}

func (m *SendFlowerRespone) Reset()                    { *m = SendFlowerRespone{} }
func (m *SendFlowerRespone) String() string            { return proto.CompactTextString(m) }
func (*SendFlowerRespone) ProtoMessage()               {}
func (*SendFlowerRespone) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *SendFlowerRespone) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SendFlowerRespone) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SendFlowerRespone) GetCret() *CommonRetInfo {
	if m != nil {
		return m.Cret
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryUsableFlowerCountRequest)(nil), "bilin.flowerserver.QueryUsableFlowerCountRequest")
	proto.RegisterType((*QueryUsableFlowerCountRespone)(nil), "bilin.flowerserver.QueryUsableFlowerCountRespone")
	proto.RegisterType((*SendFlowerRequest)(nil), "bilin.flowerserver.SendFlowerRequest")
	proto.RegisterType((*SendFlowerRespone)(nil), "bilin.flowerserver.SendFlowerRespone")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// Client API for FlowerServant service

type FlowerServantClient interface {
	QueryUsableFlowerCount(ctx context.Context, in *QueryUsableFlowerCountRequest, opts ...map[string]string) (*QueryUsableFlowerCountRespone, error)
	SendFlower(ctx context.Context, in *SendFlowerRequest, opts ...map[string]string) (*SendFlowerRespone, error)
}

type flowerServantClient struct {
	s model.Servant
}

func NewFlowerServantClient(objname string, comm servant.ICommunicator) FlowerServantClient {
	if comm == nil || objname == "" {
		return nil
	}
	return &flowerServantClient{s: comm.GetServantProxy(objname)}
}

func (c *flowerServantClient) QueryUsableFlowerCount(ctx context.Context, in *QueryUsableFlowerCountRequest, opts ...map[string]string) (*QueryUsableFlowerCountRespone, error) {
	var (
		reply QueryUsableFlowerCountRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "QueryUsableFlowerCount", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}
func (c *flowerServantClient) SendFlower(ctx context.Context, in *SendFlowerRequest, opts ...map[string]string) (*SendFlowerRespone, error) {
	var (
		reply SendFlowerRespone
	)

	pbbuf, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}

	_resp, err := c.s.Taf_invoke(ctx, 0, "SendFlower", pbbuf)
	if err != nil {
		return nil, err
	}

	if err = proto.Unmarshal(_resp.SBuffer, &reply); err != nil {
		return nil, err
	}
	return &reply, nil
}

// Server API for FlowerServant service

type FlowerServantServer interface {
	QueryUsableFlowerCount(context.Context, *QueryUsableFlowerCountRequest) (*QueryUsableFlowerCountRespone, error)
	SendFlower(context.Context, *SendFlowerRequest) (*SendFlowerRespone, error)
}

type flowerServantDispatcher struct {
}

func NewFlowerServantDispatcher() servant.Dispatcher {
	return &flowerServantDispatcher{}
}

func (_obj *flowerServantDispatcher) Dispatch(ctx context.Context, _val interface{}, req *taf.RequestPacket) (*taf.ResponsePacket, error) {
	var pbbuf []byte
	_imp := _val.(FlowerServantServer)
	switch req.SFuncName {
	case "QueryUsableFlowerCount":
		var req_ QueryUsableFlowerCountRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.QueryUsableFlowerCount(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	case "SendFlower":
		var req_ SendFlowerRequest
		if err := proto.Unmarshal(req.SBuffer, &req_); err != nil {
			return nil, err
		}

		_ret, err := _imp.SendFlower(ctx, &req_)
		if err != nil {
			return nil, err
		}

		if pbbuf, err = proto.Marshal(_ret); err != nil {
			return nil, err
		}

	default:
		return nil, errors.New("unknow func")
	}
	return &taf.ResponsePacket{
		IVersion:   1,
		IRequestId: req.IRequestId,
		SBuffer:    pbbuf,
		Context:    req.Context,
	}, nil
}

func init() { proto.RegisterFile("flowerserver.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xe9, 0xe6, 0x2a, 0x5c, 0x1d, 0x68, 0x18, 0x65, 0x14, 0x84, 0x51, 0x10, 0x0a, 0x42,
	0x61, 0xf3, 0x1f, 0x38, 0x10, 0x7c, 0xb4, 0x63, 0x2f, 0x7b, 0x91, 0x76, 0xbd, 0xc3, 0x62, 0x97,
	0x3b, 0x6f, 0x92, 0x89, 0x2f, 0xfe, 0x61, 0xff, 0x84, 0x2c, 0x69, 0x99, 0xb2, 0xea, 0xf0, 0x2d,
	0x87, 0x9c, 0x7b, 0xf2, 0xdd, 0x43, 0x40, 0xac, 0x2a, 0x7a, 0x43, 0x56, 0xc8, 0x5b, 0xe4, 0x64,
	0xc3, 0xa4, 0x49, 0x88, 0xbc, 0xac, 0x4a, 0x99, 0x7c, 0xbf, 0x09, 0xcf, 0x9f, 0x31, 0x2b, 0x1a,
	0x47, 0x34, 0x86, 0xab, 0x47, 0x83, 0xfc, 0x3e, 0x57, 0x59, 0x5e, 0xe1, 0xbd, 0x35, 0x4e, 0xc9,
	0x48, 0x9d, 0xe2, 0xab, 0x41, 0xa5, 0xc5, 0x05, 0x74, 0x4d, 0x59, 0x0c, 0xbd, 0x91, 0x17, 0xf7,
	0xd3, 0xdd, 0x31, 0x7a, 0xfa, 0x7d, 0x44, 0x6d, 0x48, 0xa2, 0x18, 0x40, 0x6f, 0xb9, 0xd3, 0xf5,
	0x90, 0x13, 0x22, 0x86, 0x93, 0x25, 0xa3, 0x1e, 0x76, 0x46, 0x5e, 0x7c, 0x36, 0x19, 0x24, 0x0e,
	0x6d, 0x4a, 0xeb, 0x35, 0xc9, 0x14, 0xf5, 0x83, 0x5c, 0x51, 0x6a, 0x1d, 0xd1, 0x0d, 0x5c, 0xce,
	0x50, 0x16, 0x2e, 0xb9, 0xe1, 0x08, 0xc0, 0xd7, 0x34, 0x57, 0xc8, 0x75, 0x6a, 0xad, 0xa2, 0x97,
	0x9f, 0x66, 0x47, 0x10, 0x80, 0xcf, 0xa8, 0x4c, 0xd5, 0x20, 0xd4, 0x6a, 0x4f, 0xd6, 0x69, 0x23,
	0xeb, 0x1e, 0x23, 0x9b, 0x7c, 0x7a, 0xd0, 0x77, 0x2f, 0xcd, 0x90, 0xb7, 0x99, 0xd4, 0xe2, 0x03,
	0x82, 0xf6, 0x32, 0xc4, 0x38, 0x39, 0x2c, 0x3f, 0xf9, 0xb3, 0xeb, 0xf0, 0x5f, 0x23, 0x6e, 0xd3,
	0x05, 0xc0, 0x7e, 0x7d, 0x71, 0xdd, 0x16, 0x70, 0xd0, 0x65, 0x78, 0xd4, 0x66, 0xb3, 0xef, 0x4e,
	0x17, 0x3d, 0xeb, 0xcb, 0x7d, 0xfb, 0x57, 0x6e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x70, 0xbd,
	0x6a, 0x88, 0x63, 0x02, 0x00, 0x00,
}
